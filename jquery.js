/*!
 * Библиотека JavaScript jQuery v3.6.3
 * https://jquery.com/
 *
 * Включает Sizzle.js
 * https://sizzlejs.com/
 *
 * Авторские права OpenJS Foundation и других участников
 * Выпущено по лицензии MIT
 * https://jquery.org/license
 *
 * Дата: 2022-12-20T21:28Z
 */
( функция (глобальная, фабрика) {

	"использовать строго";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// Для CommonJS и сред, подобных CommonJS, где правильное `окно`
		// присутствует, выполните фабрику и получите jQuery.
		// Для сред, в которых нет `окна` с `документом`
		// (например, Node.js), предоставьте фабрику как module.exports.
		// Это подчеркивает необходимость создания настоящего «окна».
		// например, var jQuery = require("jquery")(window);
		// Смотрите тикет trac-14549 для получения дополнительной информации.
		модуль.экспорт = глобальный.документ ?
			фабрика (глобальная, истина):
			функция ( ш ) {
				если ( !w.document ) {
					throw new Error("jQuery требует окно с документом");
				}
				вернуть фабрику (w);
			};
	} еще {
		фабрика (глобальная);
	}

// Передаем это, если окно еще не определено
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12–13+, Firefox <= 18–45+, IE 10–11, Safari 5.1–9+, iOS 6–9.1
// генерировать исключения, когда нестрогий код (например, ASP.NET 4.5) обращается к строгому режиму
// arguments.callee.caller (trac-13335). Но начиная с jQuery 3.0 (2016) строгий режим должен быть обычным явлением.
// достаточно, чтобы все такие попытки охранялись в блоке try.
"использовать строго";

вар обр = [];

вар getProto = Object.getPrototypeOf;

вар срез = обр.срез;

вар плоская = обр.плоская ? функция (массив) {
	вернуть arr.flat.call (массив);
} : функция (массив) {
	вернуть arr.concat.apply ([], массив);
};


вар толчок = arr.push;

переменная indexOf = arr.indexOf;

вар class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call(Объект);

поддержка вар = {};

var isFunction = функция isFunction (obj) {

		// Поддержка: Chrome <= 57, Firefox <= 52
		// В некоторых браузерах typeof возвращает "функцию" для HTML-элементов <object>
		// (т.е. `typeof document.createElement("object" ) === "function"`).
		// Мы не хотим классифицировать *любой* узел DOM как функцию.
		// Поддержка: QtWeb <= 3.8.5, WebKit <= 534.34, инструмент wkhtmltopdf <= 0.12.5
		// Кроме того, для старого WebKit typeof возвращает «функцию» для коллекций HTML
		// (например, `typeof document.getElementsByTagName("div") === "function"`). (гх-4756)
		return typeof obj === "функция" && typeof obj.nodeType !== "число" &&
			typeof obj.item !== "функция";
	};


var isWindow = функция isWindow (obj) {
		вернуть obj != null && obj === obj.window;
	};


вар документ = окно.документ;



	вар сохраненные ScriptAttributes = {
		Тип: правда,
		источник: правда,
		одноразовый номер: правда,
		немодуль: правда
	};

	функция DOMEval(код, узел, документ) {
		документ = документ || документ;

		вар я, вал,
			script = doc.createElement ("сценарий");

		сценарий.текст = код;
		если ( узел ) {
			для ( я в сохраненных ScriptAttributes ) {

				// Поддержка: Firefox 64+, Edge 18+
				// Некоторые браузеры не поддерживают свойство "nonce" в сценариях.
				// С другой стороны, просто использовать `getAttribute` недостаточно, так как
				// атрибут `nonce` сбрасывается в пустую строку всякий раз, когда он
				// становится связанным с контекстом просмотра.
				// См. https://github.com/whatwg/html/issues/2369
				// См. https://html.spec.whatwg.org/#nonce-attributes
				// Проверка `node.getAttribute` добавлена ​​для
				// `jQuery.globalEval`, чтобы он мог подделать узел, содержащий nonce
				// через объект.
				значение = узел[ я ] || node.getAttribute && node.getAttribute(i);
				если (значение) {
					script.setAttribute(я, значение);
				}
			}
		}
		doc.head.appendChild(сценарий).parentNode.removeChild(сценарий);
	}


функция toType (объект) {
	если ( объект == ноль ) {
		вернуть объект + "";
	}

	// Поддержка: только Android <= 2.3 (функциональное регулярное выражение)
	возвращаемый тип объекта obj === "объект" || typeof obj === "функция" ?
		class2type[toString.call(obj)] || "объект" :
		тип объекта;
}
/* глобальный символ */
// Определение этого глобального файла в .eslintrc.json создаст опасность использования глобального
// незащищенный в другом месте, безопаснее определить глобальный только для этого модуля



вар
	версия = "3.6.3",

	// Определяем локальную копию jQuery
	jQuery = функция (селектор, контекст) {

		// Объект jQuery на самом деле является просто «расширенным» конструктором инициализации
		// Нужна инициализация, если вызывается jQuery (просто разрешите выдать ошибку, если она не включена)
		вернуть новый jQuery.fn.init(селектор, контекст);
	};

jQuery.fn = jQuery.prototype = {

	// Используемая текущая версия jQuery
	jquery: версия,

	конструктор: jQuery,

	// Длина объекта jQuery по умолчанию равна 0
	длина: 0,

	toArray: функция () {
		вернуть slice.call(это);
	},

	// Получить N-й элемент в совпавшем наборе элементов ИЛИ
	// Получить весь набор совпадающих элементов в виде чистого массива
	получить: функция (число) {

		// Возвращаем все элементы чистого массива
		если ( число == ноль ) {
			вернуть slice.call(это);
		}

		// Возвращаем только один элемент из набора
		вернуть число <0? это[число + это.длина]: это[число];
	},

	// Берем массив элементов и помещаем его в стек
	// (возвращает новый набор совпадающих элементов)
	pushStack: функция (элементы) {

		// Создаем новый набор совпадающих элементов jQuery
		var ret = jQuery.merge(this.constructor(), elems);

		// Добавляем старый объект в стек (в качестве ссылки)
		ret.prevObject = это;

		// Возвращаем вновь сформированный набор элементов
		возврат рет;
	},

	// Выполнить обратный вызов для каждого элемента в совпавшем наборе.
	каждый: функция (обратный вызов) {
		вернуть jQuery.each(это, обратный вызов);
	},

	карта: функция (обратный вызов) {
		вернуть this.pushStack (jQuery.map (это, функция (элемент, я) {
			вернуть callback.call(элемент, я, элемент);
		} ) );
	},

	срез: функция () {
		вернуть this.pushStack(slice.apply(это, аргументы));
	},

	сначала: функция () {
		вернуть this.eq(0);
	},

	последний: функция () {
		вернуть this.eq(-1);
	},

	даже: функция () {
		вернуть this.pushStack(jQuery.grep(это, функция(_elem, я) {
			вернуть ( я + 1 ) % 2;
		} ) );
	},

	странно: функция () {
		вернуть this.pushStack(jQuery.grep(это, функция(_elem, я) {
			вернуть я% 2;
		} ) );
	},

	уравнение: функция ( я ) {
		var len = this.length,
			j = +i + (i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	конец: функция () {
		вернуть this.prevObject || этот.конструктор();
	},

	// Только для внутреннего использования.
	// Ведет себя как метод массива, а не как метод jQuery.
	двутолчковый,
	сортировка: обр.сортировка,
	сращивание: обр.сращивание
};

jQuery.extend = jQuery.fn.extend = функция () {
	параметры var, имя, источник, копия, копияIsArray, клон,
		цель = аргументы [ 0 ] || {},
		я = 1,
		длина = аргументы.длина,
		глубокий = ложный;

	// Обработка ситуации глубокого копирования
	если ( тип цели === "логическое" ) {
		глубокий = цель;

		// Пропустить логическое значение и цель
		цель = аргументы [ я ] || {};
		я++;
	}

	// Обработка случая, когда target является строкой или чем-то подобным (возможно в глубоком копировании)
	if ( typeof target !== "object" && !isFunction( target )) {
		цель = {};
	}

	// Расширяем сам jQuery, если передается только один аргумент
	если ( я === длина ) {
		цель = это;
		я--;
	}

	for ( ; я < длина; я ++ ) {

		// Работаем только с ненулевыми/неопределенными значениями
		если ( ( параметры = аргументы [ я ] ) != null ) {

			// Расширяем базовый объект
			для (имя в опциях) {
				копия = параметры [имя];

				// Предотвратить загрязнение Object.prototype
				// Предотвратить бесконечный цикл
				если (имя === "__proto__" || цель === копия) {
					продолжать;
				}

				// Рекурсия, если мы объединяем простые объекты или массивы
				если (глубокое && копирование && ( jQuery.isPlainObject( копирование ) ||
					( copyIsArray = Array.isArray( копировать ) ) ) ) {
					источник = цель [имя];

					// Гарантируем правильный тип исходного значения
					если ( copyIsArray && !Array.isArray ( источник ) ) {
						клон = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src )) {
						клон = {};
					} еще {
						клон = источник;
					}
					копимассив = ложь;

					// Никогда не перемещайте исходные объекты, клонируйте их
					цель [имя] = jQuery.extend(глубокий, клон, копировать);

				// Не вводите неопределенные значения
				} иначе если ( копировать !== не определено ) {
					цель[имя] = копия;
				}
			}
		}
	}

	// Возвращаем измененный объект
	вернуть цель;
};

jQuery.extend( {

	// Уникальный для каждой копии jQuery на странице
	expando: "jQuery" + ( версия + Math.random() ).replace( /\D/g, "" ),

	// Предположим, что jQuery готов без готового модуля
	isReady: правда,

	ошибка: функция (сообщение) {
		выдать новую ошибку (msg);
	},

	noop: функция () {},

	isPlainObject: функция (объект) {
		вар прото, Ctor;

		// Обнаружение очевидных минусов
		// Используйте toString вместо jQuery.type для захвата объектов хоста
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			вернуть ложь;
		}

		прото = получитьпрото (объект);

		// Объекты без прототипа (например, `Object.create(null)`) являются простыми
		если (! прото) {
			вернуть истину;
		}

		// Объекты с прототипом являются простыми тогда и только тогда, когда они были созданы глобальной функцией Object
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "функция" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: функция (объект) {
		имя вар;

		для (имя в объекте) {
			вернуть ложь;
		}
		вернуть истину;
	},

	// Оценивает скрипт в заданном контексте; возвращается к глобальному
	// если не указано.
	globalEval: функция (код, параметры, документ) {
		DOMEval(code, {nonce: options && options.nonce}, doc);
	},

	каждый: функция (объект, обратный вызов) {
		длина переменной, i = 0;

		если ( isArrayLike ( объект ) ) {
			длина = объект.длина;
			for ( ; я < длина; я ++ ) {
				если (callback.call(obj[i], i, obj[i]) === false) {
					перерыв;
				}
			}
		} еще {
			для ( я в объекте ) {
				если (callback.call(obj[i], i, obj[i]) === false) {
					перерыв;
				}
			}
		}

		вернуть объект;
	},

	// результаты только для внутреннего использования
	makeArray: функция (прибытие, результаты) {
		var ret = результаты || [];

		если ( обр != ноль ) {
			если ( isArrayLike ( Объект ( обр )) ) {
				jQuery.merge (возврат,
					тип обр === "строка" ?
						[ обр ] : обр
				);
			} еще {
				push.call(возврат, прибытие);
			}
		}

		возврат рет;
	},

	inArray: функция (элемент, массив, я) {
		вернуть обр == ноль? -1 : indexOf.call(прибытие, элемент, я);
	},

	// Поддержка: только Android <= 4.0, только PhantomJS 1
	// push.apply(_, arraylike) вызывает древний WebKit
	слияние: функция (первая, вторая) {
		var len = +секунда.длина,
			j = 0,
			я = первая.длина;

		for ( ; j < len; j++ ) {
			первый[i++] = второй[j];
		}

		первая.длина = я;

		вернуться первым;
	},

	grep: функция (элементы, обратный вызов, инвертировать) {
		вар callbackInverse,
			соответствует = [],
			я = 0,
			длина = элементы.длина,
			callbackExpect =! инвертировать;

		// Проходим по массиву, сохраняя только элементы
		// которые передают функцию валидатора
		for ( ; я < длина; я ++ ) {
			callbackInverse = !callback(элементы [i], i);
			если ( callbackInverse !== callbackExpect ) {
				match.push(элементы[i]);
			}
		}

		ответные матчи;
	},

	// arg предназначен только для внутреннего использования
	карта: функция (элементы, обратный вызов, аргумент) {
		длина переменной, значение,
			я = 0,
			рет = [];

		// Проходим по массиву, переводя каждый из элементов в их новые значения
		если ( isArrayLike ( элементы ) ) {
			длина = элементы.длина;
			for ( ; я < длина; я ++ ) {
				значение = обратный вызов (элементы [i], я, аргумент);

				если ( значение != ноль ) {
					ret.push (значение);
				}
			}

		// Проходим по каждому ключу объекта,
		} еще {
			для (я в элементах) {
				значение = обратный вызов (элементы [i], я, аргумент);

				если ( значение != ноль ) {
					ret.push (значение);
				}
			}
		}

		// Сглаживание любых вложенных массивов
		вернуть квартиру (возврат);
	},

	// Глобальный счетчик GUID для объектов
	гид: 1,

	// jQuery.support не используется в Core, но другие проекты прикрепляют свои
	// свойства для него, поэтому он должен существовать.
	поддержка: поддержка
});

если ( typeof Symbol === "функция" ) {
	jQuery.fn[Символ.итератор] = arr[Символ.итератор];
}

// Заполняем карту class2type
jQuery.each ("Логическое число Строка Функция Массив Дата RegExp Объект Символ ошибки".split( " " ),
	функция (_i, имя) {
		class2type[ "[объект " + имя + "]" ] = имя.toLowerCase();
	});

функция isArrayLike (obj) {

	// Поддержка: только реальная iOS 8.2 (не воспроизводится в симуляторе)
	// проверка `in`, используемая для предотвращения ошибки JIT (gh-2145)
	// hasOwn здесь не используется из-за ложных срабатываний
	// относительно длины списка узлов в IE
	var length = !!obj && "длина" в obj && obj.length,
		тип = тип (объект);

	если (isFunction(obj) || isWindow(obj)) {
		вернуть ложь;
	}

	возвращаемый тип === "массив" || длина === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
вар Шипение =
/*!
 * Sizzle CSS Selector Engine v2.3.9
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation и другие участники
 * Выпущено по лицензии MIT
 * https://js.foundation/
 *
 * Дата: 2022-12-19
 */
( функция( окно ) {
вар я,
	поддерживать,
	Экспл.,
	получитьтекст,
	XML,
	токенизировать,
	компилировать,
	выбирать,
	внешний контекст,
	сортировка,
	имеетДубликат,

	// Переменные локального документа
	установитьДокумент,
	документ,
	докЭлем,
	документIsHTML,
	rbuggyQSA,
	rbuggyСпички,
	Матчи,
	содержит,

	// Данные для конкретного экземпляра
	expando = "шипение" + 1 * новая дата(),
	предпочитаемый документ = окно.документ,
	дирранс = 0,
	сделано = 0,
	классCache = создатьCache(),
	tokenCache = создатьCache(),
	компиляторCache = создатьCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = функция ( а , б ) {
		если ( а === б ) {
			имеетДубликат = Истина;
		}
		вернуть 0;
	},

	// Методы экземпляра
	hasOwn = ( {} ).hasOwnProperty,
	обр = [],
	поп = обр.поп,
	pushNative = обр.push,
	толчок = прибытие,
	срез = обр.срез,

	// Используйте урезанный indexOf, так как он быстрее нативного
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = функция (список, элемент) {
		переменная я = 0,
			длина = список.длина;
		for ( ; я < len; я ++ ) {
			если ( список [ я ] === элемент ) {
				вернуть я;
			}
		}
		возврат -1;
	},

	booleans = "проверено | выбрано | асинхронно | автофокус | автовоспроизведение | управление | отсрочка | отключено | скрыто |" +
		"ismap|цикл|несколько|открытый|только для чтения|обязательный|ограниченный",

	// Обычные выражения

	// http://www.w3.org/TR/css3-selectors/#whitespace
	пробел = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-диаграмма
	идентификатор = "(?:\\\\[\\da-fA-F]{1,6}" + пробел +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Селекторы атрибутов: http://www.w3.org/TR/selectors/#attribute-selectors
	атрибуты = "\\[" + пробел + "*(" + идентификатор + ")(?:" + пробел +

		// Оператор (захват 2)
		"*([*^$|!~]?=)" + пробел +

		// "Значения атрибутов должны быть идентификаторами CSS [захват 5]
		// или строки [захват 3 или захват 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"] )*)\"|(" + идентификатор + "))|)" +
		пробел + "*\\]",

	псевдос = ":(" + идентификатор + ")(?:\\((" +

		// Чтобы уменьшить количество селекторов, требующих токенизации в preFilter, предпочитаем аргументы:
		// 1. в кавычках (захват 3; захват 4 или захват 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*) \")|" +

		// 2. простой (захват 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + атрибуты + ")*)|" +

		// 3. что-нибудь еще (захват 2)
		".*" +
		")\\)|)",

	// Начальный и неэкранированный конечный пробел, захват некоторых непробельных символов, предшествующих последнему
	rwhitespace = новое регулярное выражение (пробел + "+", "g"),
	rtrim = new RegExp( "^" + пробел + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		пробел + "+$", "г" ),

	rcomma = новое регулярное выражение ("^" + пробел + "*," + пробел + "*" ),
	rcombinators = new RegExp( "^" + пробел + "*([>+~]|" + пробел + ")" + пробел +
		"*"),
	rdescend = новое регулярное выражение (пробел + "|>"),

	rpseudo = новое регулярное выражение (псевдонимы),
	идентификатор = новое регулярное выражение ("^" + идентификатор + "$" ),

	matchExpr = {
		"ID": новое регулярное выражение ("^#(" + идентификатор + ")" ),
		"КЛАСС": новое регулярное выражение ("^\\.(" + идентификатор + ")" ),
		"TAG": новое регулярное выражение ("^(" + идентификатор + "|[*])" ),
		"ATTR": новое регулярное выражение ("^" + атрибуты),
		«ПСЕВДО»: новое регулярное выражение («^» + псевдонимы),
		"ДЕТСКИЙ": новое регулярное выражение( "^:(только|первый|последний|n-й|n-последний)-(дочерний|типа)(?:\\(" +
			пробел + "*(четный|нечетный|(([+-]|)(\\d*)n|)" + пробел + "*(?:([+-]|)" +
			пробел + "*(\\d+)|))" + пробел + "*\\)|)", "i" ),
		"bool": новое регулярное выражение ("^(?:" + логические значения + ")$", "i" ),

		// Для использования в библиотеках, реализующих .is()
		// Мы используем это для сопоставления POS в `select`
		"needsContext": новое регулярное выражение ("^" + пробел +
			"*[>+~]|:(четный|нечетный|eq|gt|lt|n-й|первый|последний)(?:\\(" + пробел +
			"*((?:-\\d)?\\d*)" + пробел + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/я,
	rinputs = /^(?:ввод|выбрать|текстовое поле|кнопка)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Легко анализируемый/извлекаемый ID или селекторы TAG или CLASS
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS экранирует
	// http://www.w3.org/TR/CSS21/syndata.html#экранированные-символы
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + пробел + "?|\\\\([^\\r\\n\\f])" , "г" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		вернуть неHex ?

			// Удалить префикс обратной косой черты из escape-последовательности, отличной от шестнадцатеричной
			нешестнадцатеричный :

			// Заменяем шестнадцатеричную управляющую последовательность закодированной кодовой точкой Unicode
			// Поддержка: IE <=11+
			// Для значений вне базовой многоязычной плоскости (BMP) создайте вручную
			// суррогатная пара
			высокий < 0 ?
				String.fromCharCode(высокий + 0x10000):
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Сериализация строки/идентификатора CSS
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = функция (ch, asCodePoint) {
		если ( asCodePoint ) {

			// U+0000 NULL становится U+FFFD ЗАМЕНЯЮЩИЙ СИМВОЛ
			если ( ch === "\0" ) {
				вернуть "\uFFFD";
			}

			// Управляющие символы и (в зависимости от позиции) числа экранируются как кодовые точки
			вернуть ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Другие потенциально специальные символы ASCII экранируются обратной косой чертой
		вернуть "\\" + ch;
	},

	// Используется для фреймов
	// См. setDocument()
	// Удаление оболочки функции вызывает "Отказ в доступе"
	// ошибка в IE
	выгрузить обработчик = функция () {
		УстановитьДокумент();
	},

	inDisabledFieldset = addCombinator(
		функция (элемент) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ каталог: "родительский узел", следующий: "легенда" }
	);

// Оптимизация для push.apply( _, NodeList )
пытаться {
	нажать.применить(
		(arr = slice.call(preferredDoc.childNodes)),
		предпочтительныйDoc.childNodes
	);

	// Поддержка: Android<4.0
	// Обнаружение молчаливого отказа push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[предпочтительныйDoc.childNodes.length].nodeType;
} поймать ( е ) {
	push = { применить: arr.length ?

		// Использовать срез, если возможно
		функция (цель, элс) {
			pushNative.apply(цель, slice.call(els));
		} :

		// Поддержка: IE<9
		// В противном случае добавляем напрямую
		функция (цель, элс) {
			var j = цель.длина,
				я = 0;

			// Нельзя доверять NodeList.length
			в то время как ( (цель [j++] = els[i++] )) {}
			цель.длина = j - 1;
		}
	};
}

функция Sizzle(селектор, контекст, результаты, семя) {
	var m, i, elem, nid, match, groups, newSelector,
		новыйКонтекст = контекст && context.ownerDocument,

		// nodeType по умолчанию равен 9, так как контекст по умолчанию имеет значение document
		тип узла = контекст? контекст.nodeType: 9;

	результаты = результаты || [];

	// Ранний возврат из вызовов с неверным селектором или контекстом
	if ( typeof selector !== "string" || !selector ||
		тип узла !== 1 && тип узла !== 9 && тип узла !== 11 ) {

		возвращать результаты;
	}

	// Попробуйте сократить операции поиска (в отличие от фильтров) в HTML-документах
	если (! семя) {
		УстановитьДокумент(контекст);
		контекст = контекст || документ;

		если (документIsHTML) {

			// Если селектор достаточно прост, попробуйте использовать DOM-метод get*By*
			// (кроме контекста DocumentFragment, где методы не существуют)
			if ( nodeType !== 11 && (match = rquickExpr.exec(селектор)) ) {

				// Селектор идентификатора
				если ( ( м = совпадение [ 1 ] ) ) {

					// Контекст документа
					если ( тип узла === 9 ) {
						если ( ( элемент = context.getElementById( m )) ) {

							// Поддержка: IE, Opera, Webkit
							// TODO: определить версии
							// getElementById может сопоставлять элементы по имени, а не по идентификатору
							если (элемент.id === м) {
								результаты.push(элемент);
								возвращать результаты;
							}
						} еще {
							возвращать результаты;
						}

					// Контекст элемента
					} еще {

						// Поддержка: IE, Opera, Webkit
						// TODO: определить версии
						// getElementById может сопоставлять элементы по имени, а не по идентификатору
						если ( новыйконтекст && ( элемент = новыйконтекст.getElementById( m )) &&
							содержит (контекст, элемент) &&
							элемент.id === м ) {

							результаты.push(элемент);
							возвращать результаты;
						}
					}

				// Селектор типа
				} иначе если (соответствие [ 2 ] ) {
					push.apply(результаты, context.getElementsByTagName(селектор));
					возвращать результаты;

				// Селектор класса
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName) {

					push.apply(результаты, context.getElementsByClassName(m));
					возвращать результаты;
				}
			}

			// Воспользуйтесь преимуществом querySelectorAll
			если ( support.qsa &&
				!nonnativeSelectorCache[ селектор + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test(селектор)) &&

				// Поддержка: только IE 8
				// Исключаем элементы объекта
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "объект" )) {

				новыйселектор = селектор;
				новыйконтекст = контекст;

				// qSA учитывает элементы вне корня области видимости при оценке дочерних или
				// комбинаторы-потомки, а это не то, что нам нужно.
				// В таких случаях мы обходим поведение, добавляя префикс к каждому селектору в
				// список с селектором идентификатора, ссылающимся на контекст области.
				// Эту технику также необходимо использовать, когда используется опережающий комбинатор
				// поскольку такие селекторы не распознаются querySelectorAll.
				// Спасибо Эндрю Дюпону за эту технику.
				если (тип узла === 1 &&
					( rdescend.test( селектор ) || rcombinators.test( селектор )) ) {

					// Расширяем контекст для родственных селекторов
					newContext = rsibling.test(селектор) && testContext(context.parentNode) ||
						контекст;

					// Мы можем использовать :scope вместо ID-хака, если браузер
					// поддерживает это, и если мы не меняем контекст.
					если ( newContext !== контекст || !support.scope ) {

						// Захватываем идентификатор контекста, предварительно установив его, если необходимо
						если ( ( nid = context.getAttribute ("id" )) ) {
							nid = nid.replace(rcssescape, fcssescape);
						} еще {
							context.setAttribute("id", (nid = expando));
						}
					}

					// Префикс каждого селектора в списке
					группы = токенизировать (селектор);
					я = группы.длина;
					в то время как я-- ) {
						groups[ i ] = (nid ? "#" + nid : ":scope" ) + " " +
							toSelector(группы[i]);
					}
					новыйселектор = groups.join («,»);
				}

				пытаться {

					// `qSA` не может генерировать неопознанные части, используя прощающий синтаксический анализ:
					// https://drafts.csswg.org/selectors/#forgiving-selector
					// аналогично псевдоклассу `:has()`:
					// https://drafts.csswg.org/selectors/#relational
					// Ожидается, что `CSS.supports` вернет `false`, тогда:
					// https://drafts.csswg.org/css-conditional-4/#typedef-supports-selector-fn
					// https://drafts.csswg.org/css-conditional-4/#dfn-support-selector
					если ( support.cssSupportsSelector &&

						// eslint-disable-next-line no-undef
						!CSS.supports("селектор(:is(" + newSelector + "))" )) {

						// Поддержка: IE 11+
						// Выбросить, чтобы перейти к тому же пути кода, что и ошибка, непосредственно в qSA.
						// Примечание: как только мы поддерживаем только браузер, поддерживающий
						// `CSS.supports('selector(...)')`, скорее всего мы можем удалить
						// `поймать-попробовать`. IE не реализует API.
						выдать новую ошибку();
					}

					push.apply(результаты,
						newContext.querySelectorAll (новый селектор)
					);
					возвращать результаты;
				} поймать ( qsaError ) {
					nonnativeSelectorCache(селектор, истина);
				} окончательно {
					если ( nid === expando ) {
						context.removeAttribute ("идентификатор");
					}
				}
			}
		}
	}

	// Все другие
	вернуть select(selector.replace(rtrim, "$1"), контекст, результаты, семя);
}

/**
 * Создание кешей ключ-значение ограниченного размера
 * @returns {function(string, object)} Возвращает данные объекта после их сохранения в себе с помощью
 * имя свойства строка (с пробелом) и (если кеш больше, чем Expr.cacheLength)
 * удаление самой старой записи
 */
функция создания кэша () {
	вар ключи = [];

	кэш функций( ключ, значение ) {

		// Используйте (клавиша + " "), чтобы избежать конфликта со свойствами собственного прототипа (см. Проблема № 157)
		если (keys.push(key + "") > Expr.cacheLength) {

			// Сохраняем только самые последние записи
			удалить кеш [keys.shift()];
		}
		return (кеш[ключ + ""] = значение);
	}
	кэш возврата;
}

/**
 * Отметьте функцию для специального использования Sizzle
 * @param {Function} fn Отмечаемая функция
 */
функция markFunction( fn ) {
	fn[expando] = истина;
	вернуть фн;
}

/**
 * Поддержка тестирования с использованием элемента
 * @param {Function} fn Передает созданный элемент и возвращает логический результат
 */
функция утверждает( fn ) {
	var el = document.createElement («набор полей»);

	пытаться {
		вернуть !!fn(эль);
	} поймать ( е ) {
		вернуть ложь;
	} окончательно {

		// Удалить из родителя по умолчанию
		если (эл.родительский узел) {
			el.parentNode.removeChild(эль);
		}

		// освободить память в IE
		эль = ноль;
	}
}

/**
 * Добавляет один и тот же обработчик для всех указанных атрибутов
 * @param {String} attrs Список атрибутов, разделенных вертикальной чертой.
 * Обработчик @param {Function} Метод, который будет применен
 */
функция addHandle (атрибуты, обработчик) {
	вар обр = attrs.split ("|" ),
		i = длина приб.;

	в то время как я-- ) {
		Expr.attrHandle[arr[i]] = обработчик;
	}
}

/**
 * Проверяет порядок документов двух братьев и сестер
 * @param {Элемент} а
 * @param {Элемент} b
 * @returns {Number} Возвращает меньше 0, если a предшествует b, больше 0, если a следует за b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			а.исходный индекс - б.исходный индекс;

	// Использовать IE sourceIndex, если он доступен на обоих узлах
	если ( разница ) {
		возврат разницы;
	}

	// Проверяем, следует ли b за a
	если ( курс ) {
		в то время как ( ( ​​cur = cur.nextSibling )) {
			если ( текущий === б ) {
				возврат -1;
			}
		}
	}

	вернуть а? 1 : -1;
}

/**
 * Возвращает функцию для использования в псевдоскриптах для входных типов
 * Тип @param {String}
 */
функция createInputPseudo (тип) {
	функция возврата (элемент) {
		имя переменной = elem.nodeName.toLowerCase();
		возвращаемое имя === "ввод" && elem.type === type;
	};
}

/**
 * Возвращает функцию для использования в псевдо-кнопках
 * Тип @param {String}
 */
функция createButtonPseudo (тип) {
	функция возврата (элемент) {
		имя переменной = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Возвращает функцию для использования в псевдоскриптах для :enabled/:disabled
 * @param {Boolean} disabled true для :disabled; ложь для: включено
 */
функция createDisabledPseudo(отключена) {

	// Известные ложные срабатывания :disabled: fieldset[disabled] > легенда:nth-of-type(n+2) :can-disable
	функция возврата (элемент) {

		// Только определенные элементы могут соответствовать :enabled или :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		если ("форма" в элементе) {

			// Проверяем наличие унаследованной неработоспособности соответствующих неотключенных элементов:
			// * список связанных с формой элементов в отключенном наборе полей
			// https://html.spec.whatwg.org/multipage/forms.html#category-listed
			// https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * элементы option в отключенной optgroup
			// https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// Все такие элементы имеют свойство "форма".
			если ( elem.parentNode && elem.disabled === false ) {

				// Элементы опций ссылаются на родительскую группу опций, если она присутствует
				если ("метка" в элементе) {
					если ("метка" в elem.parentNode) {
						вернуть elem.parentNode.disabled === отключено;
					} еще {
						вернуть elem.disabled === отключено;
					}
				}

				// Поддержка: IE 6–11
				// Используйте свойство ярлыка isDisabled для проверки отключенных предков набора полей
				вернуть elem.isDisabled === отключено ||

					// Где нет isDisabled, проверяем вручную
					/* jshint -W018 */
					elem.isDisabled !== !отключено &&
					inDisabledFieldset(элемент) === отключено;
			}

			вернуть elem.disabled === отключено;

		// Попробуйте отсеять элементы, которые нельзя отключить, прежде чем доверять отключенному свойству.
		// Некоторые жертвы попадают в нашу сеть (ярлык, легенда, меню, трек), но не должны
		// даже существуют на них, не говоря уже о том, чтобы иметь логическое значение.
		} иначе если ("метка" в элементе) {
			вернуть elem.disabled === отключено;
		}

		// Остальные элементы не имеют ни :enabled, ни :disabled
		вернуть ложь;
	};
}

/**
 * Возвращает функцию для использования в псевдо-символах для позиционных
 * @param {Функция} fn
 */
функция createPositionalPseudo(fn) {
	вернуть markFunction (функция (аргумент) {
		аргумент = +аргумент;
		return markFunction(функция(начальное число, совпадения) {
			вар дж,
				matchIndexes = fn([], seed.length, аргумент),
				я = matchIndexes.length;

			// Соответствие элементам, найденным по указанным индексам
			в то время как я-- ) {
				если ( семя [ ( j = matchIndexes [ i ] ) ] ) {
					семя [ j ] = !( соответствует [ j ] = семя [ j ] );
				}
			}
		});
	});
}

/**
 * Проверяет узел на валидность как контекст Sizzle
 * @param {Элемент|Объект=} контекст
 * @returns {Element|Object|Boolean} Входной узел, если он допустим, иначе ложное значение
 */
функция testContext (контекст) {
	возвращаемый контекст && typeof context.getElementsByTagName !== "undefined" && context;
}

// Предоставление переменных поддержки для удобства
поддержка = Sizzle.support = {};

/**
 * Обнаруживает узлы XML
 * @param {Element|Object} elem Элемент или документ
 * @returns {Boolean} True, если элемент не является XML-узлом HTML
 */
isXML = Sizzle.isXML = функция (элемент) {
	var namespace = элемент && elem.namespaceURI,
		docElem = elem && ( elem.ownerDocument || elem ).documentElement;

	// Поддержка: IE <=8
	// Предположим, HTML, когда documentElement еще не существует, например, внутри загружаемых фреймов
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( пространство имен || docElem && docElem.nodeName || "HTML" );
};

/**
 * Устанавливает связанные с документом переменные один раз на основе текущего документа
 * @param {Element|Object} [doc] Элемент или объект документа, используемый для установки документа.
 * @returns {Object} Возвращает текущий документ
 */
setDocument = Sizzle.setDocument = функция (узел) {
	var hasCompare, подокно,
		документ = узел? узел.владелецДокумент || узел: предпочитаемый документ;

	// Возврат раньше, если документ недействителен или уже выбран
	// Поддержка: IE 11+, Edge 17–18+
	// IE/Edge иногда выдает ошибку «Отказано в доступе» при строгом сравнении
	// два документа; поверхностные сравнения работают.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		возвратный документ;
	}

	// Обновить глобальные переменные
	документ = документ;
	докЭлем = документ.документЭлемент;
	documentIsHTML = !isXML(документ);

	// Поддержка: IE 9–11+, Edge 12–18+
	// Доступ к документам iframe после выгрузки вызывает ошибку «отказано в доступе» (jQuery # 13936)
	// Поддержка: IE 11+, Edge 17–18+
	// IE/Edge иногда выдает ошибку «Отказано в доступе» при строгом сравнении
	// два документа; поверхностные сравнения работают.
	// eslint-disable-next-line eqeqeq
	если ( предпочитаемый документ != документ &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Поддержка: IE 11, Edge
		если ( subWindow.addEventListener ) {
			subWindow.addEventListener («выгрузить», unloadHandler, false);

		// Поддержка: только IE 9–10
		} иначе если ( subWindow.attachEvent ) {
			subWindow.attachEvent("onunload", unloadHandler);
		}
	}

	// Поддержка: IE 8–11+, Edge 12–18+, Chrome <=16–25 только, Firefox <=3.6–31 только,
	// Только Safari 4–5, Opera <= 11.6–12.x только
	// IE/Edge и более старые браузеры не поддерживают псевдокласс :scope.
	// Поддержка: только Safari 6.0
	// Safari 6.0 поддерживает :scope, но там это псевдоним :root.
	support.scope = утверждение (функция (эль) {
		docElem.appendChild(el).appendChild(document.createElement("div" ));
		возвращаемый тип el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	});

	// Поддержка: Chrome 105+, Firefox 104+, Safari 15.4+
	// Убедитесь, что режим прощения не используется в `CSS.supports("selector(...)" )`.
	//
	// `:is()` использует прощающий список селекторов в качестве аргумента и широко
	// реализовано, поэтому его можно протестировать.
	support.cssSupportsSelector = утверждение (функция () {
		/* eslint-disable no-undef */

		вернуть CSS.supports ("селектор (*)" ) &&

			// Поддержка: только Firefox 78-81
			// В старом Firefox `:is()` не использовал щадящий синтаксический анализ. В таком случае,
			// провалить этот тест, так как нет селектора для проверки.
			// `CSS.supports` использует неумолимый синтаксический анализ
			document.querySelectorAll (": is (: jqfake)" ) &&

			// `*` необходим, так как Safari и более новый Chrome реализовали что-то среднее
			// для `:has()` - выдается `qSA`, если он содержит только неподдерживаемый
			// аргумент, но допустимо несколько аргументов, один из которых поддерживается.
			// Мы хотим перестраховаться на тот случай, если `:is()` будет обработано так же.
			!CSS.supports("селектор(:is(*,:jqfake))" );

		/* eslint-включить */
	});

	/* Атрибуты
	-------------------------------------------------- -------------------- */

	// Поддержка: IE<8
	// Проверяем, что getAttribute действительно возвращает атрибуты, а не свойства
	// (кроме логических значений IE8)
	support.attributes = assert ( функция ( el ) {
		эл.имя_класса = "я";
		вернуть !el.getAttribute («имя класса»);
	});

	/* получитьЭлементы*
	-------------------------------------------------- -------------------- */

	// Проверяем, возвращает ли getElementsByTagName("*") только элементы
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild(document.createComment("" ));
		вернуть !el.getElementsByTagName( "*" ).length;
	});

	// Поддержка: IE<9
	support.getElementsByClassName = rnative.test(document.getElementsByClassName);

	// Поддержка: IE<10
	// Проверяем, возвращает ли getElementById элементы по имени
	// Сломанные методы getElementById не принимают программно заданные имена,
	// поэтому используйте обходной тест getElementsByName
	support.getById = утверждение (функция (эль) {
		docElem.appendChild(el).id = expando;
		вернуть !document.getElementsByName || !document.getElementsByName(expando).length;
	});

	// Фильтровать ID и находить
	если ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace(runescape, funescape);
			функция возврата (элемент) {
				вернуть elem.getAttribute("id") === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById(id);
				вернуть элемент? [элемент]: [];
			}
		};
	} еще {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace(runescape, funescape);
			функция возврата (элемент) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					элемент.getAttributeNode("id");
				возвращаемый узел && node.value === attrId;
			};
		};

		// Поддержка: только IE 6–7
		// getElementById не является надежным средством поиска
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				узел вар, я, элементы,
					элемент = context.getElementById (идентификатор);

				если (элемент) {

					// Проверяем атрибут id
					node = elem.getAttributeNode("id");
					если (узел && node.value === идентификатор) {
						возврат [элемент];
					}

					// Возврат к getElementsByName
					elems = context.getElementsByName (идентификатор);
					я = 0;
					в то время как ( ( ​​элемент = элемент [ я ++ ] ) ) {
						node = elem.getAttributeNode("id");
						если (узел && node.value === идентификатор) {
							возврат [элемент];
						}
					}
				}

				возвращаться [];
			}
		};
	}

	// Ярлык
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		функция (тег, контекст) {
			если ( typeof context.getElementsByTagName !== "undefined" ) {
				вернуть context.getElementsByTagName (тег);

			// узлы DocumentFragment не имеют gEBTN
			} иначе если ( support.qsa ) {
				вернуть context.querySelectorAll (тег);
			}
		} :

		функция (тег, контекст) {
			вар элем,
				тмп = [],
				я = 0,

				// По счастливой случайности (сломанный) gEBTN появляется и на узлах DocumentFragment
				результаты = context.getElementsByTagName (тег);

			// Отфильтровать возможные комментарии
			если ( тег === "*" ) {
				в то время как ( ( ​​элемент = результаты [ я ++ ] ) ) {
					если (элемент.nodeType === 1) {
						tmp.push(элемент);
					}
				}

				вернуть температуру;
			}
			возвращать результаты;
		};

	// Сорт
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			вернуть context.getElementsByClassName (имя класса);
		}
	};

	/* QSA/matchesSelector
	-------------------------------------------------- -------------------- */

	// Поддержка QSA и matchSelector

	// matchSelector(:active) сообщает false, когда true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) сообщает false, когда true (Chrome 21)
	// Мы разрешаем это из-за ошибки в IE8/9, которая выдает ошибку
	// всякий раз, когда происходит доступ к `document.activeElement` в iframe
	// Итак, мы разрешаем :focus все время проходить через QSA, чтобы избежать ошибки IE
	// См. https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	если (( support.qsa = rnative.test(document.querySelectorAll)) ) {

		// Строим регулярное выражение QSA
		// Стратегия регулярных выражений, заимствованная у Диего Перини
		утверждать ( функция ( эл ) {

			ввод переменной;

			// Выбор намеренно установлен на пустую строку
			// Это нужно для проверки обработки IE не явно
			// установка логического атрибута содержимого,
			// так как его наличия должно быть достаточно
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Поддержка: IE8, Opera 11-12.16
			// Ничего не должно быть выбрано, если за ^= или $= или *= следуют пустые строки
			// Атрибут test должен быть неизвестен в Opera, но "безопасен" для WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			если ( el.querySelectorAll ("[msallowcapture ^ = '']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + пробел + "*(?:''|\"\")" );
			}

			// Поддержка: IE8
			// Логические атрибуты и "значение" обрабатываются неправильно
			если ( !el.querySelectorAll ("[выбрано]" ).length ) {
				rbuggyQSA.push( "\\[" + пробел + "*(?:значение|" + логические значения + ")" );
			}

			// Поддержка: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Поддержка: IE 11+, Edge 15–18+
			// IE 11/Edge в некоторых случаях не находит элементы в запросе `[name='']`.
			// Добавление временного атрибута в документ до того, как сработает выделение
			// Вокруг проблемы.
			// Интересно, что в IE 10 и старше этой проблемы нет.
			ввод = документ.создатьЭлемент ("ввод");
			input.setAttribute («имя», «»);
			el.appendChild (ввод);
			если (!el.querySelectorAll("[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + пробел + "*имя" + пробел + "*=" +
					пробел + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked должен возвращать выбранные элементы option
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 выдает здесь ошибку и не увидит более поздние тесты
			если ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push(":проверено");
			}

			// Поддержка: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// Внутристраничный селектор `selector#id sibling-combinator` не работает
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Поддержка: Firefox <=3.6 - только 5
			// Старый Firefox не выдает идентификатор с плохим экранированием.
			el.querySelectorAll("\\\f");
			rbuggyQSA.push("[\\r\\n\\f]" );
		});

		утверждать ( функция ( эл ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Поддержка: родные приложения Windows 8
			// Атрибуты типа и имени ограничены во время назначения .innerHTML
			var input = document.createElement("input");
			input.setAttribute («тип», «скрытый»);
			el.appendChild(ввод).setAttribute("имя", "D");

			// Поддержка: IE8
			// Включить регистрозависимость атрибута имени
			если ( el.querySelectorAll ("[name = d]" ).length ) {
				rbuggyQSA.push("имя" + пробел + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled и скрытые элементы (скрытые элементы по-прежнему включены)
			// IE8 выдает здесь ошибку и не увидит более поздние тесты
			если ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":включено", ":отключено" );
			}

			// Поддержка: IE9-11+
			// Селектор IE :disabled не выбирает дочерние элементы отключенных наборов полей
			docElem.appendChild(el).disabled = true;
			если ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":включено", ":отключено" );
			}

			// Поддержка: только Opera 10–11
			// Opera 10-11 не выбрасывает после запятой недопустимые псевдонимы
			el.querySelectorAll("*,:x");
			rbuggyQSA.push( ",.*:" );
		});
	}

	если ( ( support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitСелектор совпадений ||
		docElem.mozСелектор совпадений ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		утверждать ( функция ( эл ) {

			// Проверяем, возможно ли сделать matchSelector
			// на отключенном узле (IE 9)
			support.disconnectedMatch = match.call(el, "*");

			// Это должно завершиться ошибкой с исключением
			// Gecko не ошибается, вместо этого возвращает false
			match.call(el, "[s!='']:x" );
			rbuggyMatches.push( "!=", псевдонимы);
		});
	}

	если ( !support.cssSupportsSelector ) {

		// Поддержка: Chrome 105+, Safari 15.4+
		// `:has()` использует прощающий список селекторов в качестве аргумента, поэтому наш обычный
		// Механизм `try-catch` не может поймать `:has()` с неподдерживаемыми аргументами
		// изначально похоже на `:has(:contains("Foo"))`. Там, где поддерживается и соответствует спецификациям,
		// теперь мы используем `CSS.supports("selector(:is(SELECTOR_TO_BE_TESTED))")`, но
		// вне этого мы помечаем `:has` как ошибочный.
		rbuggyQSA.push(":имеет");
	}

	rbuggyQSA = rbuggyQSA.length && новое регулярное выражение( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && новое регулярное выражение( rbuggyMatches.join("|" ));

	/* Содержит
	-------------------------------------------------- -------------------- */
	hasCompare = rnative.test(docElem.compareDocumentPosition);

	// Элемент содержит другой
	// Намеренно самоисключающий
	// Как и в случае, элемент не содержит самого себя
	содержит = hasCompare || rnative.test(docElem.contains)?
		функция ( а , б ) {

			// Поддержка: только IE <9
			// IE не содержит `contains` для `document`, поэтому нам нужно проверить
			// наличие `documentElement`.
			// Нам нужно вернуться к `a`, когда `documentElement` отсутствует
			// так как `ownerDocument` элементов внутри `<template/>` может иметь
			// нуль - стандартное поведение всех современных браузеров.
			var adown = a.nodeType === 9 && a.documentElement || а,
				bup = b && b.parentNode;
			вернуть === bup || !!( bup && bup.nodeType === 1 && (
				adown.содержит ?
					adown.contains(bup):
					a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16
			));
		} :
		функция ( а , б ) {
			если ( б ) {
				в то время как ( ( ​​б = b.parentNode )) {
					если ( б === а ) {
						вернуть истину;
					}
				}
			}
			вернуть ложь;
		};

	/* Сортировка
	-------------------------------------------------- -------------------- */

	// Сортировка порядка документов
	sortOrder = hasCompare ?
	функция ( а , б ) {

		// Флаг удаления дубликатов
		если ( а === б ) {
			имеетДубликат = Истина;
			вернуть 0;
		}

		// Сортируем по наличию метода, если только один вход имеет compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		если (сравнить) {
			вернуть сравнение;
		}

		// Рассчитываем позицию, если оба входа принадлежат одному и тому же документу
		// Поддержка: IE 11+, Edge 17–18+
		// IE/Edge иногда выдает ошибку «Отказано в доступе» при строгом сравнении
		// два документа; поверхностные сравнения работают.
		// eslint-disable-next-line eqeqeq
		сравнить = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition(b):

			// В противном случае мы знаем, что они отключены
			1;

		// Отключенные узлы
		если ( сравнить & 1 ||
			(!support.sortDetached && b.compareDocumentPosition(a) === сравнить)) {

			// Выбираем первый элемент, связанный с нашим предпочтительным документом
			// Поддержка: IE 11+, Edge 17–18+
			// IE/Edge иногда выдает ошибку «Отказано в доступе» при строгом сравнении
			// два документа; поверхностные сравнения работают.
			// eslint-disable-next-line eqeqeq
			если ( a == документ || a.ownerDocument == предпочитаемый документ &&
				содержит (предпочитаемый документ, а) ) {
				возврат -1;
			}

			// Поддержка: IE 11+, Edge 17–18+
			// IE/Edge иногда выдает ошибку «Отказано в доступе» при строгом сравнении
			// два документа; поверхностные сравнения работают.
			// eslint-disable-next-line eqeqeq
			если ( b == документ || b.ownerDocument == предпочтительный документ &&
				содержит (предпочитаемый документ, б) ) {
				вернуть 1;
			}

			// Сохраняем первоначальный порядок
			вернуть sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b )) :
				0;
		}

		вернуться сравнить & 4 ? -1 : 1;
	} :
	функция ( а , б ) {

		// Выход раньше, если узлы идентичны
		если ( а === б ) {
			имеетДубликат = Истина;
			вернуть 0;
		}

		вар кур,
			я = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ап = [а],
			бп = [б];

		// Безродительские узлы либо документы, либо отключены
		если ( !aup || !bup ) {

			// Поддержка: IE 11+, Edge 17–18+
			// IE/Edge иногда выдает ошибку «Отказано в доступе» при строгом сравнении
			// два документа; поверхностные сравнения работают.
			/* eslint-отключить eqeqeq */
			вернуть == документ? -1 :
				б == документ? 1 :
				/* eqeqeq с поддержкой eslint */
				ауп ? -1 :
				бап? 1 :
				сортировать ввод ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b )) :
				0;

		// Если узлы одноуровневые, мы можем сделать быструю проверку
		} иначе если ( aup === bup ) {
			вернуть siblingCheck(a, b);
		}

		// В противном случае нам нужны полные списки их предков для сравнения
		кур = а;
		в то время как ( ( ​​cur = cur.parentNode )) {
			ap.unshift(курс);
		}
		кур = б;
		в то время как ( ( ​​cur = cur.parentNode )) {
			bp.unshift(курс);
		}

		// Проходим по дереву в поисках несоответствия
		в то время как (ap[i] === bp[i]) {
			я++;
		}

		вернуть я?

			// Делаем проверку на родство, если узлы имеют общего предка
			siblingCheck(ap[i], bp[i]):

			// В противном случае узлы в нашем документе сортируются первыми
			// Поддержка: IE 11+, Edge 17–18+
			// IE/Edge иногда выдает ошибку «Отказано в доступе» при строгом сравнении
			// два документа; поверхностные сравнения работают.
			/* eslint-отключить eqeqeq */
			ap[ i ] == предпочтительный документ? -1 :
			bp[i] == предпочитаемый документ? 1 :
			/* eqeqeq с поддержкой eslint */
			0;
	};

	возвратный документ;
};

Sizzle.matches = функция (выражение, элементы) {
	return Sizzle(expr, null, null, elements);
};

Sizzle.matchesSelector = функция (элемент, выражение) {
	УстановитьДокумент(элемент);

	если ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ выражение + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr )) &&
		( !rbuggyQSA || !rbuggyQSA.test(выражение) )) {

		пытаться {
			var ret = match.call(элемент, выражение);

			// MatchSelector IE 9 возвращает false на отключенных узлах
			если ( рет || support.disconnectedMatch ||

				// Также говорят, что отключенные узлы находятся в документе
				// фрагмент в IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				возврат рет;
			}
		} поймать ( е ) {
			nonnativeSelectorCache(expr, true);
		}
	}

	return Sizzle(expr, document, null, [elem]).length > 0;
};

Sizzle.contains = функция (контекст, элемент) {

	// При необходимости устанавливаем переменные документа
	// Поддержка: IE 11+, Edge 17–18+
	// IE/Edge иногда выдает ошибку «Отказано в доступе» при строгом сравнении
	// два документа; поверхностные сравнения работают.
	// eslint-disable-next-line eqeqeq
	если ( ( context.ownerDocument || контекст ) != документ ) {
		УстановитьДокумент(контекст);
	}
	возврат содержит (контекст, элемент);
};

Sizzle.attr = функция (элемент, имя) {

	// При необходимости устанавливаем переменные документа
	// Поддержка: IE 11+, Edge 17–18+
	// IE/Edge иногда выдает ошибку «Отказано в доступе» при строгом сравнении
	// два документа; поверхностные сравнения работают.
	// eslint-disable-next-line eqeqeq
	если ( ( elem.ownerDocument || elem ) != документ ) {
		УстановитьДокумент(элемент);
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Не дайте себя обмануть свойствами Object.prototype (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn(элемент, имя, !documentIsHTML):
			неопределенный;

	вернуть значение !== не определено?
		значение:
		поддержка.атрибуты || !документIsHTML ?
			элемент.getAttribute(имя):
			( val = elem.getAttributeNode( name )) && val.specified ?
				знач.значение :
				нулевой;
};

Sizzle.escape = функция (сел) {
	return (sel + "").replace(rcssescape, fcssescape);
};

Sizzle.error = функция (сообщение) {
	throw new Error("Синтаксическая ошибка, нераспознанное выражение: " + msg );
};

/**
 * Сортировка документов и удаление дубликатов
 * @param {ArrayLike} результаты
 */
Sizzle.uniqueSort = функция (результаты) {
	вар элем,
		дубликаты = [],
		j = 0,
		я = 0;

	// Если мы *не знаем*, что можем обнаружить дубликаты, предполагаем их наличие
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	результаты.sort( sortOrder );

	если (есть дубликат) {
		в то время как ( ( ​​элемент = результаты [ я ++ ] ) ) {
			если ( элемент === результаты [ я ] ) {
				j = дубликаты.push(i);
			}
		}
		в то время как (j--) {
			results.splice (дубликаты [ j ], 1 );
		}
	}

	// Очистить ввод после сортировки, чтобы освободить объекты
	// См. https://github.com/jquery/sizzle/pull/225
	сортировка = ноль;

	возвращать результаты;
};

/**
 * Вспомогательная функция для получения текстового значения массива узлов DOM.
 * Элемент @param {Массив|Элемент}
 */
getText = Sizzle.getText = функция (элемент) {
	вар узел,
		рет = "",
		я = 0,
		тип узла = элемент.тип узла;

	если ( ! тип узла ) {

		// Если нет nodeType, ожидается, что это будет массив
		в то время как ( ( ​​узел = элемент [ я ++ ] ) ) {

			// Не пересекать узлы комментариев
			рет += получитьтекст(узел);
		}
	} иначе если (тип узла === 1 || тип узла === 9 || тип узла === 11) {

		// Использовать textContent для элементов
		// использование innerText удалено для согласованности новых строк (jQuery #11153)
		если ( typeof elem.textContent === "строка" ) {
			вернуть элемент.textContent;
		} еще {

			// Обход его дочерних элементов
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				рет += получитьтекст(элемент);
			}
		}
	} иначе если (тип узла === 3 || тип узла === 4) {
		вернуть элемент.nodeValue;
	}

	// Не включайте узлы комментариев или инструкций по обработке

	возврат рет;
};

Выражение = Sizzle.selectors = {

	// Может быть изменен пользователем
	кешДлина: 50,

	создатьПсевдо: пометитьФункция,

	совпадение: matchExpr,

	обработчик атрибута: {},

	находить: {},

	родственник: {
		">": { каталог: "parentNode", первый: true},
		" ": {каталог: "родительский узел" },
		"+": { каталог: "previousSibling", первый: true},
		"~": {каталог: "предыдущий брат" }
	},

	предварительный фильтр: {
		"ATTR": функция (соответствие) {
			match[1] = match[1].replace(runescape, funescape);

			// Переместите заданное значение в соответствие [3] вне зависимости от того, заключено оно в кавычки или нет
			совпадение [ 3 ] = ( совпадение [ 3 ] || совпадение [ 4 ] ||
				совпадение[ 5 ] || "" ).replace(runescape, funescape);

			если ( совпадение [ 2 ] === "~=" ) {
				матч [ 3 ] = " " + матч [ 3 ] + " ";
			}

			вернуть match.slice(0, 4);
		},

		"РЕБЕНОК": функция (соответствие) {

			/* совпадения из matchExpr["CHILD"]
				1 тип (только|n-й|...)
				2 что (дочернее|типа)
				3 аргумента (четные|нечетные|\d*|\d*n([+-]\d+)?|...)
				4 xn-компонент аргумента xn+y ([+-]?\d*n|)
				5 знак xn-компоненты
				6 x xn-компонента
				7 знак y-компоненты
				8 y y-компоненты
			*/
			матч[1] = матч[1].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* требует аргумента
				если ( !match[ 3 ] ) {
					Sizzle.error(match[0]);
				}

				// числовые параметры x и y для Expr.filter.CHILD
				// помните, что false/true приводятся соответственно к 0/1
				совпадение[4] = +( совпадение[4]?
					совпадение [ 5 ] + ( совпадение [ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "четный" || match[ 3 ] === "нечетный" ) );
				match[ 5 ] = +(( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "нечетный" );

				// другие типы запрещают аргументы
			} иначе если (совпадение[3]) {
				Sizzle.error(match[0]);
			}

			ответный матч;
		},

		"ПСЕВДО": функция (соответствие) {
			избыток вар,
				без кавычек = !match[6] && match[2];

			if ( matchExpr[ "CHILD" ].test( match[0 ] )) {
				вернуть ноль;
			}

			// Принимаем аргументы в кавычках как есть
			если ( совпадение [ 3 ] ) {
				совпадение [ 2 ] = совпадение [ 4 ] || совпадение[ 5 ] || "";

			// Удаляем лишние символы из аргументов без кавычек
			} else if (без кавычек && rpseudo.test(без кавычек) &&

				// Получаем избыток от токенизации (рекурсивно)
				(избыток = токенизировать (без кавычек, правда)) &&

				// переход к следующей закрывающей скобке
				(избыток = без кавычек.indexOf (")", без кавычек. длина - превышение) - без кавычек. длина)) {

				// превышение - отрицательный индекс
				match[0] = match[0].slice(0, избыток);
				match[ 2 ] = unquoted.slice(0, превышение);
			}

			// Возвращаем только захваты, необходимые методу псевдофильтра (тип и аргумент)
			вернуть match.slice(0, 3);
		}
	},

	фильтр: {

		"ТЕГ": функция (nodeNameSelector) {
			var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
			вернуть nodeNameSelector === "*" ?
				функция () {
					вернуть истину;
				} :
				функция (элемент) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		«КЛАСС»: функция (имя класса) {
			var pattern = classCache[ className + " " ];

			шаблон возврата ||
				( шаблон = новое регулярное выражение ("(^|" + пробел +
					")" + className + "(" + пробел + "|$)" )) && classCache(
						className, функция (элемент) {
							вернуть шаблон.тест(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute("класс" ) ||
								""
							);
				});
		},

		"ATTR": функция (имя, оператор, проверка) {
			функция возврата (элемент) {
				var result = Sizzle.attr(элемент, имя);

				если (результат == ноль) {
					оператор возврата === "!=";
				}
				если ( !оператор ) {
					вернуть истину;
				}

				результат += "";

				/* eslint-disable max-len */

				оператор возврата === "=" ? результат === проверка:
					оператор === "!=" ? результат !== проверка :
					оператор === "^=" ? проверить && result.indexOf( проверить ) === 0 :
					оператор === "*=" ? проверить && result.indexOf(проверить) > -1 :
					оператор === "$=" ? проверить && result.slice( -check.length ) === проверить :
					оператор === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( проверить ) > -1 :
					оператор === "|=" ? результат === проверка || result.slice( 0, check.length + 1 ) === check + "-" :
					ЛОЖЬ;
				/* eslint-enable max-len */

			};
		},

		"ДЕТСКИЙ": функция (тип, что, _аргумент, первый, последний) {
			var simple = type.slice( 0, 3 ) !== "n-й",
				вперед = type.slice(-4) !== "последний",
				ofType = what === "типа";

			вернуть первый === 1 && последний === 0 ?

				// Ярлык для :nth-*(n)
				функция (элемент) {
					вернуть !!elem.parentNode;
				} :

				функция (элемент, _context, xml) {
					var cache, uniqueCache, externalCache, node, nodeIndex, start,
						директор = простой !== вперед ? "nextSibling" : "предыдущийSibling",
						родитель = элемент.родительскийузел,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						разница = ложь;

					если ( родитель ) {

						// :(первый|последний|только)-(дочерний|типа)
						если (просто) {
							в то время как (режим) {
								узел = элемент;
								в то время как ( ( ​​узел = узел [ каталог ] )) {
									если (типа?
										node.nodeName.toLowerCase() === имя:
										node.nodeType === 1 ) {

										вернуть ложь;
									}
								}

								// Обратное направление для :only-* (если мы еще этого не сделали)
								start = dir = type === "только" && !start && "nextSibling";
							}
							вернуть истину;
						}

						начало = [вперед? parent.firstChild : parent.lastChild ];

						// не-xml :nth-child(...) сохраняет данные кеша на `parent`
						если (переслать && useCache) {

							// Ищем `elem` из ранее кэшированного индекса

							// ...в удобном для gzip формате
							узел = родитель;
							externalCache = узел[расширить] || (узел[expando] = {});

							// Поддержка: только IE <9
							// Защита от клонированных атак (jQuery gh-1709)
							uniqueCache = externalCache[ node.uniqueID ] ||
								(outerCache[node.uniqueID] = {});

							кеш = уникальный кеш [ тип ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Возврат к поиску `elem` с самого начала
								( diff = nodeIndex = 0 ) || start.pop() )) {

								// При обнаружении кэшируем индексы на `parent` и прерываем
								если ( node.nodeType === 1 && ++diff && узел === элемент ) {
									uniqueCache[тип] = [dirruns, nodeIndex, diff];
									перерыв;
								}
							}

						} еще {

							// Использовать ранее кэшированный индекс элемента, если он доступен
							если ( использовать кеш ) {

								// ...в удобном для gzip формате
								узел = элемент;
								externalCache = узел[расширить] || (узел[expando] = {});

								// Поддержка: только IE <9
								// Защита от клонированных атак (jQuery gh-1709)
								uniqueCache = externalCache[ node.uniqueID ] ||
									(outerCache[node.uniqueID] = {});

								кеш = уникальный кеш [ тип ] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								разница = индекс узла;
							}

							// xml :nth-child(...)
							// или :nth-last-child(...) или :nth(-last)?-of-type(...)
							если ( diff === false ) {

								// Используйте тот же цикл, что и выше, для поиска `elem` с самого начала
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() )) {

									если (( Типа?
										node.nodeName.toLowerCase() === имя:
										node.nodeType === 1 ) &&
										++ разница) {

										// Кешируем индекс каждого встреченного элемента
										если ( использовать кеш ) {
											externalCache = узел[расширить] ||
												(узел[expando] = {});

											// Поддержка: только IE <9
											// Защита от клонированных атак (jQuery gh-1709)
											uniqueCache = externalCache[ node.uniqueID ] ||
												(outerCache[node.uniqueID] = {});

											uniqueCache[тип] = [dirruns, diff];
										}

										если (узел === элемент) {
											перерыв;
										}
									}
								}
							}
						}

						// Включаем смещение, затем проверяем размер цикла
						diff -= последний;
						вернуть diff === первый || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"ПСЕВДО": функция (псевдо, аргумент) {

			// имена псевдоклассов нечувствительны к регистру
			// http://www.w3.org/TR/selectors/#псевдоклассы
			// Приоритет по чувствительности к регистру в случае, если пользовательские псевдонимы добавляются с заглавными буквами
			// Помните, что setFilters наследуется от псевдофильтров
			переменные аргументы,
				fn = Expr.pseudos[ псевдо ] || Expr.setFilters[ псевдо.toLowerCase() ] ||
					Sizzle.error("неподдерживаемый псевдо: " + псевдо);

			// Пользователь может использовать createPseudo, чтобы указать, что
			// аргументы необходимы для создания функции фильтра
			// так же, как Sizzle
			если ( fn [расширить ] ) {
				вернуть фн (аргумент);
			}

			// Но сохранить поддержку старых подписей
			если ( fn.length > 1 ) {
				args = [псевдо, псевдо, "", аргумент];
				вернуть Expr.setFilters.hasOwnProperty (псевдо.toLowerCase())?
					markFunction(функция(начальное число, совпадения) {
						переменная IDX,
							совпало = fn (начальное число, аргумент),
							я = соответствует.длина;
						в то время как я-- ) {
							idx = indexOf(seed, match[i]);
							seed[idx] = !(matches[idx] = match[i]);
						}
					} ):
					функция (элемент) {
						вернуть fn(элемент, 0, аргументы);
					};
			}

			вернуть фн;
		}
	},

	псевдонимы: {

		// Потенциально сложные псевдосимволы
		«не»: markFunction (функция (селектор) {

			// Обрезаем селектор, переданный для компиляции
			// чтобы избежать обработки начального и конечного
			// пробелы как комбинаторы
			переменная ввода = [],
				результаты = [],
				matcher = compile(selector.replace(rtrim, "$1" ));

			вернуть сопоставитель[расширить] ?
				markFunction(функция(начальное значение, совпадения, _context, xml) {
					вар элем,
						непревзойденный = сопоставитель (seed, null, xml, []),
						я = семя.длина;

					// Сопоставляем элементы, не сопоставленные с помощью `matcher`
					в то время как я-- ) {
						если ( ( элемент = непревзойденный [ я ] ) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				} ):
				функция (элемент, _context, xml) {
					ввод [0] = элемент;
					сопоставитель (ввод, ноль, xml, результаты);

					// Не сохранять элемент (issue #299)
					ввод [0] = ноль;
					вернуть !results.pop();
				};
		} ),

		«имеет»: markFunction (функция (селектор) {
			функция возврата (элемент) {
				return Sizzle(селектор, элемент).length > 0;
			};
		} ),

		«содержит»: markFunction (функция (текст) {
			text = text.replace(runescape, funescape);
			функция возврата (элемент) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Представлен ли элемент селектором :lang()
		// основывается исключительно на языковом значении элемента
		// равный идентификатору C,
		// или начиная с идентификатора C, за которым сразу следует "-".
		// Сопоставление C со значением языка элемента выполняется без учета регистра.
		// Идентификатор C не обязательно должен быть допустимым названием языка."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		«язык»: markFunction (функция (язык) {

			// значение lang должно быть действительным идентификатором
			если ( !ridentifier.test(язык || "" )) {
				Sizzle.error("язык не поддерживается: " + lang );
			}
			lang = lang.replace(runescape, funescape).toLowerCase();
			функция возврата (элемент) {
				вар элемланг;
				делать {
					если ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang" ) || elem.getAttribute( "язык" ) ) ) {

						elemLang = elemLang.toLowerCase();
						вернуть elemLang === lang || elemLang.indexOf(язык + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				вернуть ложь;
			};
		} ),

		// Разнообразный
		"цель": функция (элемент) {
			var hash = window.location && window.location.hash;
			вернуть хеш && hash.slice( 1 ) === elem.id;
		},

		"корень": функция (элемент) {
			вернуть элемент === docElem;
		},

		"фокус": функция (элемент) {
			вернуть элемент === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Логические свойства
		«включено»: createDisabledPseudo(false),
		"отключено": createDisabledPseudo(true),

		"проверено": функция (элемент) {

			// В CSS3 :checked должен возвращать как отмеченные, так и выбранные элементы
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var имя_узла = elem.имя_узла.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"выбрано": функция (элемент) {

			// Доступ к этому свойству делает выбранным по умолчанию
			// параметры в Safari работают правильно
			если (элемент.родительский узел) {
				// eslint-disable-next-line no-unused-expressions
				элемент.parentNode.selectedIndex;
			}

			вернуть elem.selected === true;
		},

		// Содержание
		"пусто": функция (элемент) {

			// http://www.w3.org/TR/selectors/#empty-псевдо
			// :empty отрицается элементом (1) или узлами содержимого (текст: 3; cdata: 4; ссылка на объект: 5),
			// но не другими (комментарий: 8; инструкция обработки: 7 и т. д.)
			// nodeType < 6 работает, потому что атрибуты (2) не отображаются как дочерние
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				если (элемент.nodeType < 6) {
					вернуть ложь;
				}
			}
			вернуть истину;
		},

		«родительский»: функция (элемент) {
			return !Expr.pseudos["пусто"](элемент);
		},

		// Типы элементов/ввода
		"заголовок": функция (элемент) {
			вернуть rheader.test(elem.nodeName);
		},

		"вход": функция (элемент) {
			вернуть rinputs.test( elem.nodeName );
		},

		«кнопка»: функция (элемент) {
			имя переменной = elem.nodeName.toLowerCase();
			возвращаемое имя === "ввод" && elem.type === "кнопка" || имя === "кнопка";
		},

		"текст": функция (элемент) {
			вар атрибут;
			вернуть elem.nodeName.toLowerCase() === "вход" &&
				элемент.тип === "текст" &&

				// Поддержка: только IE <10
				// Новые значения атрибутов HTML5 (например, «поиск») появляются с elem.type === «text»
				( ( attr = elem.getAttribute( "type" )) == null ||
					attr.toLowerCase() === "текст" );
		},

		// Позиция в коллекции
		" первый": createPositionalPseudo (функция () {
			возврат [0];
		} ),

		«последний»: createPositionalPseudo (функция (_matchIndexes, длина) {
			возврат [ длина - 1 ];
		} ),

		"eq": createPositionalPseudo (функция (_matchIndexes, длина, аргумент) {
			вернуть [аргумент <0? аргумент + длина : аргумент ];
		} ),

		«четный»: createPositionalPseudo (функция (индексы соответствия, длина) {
			переменная я = 0;
			for ( ; я < длина; я += 2 ) {
				matchIndexes.push(i);
			}
			вернуть индексы соответствия;
		} ),

		«нечетный»: createPositionalPseudo (функция (индексы соответствия, длина) {
			вар я = 1;
			for ( ; я < длина; я += 2 ) {
				matchIndexes.push(i);
			}
			вернуть индексы соответствия;
		} ),

		«lt»: createPositionalPseudo (функция (индексы соответствия, длина, аргумент) {
			переменная я = аргумент < 0 ?
				аргумент + длина:
				аргумент > длина?
					длина :
					аргумент;
			для ( ; --i >= 0; ) {
				matchIndexes.push(i);
			}
			вернуть индексы соответствия;
		} ),

		«gt»: createPositionalPseudo (функция (индексы соответствия, длина, аргумент) {
			переменная я = аргумент < 0 ? аргумент + длина: аргумент;
			для ( ; ++i < длина; ) {
				matchIndexes.push(i);
			}
			вернуть индексы соответствия;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Добавляем псевдо-кнопку/тип ввода
for ( я в { радио: правда, флажок: правда, файл: правда, пароль: правда, изображение: правда } ) {
	Expr.pseudos[i] = createInputPseudo(i);
}
для (я в {отправить: правда, сбросить: правда}) {
	Expr.pseudos[i] = createButtonPseudo(i);
}

// Простой API для создания новых setFilters
функция setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = новый setFilters();

tokenize = Sizzle.tokenize = функция (селектор, только разбор) {
	var сопоставлено, совпадение, токены, тип,
		soFar, группы, предварительные фильтры,
		cached = tokenCache[ селектор + " " ];

	если (кэшировано) {
		вернуть parseOnly ? 0 : cached.slice( 0 );
	}

	так Фар = селектор;
	группы = [];
	preFilters = Expr.preFilter;

	в то время как ( пока ) {

		// Запятая и первый запуск
		если ( ! соответствует || ( соответствует = rcomma.exec ( soFar )) ) {
			если ( совпадение ) {

				// Не использовать завершающие запятые как допустимые
				soFar = soFar.slice(match[ 0 ].length ) || до сих пор;
			}
			groups.push((токены = []));
		}

		совпало = ложь;

		// Комбинаторы
		если ( ( match = rcombinators.exec ( soFar )) ) {
			совпало = match.shift();
			токены.push( {
				значение: соответствует,

				// Выбрасываем комбинаторы-потомки в пробел
				тип: match[ 0 ].replace( rtrim, " " )
			});
			soFar = soFar.slice(соответствующая.длина);
		}

		// Фильтры
		for (введите Expr.filter) {
			if ( ( match = matchExpr[ type ].exec( soFar )) && ( !preFilters[ type ] ||
				( совпадение = предварительные фильтры [ тип ] ( совпадение ) ) ) ) {
				совпало = match.shift();
				токены.push( {
					значение: соответствует,
					тип: тип,
					совпадения: совпадение
				});
				soFar = soFar.slice(соответствующая.длина);
			}
		}

		если (! совпало) {
			перерыв;
		}
	}

	// Возвращаем длину недопустимого превышения
	// если мы просто разбираем
	// В противном случае выдать ошибку или вернуть токены
	вернуть parseOnly ?
		soFar.length :
		до сих пор ?
			Sizzle.error(селектор):

			// Кэшируем токены
			tokenCache(селектор, группы).slice(0);
};

функция toSelector( токены ) {
	переменная я = 0,
		len = токены.длина,
		селектор = "";
	for ( ; я < len; я ++ ) {
		селектор += токены[ i ].value;
	}
	селектор возврата;
}

функция addCombinator(сопоставитель, комбинатор, база) {
	var dir = combinator.dir,
		пропустить = комбинатор.следующий,
		ключ = пропустить || реж,
		checkNonElements = base && key === "parentNode",
		doneName = готово++;

	вернуть комбинатор.первый ?

		// Проверяем ближайший предок/предшествующий элемент
		функция (элемент, контекст, xml) {
			в то время как ( ( ​​элемент = элемент [ каталог ] ) ) {
				если ( elem.nodeType === 1 || checkNonElements ) {
					вернуть сопоставитель(элемент, контекст, xml);
				}
			}
			вернуть ложь;
		} :

		// Проверка всех предков/предшествующих элементов
		функция (элемент, контекст, xml) {
			var oldCache,uniqueCache,outerCache,
				newCache = [dirruns, doneName];

			// Мы не можем устанавливать произвольные данные на узлах XML, поэтому они не выигрывают от кэширования комбинатора
			если ( xml ) {
				в то время как ( ( ​​элемент = элемент [ каталог ] ) ) {
					если ( elem.nodeType === 1 || checkNonElements ) {
						если (сопоставитель (элемент, контекст, xml)) {
							вернуть истину;
						}
					}
				}
			} еще {
				в то время как ( ( ​​элемент = элемент [ каталог ] ) ) {
					если ( elem.nodeType === 1 || checkNonElements ) {
						externalCache = элемент[расширить] || (элемент [расширить] = {});

						// Поддержка: только IE <9
						// Защита от клонированных атак (jQuery gh-1709)
						uniqueCache = externalCache[ elem.uniqueID ] ||
							( externalCache[ elem.uniqueID ] = {} );

						если ( пропустить && пропустить === elem.nodeName.toLowerCase() ) {
							элемент = элемент [директория] || элемент;
						} else if ( ( oldCache = uniqueCache[ ключ ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Назначаем newCache, чтобы результаты распространялись обратно на предыдущие элементы
							вернуть ( новый кэш [ 2 ] = старый кэш [ 2 ] );
						} еще {

							// Повторно используем новый кэш, чтобы результаты распространялись обратно на предыдущие элементы
							uniqueCache[ключ] = newCache;

							// Совпадение означает, что мы закончили; сбой означает, что мы должны продолжать проверять
							if ( ( newCache[ 2 ] = matcher( elem, context, xml )) ) {
								вернуть истину;
							}
						}
					}
				}
			}
			вернуть ложь;
		};
}

функция elementMatcher (сопоставители) {
	вернуть matchers.length > 1?
		функция (элемент, контекст, xml) {
			переменная я = matchers.length;
			в то время как я-- ) {
				если ( !matchers[ i ](элемент, контекст, xml)) {
					вернуть ложь;
				}
			}
			вернуть истину;
		} :
		сопоставители [ 0 ];
}

function multipleContexts(селектор, контексты, результаты) {
	переменная я = 0,
		len = контексты.длина;
	for ( ; я < len; я ++ ) {
		Sizzle(селектор, контексты[i], результаты);
	}
	возвращать результаты;
}

функция конденсации (непревзойденная, карта, фильтр, контекст, xml) {
	вар элем,
		новыйНепревзойденный = [],
		я = 0,
		len = непревзойденная длина,
		сопоставлено = карта != ноль;

	for ( ; я < len; я ++ ) {
		если ( ( элемент = непревзойденный [ я ] ) ) {
			если (!фильтр || фильтр(элемент, контекст, xml)) {
				newUnmatched.push(элемент);
				если (сопоставлено) {
					карта.push(я);
				}
			}
		}
	}

	вернуть новое непревзойденное;
}

function setMatcher (preFilter, selector, matcher, postFilter, postFinder, postSelector) {
	если ( postFilter && !postFilter[расширить ] ) {
		postFilter = setMatcher(postFilter);
	}
	если ( postFinder && !postFinder[расширить ] ) {
		postFinder = setMatcher(postFinder, postSelector);
	}
	return markFunction(функция(seed, results, context, xml) {
		вар темп, я, элем,
			предварительная карта = [],
			постКарта = [],
			ранее существовавший = results.length,

			// Получить начальные элементы из семени или контекста
			элементы = семя || несколькоконтекстов(
				селектор || "*",
				контекст.nodeType ? [ контекст ] : контекст,
				[]
			),

			// Предварительный фильтр для получения входных данных сопоставления, сохраняя карту для синхронизации начальных результатов
			matcherIn = preFilter && (seed || !selector)?
				уплотнить (элементы, предварительная карта, предварительный фильтр, контекст, xml):
				элементы,

			matcherOut = сопоставитель?

				// Если у нас есть postFinder, или отфильтрованное начальное число, или не начальное значение postFilter, или уже существующие результаты,
				поиск сообщений || ( seed ? preFilter : существующий || postFilter ) ?

					// ...необходима промежуточная обработка
					[] :

					// ...иначе использовать результаты напрямую
					Результаты :
				матчерВ;

		// Находим первичные совпадения
		если (сопоставитель) {
			matcher(matcherIn, matcherOut, context, xml);
		}

		// Применяем постфильтр
		если (постфильтр) {
			temp = уплотнить (matcherOut, postMap);
			postFilter(temp, [], context, xml);

			// Несопоставимые элементы, переместив их обратно в matcherIn
			я = темп.длина;
			в то время как я-- ) {
				если ( ( элемент = temp [ я ] ) ) {
					matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
				}
			}
		}

		если ( семя ) {
			если ( postFinder || preFilter ) {
				если ( postFinder ) {

					// Получите окончательный matcherOut, объединив этот промежуточный результат в контексты postFinder
					темп = [];
					я = matcherOut.length;
					в то время как я-- ) {
						если ( ( элемент = matcherOut [ i ] ) ) {

							// Восстанавливаем matcherIn, так как elem еще не является окончательным соответствием
							temp.push((matcherIn[i] = elem));
						}
					}
					postFinder(null, (matcherOut = []), temp, xml);
				}

				// Перемещаем совпадающие элементы из начального значения в результаты, чтобы обеспечить их синхронизацию
				я = matcherOut.length;
				в то время как я-- ) {
					если ( ( элемент = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf(seed, elem) : preMap[i] ) > -1 ) {

						семя[темп] = !(результаты[темп] = элемент);
					}
				}
			}

		// Добавляем элементы в результаты через postFinder, если он определен
		} еще {
			matcherOut = конденсировать (
				matcherOut === результаты?
					matcherOut.splice (существующий ранее, matcherOut.length):
					matcherOut
			);
			если ( postFinder ) {
				postFinder(null, results, matcherOut, xml);
			} еще {
				push.apply(результаты, matcherOut);
			}
		}
	});
}

функция matcherFromTokens (токены) {
	var checkContext, сопоставитель, j,
		len = токены.длина,
		ведущийОтносительный = Выраж.относительный[токены[0].тип],
		неявный относительный = ведущий относительный || Выраж.отн.[ " " ],
		я = ведущий относительный ? 1 : 0,

		// Основополагающий сопоставитель гарантирует, что элементы доступны из контекста(ов) верхнего уровня
		matchContext = addCombinator(функция(элемент) {
			возвращаемый элемент === checkContext;
		}, неявный относительный, истинный),
		matchAnyContext = addCombinator(функция(элемент) {
			вернуть indexOf(checkContext, elem)>-1;
		}, неявный относительный, истинный),
		matchers = [функция (элемент, контекст, xml) {
			var ret = (!leadingRelative && (xml || context !== externalmostContext)) || (
				( checkContext = контекст ).nodeType ?
					matchContext(элемент, контекст, xml):
					matchAnyContext(элемент, контекст, xml));

			// Избегайте зависания на элементе (issue #299)
			проверитьконтекст = ноль;
			возврат рет;
		} ];

	for ( ; я < len; я ++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} еще {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Возвращаем special при обнаружении позиционного сопоставления
			если ( сопоставитель [расширить ] ) {

				// Находим следующий относительный оператор (если есть) для правильной обработки
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						перерыв;
					}
				}
				вернуть setMatcher(
					i > 1 && elementMatcher(сопоставители),
					я > 1 && toSelector(

					// Если предыдущий токен был комбинатором-потомком, вставьте неявный любой элемент `*`
					жетоны
						.срез( 0, я - 1 )
						.concat ({значение: токены [ i - 2 ].type === " " ? "*" : "" } )
					).replace(rtrim, "$1"),
					матчер,
					i < j && matcherFromTokens(tokens.slice(i, j)),
					j < len && matcherFromTokens(( tokens = tokens.slice( j )) ),
					j < len && toSelector (токены)
				);
			}
			matchers.push(сопоставитель);
		}
	}

	вернуть elementMatcher (сопоставители);
}

функция matcherFromGroupMatchers (elementMatchers, setMatchers) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = функция (семя, контекст, xml, результаты, самый внешний) {
			вар элем, дж, сопоставитель,
				совпадениеКоличество = 0,
				я = "0",
				непревзойденный = семя && [],
				setMatched = [],
				contextBackup = внешний контекст,

				// У нас всегда должны быть либо начальные элементы, либо самый внешний контекст
				элементы = семя || byElement && Expr.find[ "TAG" ]( "*", самый внешний ),

				// Используем целочисленные dirruns, если это самый внешний сопоставитель
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				длина = элементы.длина;

			если (самый внешний) {

				// Поддержка: IE 11+, Edge 17–18+
				// IE/Edge иногда выдает ошибку «Отказано в доступе» при строгом сравнении
				// два документа; поверхностные сравнения работают.
				// eslint-disable-next-line eqeqeq
				внешний контекст = контекст == документ || контекст || крайний;
			}

			// Добавляем элементы, передающие elementMatchers, непосредственно в результаты
			// Поддержка: IE<9, Safari
			// Допускать свойства NodeList (IE: "length"; Safari: <number>), совпадающие с элементами по идентификатору
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				если (элемент && элемент) {
					j = 0;

					// Поддержка: IE 11+, Edge 17–18+
					// IE/Edge иногда выдает ошибку «Отказано в доступе» при строгом сравнении
					// два документа; поверхностные сравнения работают.
					// eslint-disable-next-line eqeqeq
					если ( !контекст && elem.ownerDocument != документ ) {
						УстановитьДокумент(элемент);
						xml = !documentIsHTML;
					}
					в то время как ( ( ​​matcher = elementMatchers [ j++ ] )) {
						если (сопоставитель( элемент, контекст || документ, xml )) {
							результаты.push(элемент);
							перерыв;
						}
					}
					если (самый внешний) {
						dirruns = dirrunsUnique;
					}
				}

				// Отслеживание несовпадающих элементов для заданных фильтров
				если ( bySet ) {

					// Они прошли через все возможные сопоставления
					если ( ( элемент = ! matcher && elem )) {
						matchedCount--;
					}

					// Удлиняем массив для каждого элемента, совпадающего или нет
					если ( семя ) {
						непревзойденный.push(элемент);
					}
				}
			}

			// `i` теперь является количеством элементов, посещенных выше, и добавляется к `matchedCount`
			// делает последнее неотрицательным.
			matchedCount += я;

			// Применяем установленные фильтры к несовпадающим элементам
			// ПРИМЕЧАНИЕ. Это можно пропустить, если нет несовпадающих элементов (например, `matchedCount`
			// равно `i`), если только мы не посетили _any_ элементов в предыдущем цикле, потому что у нас есть
			// нет сопоставителей элементов и начального числа.
			// Увеличение исходной строки "0" `i` позволяет `i` оставаться строкой только в этом
			// случай, который приведет к "00" `matchedCount`, который отличается от `i`, но также
			// численно ноль.
			если ( bySet && i !== matchedCount ) {
				j = 0;
				в то время как ( ( ​​сопоставитель = setMatchers [ J ++ ] ) ) {
					сопоставитель (несоответствующий, setMatched, контекст, xml);
				}

				если ( семя ) {

					// Реинтеграция совпадений элементов, чтобы исключить необходимость сортировки
					если (matchedCount > 0) {
						в то время как я-- ) {
							если ( !( несопоставленный [ я ] || setMatched [ я ] )) {
								setMatched[i] = pop.call(результаты);
							}
						}
					}

					// Отбросить значения заполнителей индекса, чтобы получить только фактические совпадения
					setMatched = конденсировать (setMatched);
				}

				// Добавляем совпадения к результатам
				push.apply(результаты, setMatched);

				// Множество совпадений без начальных значений после нескольких успешных совпадений обуславливает сортировку
				если ( самый внешний && !seed && setMatched.length > 0 &&
					(matchedCount + setMatchers.length) > 1) {

					Sizzle.uniqueSort(результаты);
				}
			}

			// Переопределить манипуляции с глобальными переменными с помощью вложенных сопоставителей
			если (самый внешний) {
				dirruns = dirrunsUnique;
				внешний контекст = contextBackup;
			}

			вернуться непревзойденным;
		};

	вернуть поSet ?
		markFunction(superMatcher):
		суперматчер;
}

compile = Sizzle.compile = function( selector, match /* Только для внутреннего использования */ ) {
	вар я,
		setMatchers = [],
		элементMatchers = [],
		кэшированный = компиляторCache[ селектор + " " ];

	если ( !кэшировано ) {

		// Генерируем функцию рекурсивных функций, которую можно использовать для проверки каждого элемента
		если (! совпадение) {
			match = токенизировать (селектор);
		}
		я = соответствие.длина;
		в то время как я-- ) {
			cached = matcherFromTokens(match[i]);
			если ( кэшировано [расширить ] ) {
				setMatchers.push(кэшировано);
			} еще {
				elementMatchers.push(кэшировано);
			}
		}

		// Кэшируем скомпилированную функцию
		кэшированный = компиляторCache(
			селектор,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Сохранить селектор и токенизацию
		cached.selector = селектор;
	}
	возврат в кэше;
};

/**
 * Низкоуровневая функция выбора, которая работает с скомпилированным Sizzle
 * функции выбора
 * @param {String|Function} selector Селектор или предварительно скомпилированный
 * функция выбора, созданная с помощью Sizzle.compile
 * @param {Элемент} контекст
 * @param {массив} [результаты]
 * @param {Array} [seed] Набор элементов для сопоставления
 */
select = Sizzle.select = функция (селектор, контекст, результаты, семя) {
	вар я, жетоны, токен, тип, найти,
		скомпилированный = тип селектора === "функция" && селектор,
		match = !seed && tokenize(( selector =compile.selector || selector ) );

	результаты = результаты || [];

	// Стараемся минимизировать операции, если в списке только один селектор и нет семени
	// (последнее из которых гарантирует нам контекст)
	если ( match.length === 1 ) {

		// Сократить контекст, если ведущий составной селектор является идентификатором
		токены = совпадение [ 0 ] = совпадение [ 0 ] .slice ( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			контекст = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace(runescape, funescape), контекст) || [] )[ 0 ];
			если ( !контекст ) {
				возвращать результаты;

			// Предварительно скомпилированные сопоставители по-прежнему будут проверять происхождение, поэтому поднимитесь на уровень выше
			} иначе, если (скомпилировано) {
				контекст = контекст.родительский узел;
			}

			selector = selector.slice(tokens.shift().value.length);
		}

		// Извлекаем начальный набор для сопоставления справа налево
		i = matchExpr["needsContext"].test(селектор)? 0 : токены.длина;
		в то время как я-- ) {
			токен = токены[i];

			// Прервать, если мы наткнулись на комбинатор
			if ( Expr.relative [ ( type = token.type ) ] ) {
				перерыв;
			}
			если ( ( найти = Expr.find [ тип ] ) ) {

				// Поиск, расширение контекста для ведущих комбинаторов родственных элементов
				если (( семя = найти(
					token.matches[0].replace(runescape, funescape),
					rsibling.test(токены[0].type) && testContext(context.parentNode) ||
						контекст
				) ) ) {

					// Если семя пусто или не осталось токенов, мы можем вернуться раньше
					tokens.splice(i, 1);
					selector = seed.length && toSelector(токены);
					если (! селектор) {
						push.apply(результаты, семя);
						возвращать результаты;
					}

					перерыв;
				}
			}
		}
	}

	// Компилируем и выполняем функцию фильтрации, если она не указана
	// Укажите `match`, чтобы избежать ретокенизации, если мы изменили селектор выше
	( скомпилировано || скомпилировать( селектор, совпадение ))(
		семя,
		контекст,
		!документIsHTML,
		Результаты,
		!контекст || rsibling.test(селектор) && testContext(context.parentNode) || контекст
	);
	возвращать результаты;
};

// Одноразовые задания

// Стабильность сортировки
support.sortStable = expando.split( "").sort( sortOrder ).join( "" ) === expando;

// Поддержка: Chrome 14-35+
// Всегда допускайте наличие дубликатов, если они не передаются в функцию сравнения
support.detectDuplicates = !!hasDuplicate;

// Инициализировать документ по умолчанию
УстановитьДокумент();

// Поддержка: Webkit<537.32 — Safari 6.0.3/Chrome 25 (исправлено в Chrome 27)
// Отсоединенные узлы беспорядочно следуют *друг за другом*
support.sortDetached = assert ( функция ( el ) {

	// Должен вернуть 1, но возвращает 4 (следующее)
	вернуть el.compareDocumentPosition(document.createElement("fieldset")) & 1;
});

// Поддержка: IE<8
// Предотвратить "интерполяцию" атрибута/свойства
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
если ( !assert( функция( el ) {
	el.innerHTML = "<a href='#'></a>";
	вернуть el.firstChild.getAttribute («href») === «#»;
} ) ) {
	addHandle("type|href|height|width", function( elem, name, isXML) {
		если ( !isXML ) {
			вернуть elem.getAttribute(имя, name.toLowerCase() === "тип" ? 1 : 2 );
		}
	});
}

// Поддержка: IE<9
// Использовать defaultValue вместо getAttribute("value")
если ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute («значение», «»);
	вернуть el.firstChild.getAttribute («значение») === «»;
} ) ) {
	addHandle («значение», функция (элемент, _name, isXML) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			вернуть элемент.defaultValue;
		}
	});
}

// Поддержка: IE<9
// Использовать getAttributeNode для получения логических значений, когда getAttribute ложно
если ( !assert( функция( el ) {
	вернуть el.getAttribute («отключено») == ноль;
} ) ) {
	addHandle (логические значения, функция (элемент, имя, isXML) {
		вар вал;
		если ( !isXML ) {
			вернуть элемент [имя] === истина? имя.toLowerCase() :
				( val = elem.getAttributeNode( name )) && val.specified ?
					знач.значение :
					нулевой;
		}
	});
}

вернуть Шипение;

} )( окно );



jQuery.find = шипение;
jQuery.expr = Sizzle.selectors;

// Устарело
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	переменная соответствует = [],
		усекать = до тех пор, пока !== не определено;

	в то время как ( ( ​​элемент = элемент [ каталог ] ) && elem.nodeType !== 9 ) {
		если (элемент.nodeType === 1) {
			если ( обрезать && jQuery ( элемент ).is ( до тех пор ) ) {
				перерыв;
			}
			matched.push(элемент);
		}
	}
	возврат совпал;
};


var siblings = function( n, elem ) {
	переменная соответствует = [];

	для ( ; n; n = n.nextSibling ) {
		если ( n.nodeType === 1 && n !== элемент ) {
			соответствует.push(n);
		}
	}

	возврат совпал;
};


var rneedsContext = jQuery.expr.match.needsContext;



имя_узла_функции (элемент, имя) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var rsingleTag = ( /^<([az][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>( ?:<\/\1>|)$/i );



// Реализовать идентичную функциональность для фильтра и не
function winnow(элементы, квалификатор, не) {
	если ( isFunction ( спецификатор ) ) {
		вернуть jQuery.grep (элементы, функция (элемент, я) {
			return !!qualifier.call( elem, i, elem ) !== нет;
		});
	}

	// Один элемент
	если ( квалификатор.nodeType ) {
		вернуть jQuery.grep (элементы, функция (элемент) {
			return ( elem === qualifier ) !== not;
		});
	}

	// Массив элементов (jQuery, аргументы, массив)
	if ( квалификатор typeof !== "string" ) {
		вернуть jQuery.grep (элементы, функция (элемент) {
			return ( indexOf.call( спецификатор, элемент ) > -1 ) !== нет;
		});
	}

	// Фильтруется напрямую как для простых, так и для сложных селекторов
	вернуть jQuery.filter(квалификатор, элементы, а не);
}

jQuery.filter = функция (выражение, элементы, а не) {
	var elem = elems[0];

	если не ) {
		выражение = ":не(" + выражение + ")";
	}

	если ( elems.length === 1 && elem.nodeType === 1 ) {
		вернуть jQuery.find.matchesSelector (элемент, выражение)? [элемент]: [];
	}

	вернуть jQuery.find.matches (выражение, jQuery.grep (элементы, функция (элемент) {
		вернуть elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	найти: функция (селектор) {
		вар я, рет,
			длина = this.length,
			я = это;

		если ( селектор typeof !== "string" ) {
			вернуть this.pushStack (jQuery (селектор). фильтр (функция () {
				для ( я = 0; я < len; я ++ ) {
					если ( jQuery.contains ( я [ i ], это ) ) {
						вернуть истину;
					}
				}
			} ) );
		}

		ret = this.pushStack([]);

		для ( я = 0; я < len; я ++ ) {
			jQuery.find(селектор, self[i], ret);
		}

		вернуть len > 1 ? jQuery.uniqueSort(возврат): возврат;
	},
	фильтр: функция (селектор) {
		return this.pushStack(winnow(this, selector || [], false));
	},
	не: функция (селектор) {
		return this.pushStack(winnow(this, selector || [], true));
	},
	это: функция (селектор) {
		вернуться !!веять(
			этот,

			// Если это позиционный/относительный селектор, проверяем принадлежность к возвращаемому набору
			// поэтому $("p:first").is("p:last") не вернет true для документа с двумя "p".
			селектор typeof === "строка" && rneedsContext.test(селектор)?
				jQuery (селектор):
				селектор || [],
			ЛОЖЬ
		).длина;
	}
});


// Инициализировать объект jQuery


// Центральная ссылка на корень jQuery(document)
вар rootjQuery,

	// Простой способ проверить строки HTML
	// Приоритет #id над <tag>, чтобы избежать XSS через location.hash (trac-9521)
	// Строгое распознавание HTML (trac-11290: должно начинаться с <)
	// Сокращение простого регистра #id для скорости
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = функция (селектор, контекст, корень) {
		вар соответствует, элемент;

		// РУКОВОДСТВО: $(""), $(null), $(undefined), $(false)
		если (! селектор) {
			вернуть это;
		}

		// Метод init() принимает альтернативный rootjQuery
		// так что миграция может поддерживать jQuery.sub (gh-2101)
		корень = корень || кореньjQuery;

		// Обработка строк HTML
		если ( селектор typeof === "string" ) {
			если (селектор[0] === "<" &&
				селектор[ селектор.длина - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Предположим, что строки, начинающиеся и заканчивающиеся на <>, являются HTML, и пропускаем проверку регулярных выражений
				match = [ноль, селектор, ноль];

			} еще {
				match = rquickExpr.exec (селектор);
			}

			// Совпадение с html или убедитесь, что для #id не указан контекст
			если ( совпадение && ( совпадение [ 1 ] || ! контекст )) {

				// ОПИСАНИЕ: $(html) -> $(массив)
				если ( совпадение [ 1 ] ) {
					контекст = контекст экземпляра jQuery? контекст[ 0 ] : контекст;

					// Опция запуска скриптов верна для обратной совместимости
					// Намеренно выдавать ошибку, если parseHTML отсутствует
					jQuery.merge(это, jQuery.parseHTML(
						совпадение [ 1 ],
						контекст && context.nodeType ? context.ownerDocument || контекст: документ,
						истинный
					));

					// ОПИСАНИЕ: $(html, реквизиты)
					if (rsingleTag.test(match[1]) && jQuery.isPlainObject(контекст)) {
						for (соответствие контексту) {

							// Свойства контекста вызываются как методы, если это возможно
							если ( isFunction ( это [ совпадение ] )) {
								это[соответствие](контекст[соответствие]);

							// ...и иначе устанавливаем как атрибуты
							} еще {
								this.attr(соответствие, контекст[соответствие]);
							}
						}
					}

					вернуть это;

				// ОПИСАНИЕ: $(#id)
				} еще {
					elem = document.getElementById(match[2]);

					если (элемент) {

						// Вставляем элемент непосредственно в объект jQuery
						это [ 0 ] = элемент;
						это.длина = 1;
					}
					вернуть это;
				}

			// ОПИСАНИЕ: $(выражение, $(...))
			} иначе если ( !context || context.jquery ) {
				return (контекст || root).find(селектор);

			// ОПИСАНИЕ: $(выражение, контекст)
			// (что эквивалентно: $(context).find(expr)
			} еще {
				вернуть this.constructor(контекст).find(селектор);
			}

		// ОПИСАНИЕ: $(DOMElement)
		} иначе если ( selector.nodeType ) {
			это[ 0 ] = селектор;
			это.длина = 1;
			вернуть это;

		// РУКОВОДСТВО: $(функция)
		// Ярлык для документа готов
		} иначе если (isFunction(селектор)) {
			вернуть root.ready !== undefined ?
				root.ready(селектор):

				// Выполнить немедленно, если готово нет
				селектор (JQuery);
		}

		вернуть jQuery.makeArray(селектор, это);
	};

// Передаем функции инициализации прототип jQuery для последующего создания экземпляра
init.prototype = jQuery.fn;

// Инициализировать центральную ссылку
rootjQuery = jQuery (документ);


var rparentsprev = /^(?:parents|prev(?:Until|Все))/,

	// Методы, которые гарантированно создают уникальный набор при запуске с уникального набора
	гарантированныйУникальный = {
		дети: правда,
		содержание: правда,
		далее: правда,
		предыдущая: правда
	};

jQuery.fn.extend( {
	имеет: функция ( цель ) {
		var target = jQuery(цель, это),
			l = цели.длина;

		вернуть this.filter (функция () {
			переменная я = 0;
			для ( ; я < 1; я ++ ) {
				если ( jQuery.contains ( это, цели [ i ] )) {
					вернуть истину;
				}
			}
		});
	},

	ближайший: функция (селекторы, контекст) {
		вар кур,
			я = 0,
			l = эта длина,
			совпало = [],
			target = тип селекторов !== "строка" && jQuery(селекторы);

		// Позиционные селекторы никогда не совпадают, так как нет контекста _selection_
		если (!rneedsContext.test(селекторы)) {
			для ( ; я < 1; я ++ ) {
				for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

					// Всегда пропускать фрагменты документа
					если (cur.nodeType < 11 && (цели?
						target.index(cur) > -1:

						// Не передавать неэлементы в Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector(cur, selectors) ) ) {

						соответствует.push(курс);
						перерыв;
					}
				}
			}
		}

		вернуть this.pushStack (соответствует. длина > 1? jQuery.uniqueSort (соответствует): соответствует);
	},

	// Определяем положение элемента в наборе
	индекс: функция (элемент) {

		// Нет аргумента, возвращаем индекс в родительском
		если ( !элемент ) {
			вернуть (это [0] && это [0].parentNode)? this.first().prevAll().length : -1;
		}

		// Индекс в селекторе
		если (тип элемента === "строка") {
			вернуть indexOf.call (jQuery (элемент), это [0]);
		}

		// Находим позицию нужного элемента
		вернуть indexOf.call(это,

			// Если он получает объект jQuery, используется первый элемент
			элемент.jquery ? элемент [ 0 ] : элемент
		);
	},

	добавить: функция (селектор, контекст) {
		вернуть это.pushStack(
			jQuery.uniqueSort(
				jQuery.merge(this.get(), jQuery(селектор, контекст))
			)
		);
	},

	addBack: функция (селектор) {
		вернуть this.add (селектор == ноль?
			this.prevObject : this.prevObject.filter(селектор)
		);
	}
});

братская функция (курс, каталог) {
	в то время как ( ( ​​cur = cur [ dir ] ) && cur.nodeType !== 1 ) {}
	вернуть курс;
}

jQuery.каждый( {
	родитель: функция (элемент) {
		var parent = elem.parentNode;
		вернуть родителя && parent.nodeType !== 11 ? родитель: ноль;
	},
	родители: функция (элемент) {
		return dir(elem, "parentNode");
	},
	parentUntil: функция (элемент, _i, пока) {
		вернуть каталог(элемент, "родительский узел", до);
	},
	далее: функция (элемент) {
		вернуть одноуровневый элемент (elem, "nextSibling");
	},
	предыдущая: функция (элемент) {
		вернуть родного брата (элемент, "предыдущий брат");
	},
	nextAll: функция (элемент) {
		return dir(elem, "nextSibling");
	},
	prevAll: функция (элемент) {
		return dir(elem, "previousSibling");
	},
	nextUntil: функция (элемент, _i, пока) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: функция (элемент, _i, пока) {
		return dir( elem, "previousSibling", until );
	},
	братья и сестры: функция (элемент) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	дети: функция (элемент) {
		вернуть братьев и сестер ( elem.firstChild );
	},
	содержимое: функция (элемент) {
		если ( elem.contentDocument != null &&

			// Поддержка: IE 11+
			// Элементы <object> без атрибута `data` имеют объект
			// `contentDocument` с нулевым прототипом.
			getProto(элемент.contentDocument) ) {

			вернуть элемент.contentDocument;
		}

		// Поддержка: только IE 9–11, только iOS 7, только браузер Android <= 4.3
		// Рассматривать элемент шаблона как обычный в браузерах, которые
		// не поддерживать.
		если (имя_узла(элемент, "шаблон")) {
			элемент = элемент.содержимое || элемент;
		}

		вернуть jQuery.merge([], elem.childNodes);
	}
}, функция(имя, фн) {
	jQuery.fn[имя] = функция(пока, селектор) {
		var matched = jQuery.map(this, fn, until);

		если ( name.slice(-5 ) !== "До" ) {
			селектор = пока;
		}

		если (селектор && тип селектора === "строка") {
			соответствует = jQuery.filter (селектор, соответствует);
		}

		если (эта длина > 1) {

			// Удалить дубликаты
			если (! гарантированноуникальный [имя]) {
				jQuery.uniqueSort(совпало);
			}

			// Обратный порядок для родителей* и предшествующих производных
			если ( rparentsprev.test ( имя ) ) {
				соответствует.обратный();
			}
		}

		вернуть this.pushStack (совпало);
	};
});
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Преобразование параметров в формате String в параметры в формате Object
функция createOptions (параметры) {
	переменный объект = {};
	jQuery.each(options.match(rnothtmlwhite) || [], function(_, flag) {
		объект [флаг] = истина;
	});
	возвращаемый объект;
}

/*
 * Создайте список обратного вызова, используя следующие параметры:
 *
 * options: необязательный список разделенных пробелом опций, которые изменят способ
 * ведет себя список обратного вызова или более традиционный объект опции
 *
 * По умолчанию список обратного вызова действует как список обратного вызова события и может быть
 * "выстрелил" несколько раз.
 *
 * Возможные варианты:
 *
 * Once: гарантирует, что список обратного вызова может быть запущен только один раз (например, Deferred)
 *
 * память: будет отслеживать предыдущие значения и вызывать любой добавленный обратный вызов
 * после того, как список был обстрелян сразу с последним "заученным"
 * значения (например, отложенные)
 *
 * уникальный: гарантирует, что обратный вызов может быть добавлен только один раз (без дубликатов в списке)
 *
 * stopOnFalse: прерывание вызовов, когда обратный вызов возвращает false
 *
 */
jQuery.Callbacks = функция (параметры) {

	// Преобразование параметров из строкового формата в объектный формат, если это необходимо
	// (сначала проверяем кэш)
	options = typeof options === "string" ?
		createOptions(параметры):
		jQuery.extend({}, параметры);

	var // Флаг, чтобы узнать, активируется ли список в данный момент
		стрельба,

		// Значение последнего срабатывания для незабываемых списков
		Память,

		// Флаг, чтобы узнать, был ли список уже запущен
		уволенный,

		// Флаг для предотвращения срабатывания
		заперт,

		// Актуальный список обратного вызова
		список = [],

		// Очередь выполнения данных для повторяющихся списков
		очередь = [],

		// Индекс вызываемого в данный момент обратного вызова (изменяется добавлением/удалением по мере необходимости)
		Индекс обжига = -1,

		// Активация обратных вызовов
		огонь = функция () {

			// Задействовать одиночную стрельбу
			заблокировано = заблокировано || варианты.один раз;

			// Выполнение обратных вызовов для всех ожидающих выполнения,
			// с учетом переопределений fireIndex и изменений во время выполнения
			уволен = выстрел = правда;
			for ( ; очередь.длина; fireIndex = -1 ) {
				память = очередь.shift();
				в то время как (++FiringIndex < list.length) {

					// Запускаем обратный вызов и проверяем досрочное завершение
					если (список[index_обжига].apply(memory[0], memory[1]) === false &&
						options.stopOnFalse ) {

						// Перейти в конец и забыть данные, чтобы .add не сработал повторно
						fireIndex = список.длина;
						память = ложь;
					}
				}
			}

			// Забудем данные, если мы закончили с ними
			если ( !options.memory ) {
				память = ложь;
			}

			стрельба = ложь;

			// Очистить, если мы закончили стрелять навсегда
			если (заблокировано) {

				// Оставляем пустой список, если у нас есть данные для будущих вызовов add
				если ( память ) {
					список = [];

				// В противном случае этот объект тратится
				} еще {
					список = "";
				}
			}
		},

		// Фактический объект обратных вызовов
		я = {

			// Добавляем callback или набор callbackов в список
			добавить: функция () {
				если ( список ) {

					// Если у нас есть память из прошлого запуска, мы должны активировать после добавления
					если ( память && ! стрельба ) {
						fireIndex = список.длина - 1;
						очередь.push(память);
					}

					(функция добавить (аргументы) {
						jQuery.each (аргументы, функция (_, аргумент) {
							если ( isFunction ( аргумент ) ) {
								если ( !options.unique || !self.has( arg )) {
									список.push(аргумент);
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Проверяем рекурсивно
								добавить (аргумент);
							}
						});
					} )(аргументы);

					если ( память && ! стрельба ) {
						огонь();
					}
				}
				вернуть это;
			},

			// Удаляем callback из списка
			удалить: функция () {
				jQuery.each (аргументы, функция (_, аргумент) {
					переменный индекс;
					в то время как ((индекс = jQuery.inArray(аргумент, список, индекс)) > -1) {
						list.splice(индекс, 1);

						// Обработка индексов срабатывания
						если ( индекс <= индекс стрельбы ) {
							Индекс стрельбы--;
						}
					}
				});
				вернуть это;
			},

			// Проверяем, есть ли заданный обратный вызов в списке.
			// Если аргумент не указан, вернуть, есть ли в списке обратные вызовы.
			имеет: функция ( fn ) {
				вернуть фн?
					jQuery.inArray(fn, список) > -1:
					длина списка > 0;
			},

			// Удаляем все обратные вызовы из списка
			пусто: функция () {
				если ( список ) {
					список = [];
				}
				вернуть это;
			},

			// Отключаем .fire и .add
			// Прервать любые текущие/ожидающие выполнения
			// Очистить все обратные вызовы и значения
			отключить: функция () {
				заблокировано = очередь = [];
				список = память = "";
				вернуть это;
			},
			отключено: функция () {
				вернуть !список;
			},

			// Отключить .fire
			// Также отключите .add, если у нас нет памяти (поскольку это не будет иметь никакого эффекта)
			// Прервать все ожидающие выполнения
			замок: функция () {
				заблокировано = очередь = [];
				если ( !память && !обстрел ) {
					список = память = "";
				}
				вернуть это;
			},
			заблокировано: функция () {
				возврат !!заблокирован;
			},

			// Вызов всех обратных вызовов с заданным контекстом и аргументами
			fireWith: функция (контекст, аргументы) {
				если (! заблокировано) {
					аргументы = аргументы || [];
					args = [ контекст, args.slice ? args.slice() : аргументы];
					очередь.push(аргументы);
					если ( ! стрельба ) {
						огонь();
					}
				}
				вернуть это;
			},

			// Вызов всех обратных вызовов с заданными аргументами
			огонь: функция () {
				self.fireWith(это, аргументы);
				вернуть это;
			},

			// Чтобы узнать, вызывались ли обратные вызовы хотя бы один раз
			уволен: функция () {
				возврат !!уволен;
			}
		};

	вернуть себя;
};


функция Identity( v ) {
	вернуть v;
}
функция Thrower( ex ) {
	бросить экс;
}

функция acceptValue (значение, разрешение, отклонение, noValue) {
	метод вар;

	пытаться {

		// Сначала проверяем аспект обещания, чтобы привилегировать синхронное поведение
		если (значение && isFunction((метод = value.promise)) ) {
			method.call(значение).done(разрешить).fail(отклонить);

		// Другие возможности
		} else if (значение && isFunction( ( method = value.then )) ) {
			method.call(значение, разрешение, отклонение);

		// Другие не-thenables
		} еще {

			// Управляйте аргументами `resolve`, позволяя Array#slice преобразовывать логическое значение `noValue` в целое число:
			// * false: [значение].slice(0) => разрешить(значение)
			// * true: [ значение ].slice( 1 ) => разрешить()
			resolve.apply(не определено, [значение].slice(noValue));
		}

	// Для Promises/A+ преобразовать исключения в отказы
	// Так как jQuery.when не разворачивает затемables, мы можем пропустить дополнительные проверки, появляющиеся в
	// Отложено#тогда для условного подавления отказа.
	} поймать ( значение ) {

		// Поддержка: только Android 4.0
		// Функции строгого режима, вызываемые без .call/.apply, получают глобальный контекст объекта
		reject.apply(не определено, [значение]);
	}
}

jQuery.extend( {

	Отложено: функция (функция) {
		переменные кортежи = [

				// действие, добавление слушателя, обратные вызовы,
				// ... .then обработчики, индекс аргумента, [конечное состояние]
				[ "уведомить", "прогресс", jQuery.Callbacks ("память" ),
					jQuery.Callbacks("память"), 2],
				["разрешить", "сделано", jQuery.Callbacks("один раз памяти"),
					jQuery.Callbacks («один раз память»), 0, «разрешено»],
				["отклонить", "сбой", jQuery.Callbacks("один раз памяти"),
					jQuery.Callbacks («один раз памяти»), 1, «отклонено»]
			],
			состояние = "ожидание",
			обещание = {
				состояние: функция () {
					возвращаемое состояние;
				},
				всегда: функция () {
					deferred.done(аргументы).сбой(аргументы);
					вернуть это;
				},
				«поймать»: функция (fn) {
					вернуть обещание.затем(ноль, fn);
				},

				// Сохраняем канал для обратной совместимости
				канал: function( /* fnDone, fnFail, fnProgress */) {
					var fns = аргументы;

					вернуть jQuery.Deferred (функция (newDefer) {
						jQuery.each (кортежи, функция (_i, кортеж) {

							// Сопоставить кортежи (прогресс, выполнено, сбой) с аргументами (сделано, сбой, прогресс)
							var fn = isFunction(fns[кортеж[4]]]) && fns[кортеж[4]];

							// deferred.progress(function() { привязка к newDefer или newDefer.notify })
							// deferred.done(function() { привязка к newDefer или newDefer.resolve })
							// deferred.fail(function() { привязка к newDefer или newDefer.reject })
							отложенный [ кортеж [ 1 ] ] ( функция () {
								var возвращено = fn && fn.apply(это, аргументы);
								если (возвращено && isFunction (возвращено.обещание)) {
									возвращено.обещание()
										.progress (новыйDefer.notify)
										.done (новыйDefer.resolve)
										.fail(новыйDefer.reject);
								} еще {
									newDefer[кортеж[0] + "С"](
										этот,
										фн ? [возвращено]: аргументы
									);
								}
							});
						});
						фнс = ноль;
					} ).обещать();
				},
				затем: функция (onFulfilled, onRejected, onProgress) {
					вар максглубина = 0;
					функция разрешения (глубина, отложенная, обработчик, специальная) {
						функция возврата () {
							вар то = это,
								аргументы = аргументы,
								mayThrow = функция () {
									Затем вернулся вар;

									// Поддержка: Promises/A+ раздел 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Игнорировать попытки двойного разрешения
									если (глубина < maxDepth ) {
										возвращаться;
									}

									возвращено = handler.apply(это, аргументы);

									// Поддержка: Promises/A+ раздел 2.3.1
									// https://promisesaplus.com/#point-48
									если ( возвращено === deferred.promise() ) {
										throw new TypeError("Тогда возможно саморазрешение");
									}

									// Поддержка: Promises/A+ разделы 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Получить `then` только один раз
									затем = возвращено &&

										// Поддержка: Promises/A+ раздел 2.3.4
										// https://promisesaplus.com/#point-64
										// Проверяем только объекты и функции на пригодность
										( возвращенный typeof === "объект" ||
											возвращаемый тип === "функция" ) &&
										вернулся.потом;

									// Обработка возвращаемого объекта thenable
									если (isFunction(тогда)) {

										// Спецпроцессоры (notify) просто ждут разрешения
										если (специальный) {
											тогда.позвоните(
												вернулся,
												разрешить (maxDepth, отложенный, Identity, специальный),
												разрешить (maxDepth, отложенный, Thrower, специальный)
											);

										// Обычные процессоры (разрешение) также подключаются к прогрессу
										} еще {

											// ...и игнорировать старые значения разрешения
											максимальная глубина++;

											тогда.позвоните(
												вернулся,
												разрешить (maxDepth, отложенный, Identity, специальный),
												разрешить (maxDepth, отложенный, Thrower, специальный),
												разрешить (maxDepth, отложенный, идентификатор,
													deferred.notifyWith )
											);
										}

									// Обработка всех остальных возвращаемых значений
									} еще {

										// Только заменяющие обработчики передают контекст
										// и несколько значений (неспецифицированное поведение)
										если ( обработчик !== Личность ) {
											это = не определено;
											аргументы = [возвращено];
										}

										// Обработать значение(я)
										// Процесс по умолчанию — разрешение
										( специальный || deferred.resolveWith )( тот, args );
									}
								},

								// Только нормальные процессоры (разрешают) перехватывают и отклоняют исключения
								процесс = особый?
									мог бы бросить :
									функция () {
										пытаться {
											мог бы бросить();
										} поймать ( е ) {

											если (jQuery.Deferred.exceptionHook) {
												jQuery.Deferred.exceptionHook(e,
													процесс.stackTrace );
											}

											// Поддержка: Promises/A+ раздел 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Игнорировать исключения после разрешения
											если (глубина + 1 >= maxDepth) {

												// Только заменяющие обработчики передают контекст
												// и несколько значений (неспецифицированное поведение)
												если ( обработчик !== Метатель ) {
													это = не определено;
													аргументы = [е];
												}

												deferred.rejectWith(это, аргументы);
											}
										}
									};

							// Поддержка: Promises/A+ раздел 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Немедленно перерешать обещания, чтобы избежать ложного отказа от
							// последующие ошибки
							если (глубина) {
								процесс();
							} еще {

								// Вызываем необязательный хук для записи стека в случае исключения
								// так как в противном случае он теряется, когда выполнение становится асинхронным
								если (jQuery.Deferred.getStackHook) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout(процесс);
							}
						};
					}

					вернуть jQuery.Deferred (функция (newDefer) {

						// progress_handlers.add( ... )
						кортежи [0] [3]. добавить (
							решать(
								0,
								новыйОтложить,
								функция (в прогрессе)?
									в процессе :
									Личность,
								новыйDefer.notifyWith
							)
						);

						// выполнено_handlers.add( ... )
						кортежи [ 1 ][ 3 ] .добавить(
							решать(
								0,
								новыйОтложить,
								функция (при выполнении)?
									onFulfilled :
									Личность
							)
						);

						// reject_handlers.add( ... )
						кортежи [ 2 ][ 3 ] .добавить(
							решать(
								0,
								новыйОтложить,
								isFunction(onRejected)?
									onRejected :
									Метатель
							)
						);
					} ).обещать();
				},

				// Получить промис для этого отложенного
				// Если указан obj, к объекту добавляется обещание
				обещание: функция (объект) {
					вернуть объект != null ? jQuery.extend(объект, обещание): обещание;
				}
			},
			отложено = {};

		// Добавляем методы, специфичные для списка
		jQuery.each (кортежи, функция (я, кортеж) {
			список переменных = кортеж [ 2 ],
				stateString = кортеж [5];

			// обещание.прогресс = список.добавить
			// обещание.выполнено = список.добавить
			// обещание.ошибка = список.добавить
			обещание [кортеж [1]] = list.add;

			// Состояние обработки
			если (строка состояния) {
				список.добавить(
					функция () {

						// состояние = "решено" (т.е. выполнено)
						// состояние = "отклонено"
						состояние = строка состояния;
					},

					// reject_callbacks.disable
					// выполненные_обратные вызовы.отключить
					кортежи [ 3 - i ][ 2 ].disable,

					// reject_handlers.disable
					// выполнено_handlers.disable
					кортежи [ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					кортежи [ 0 ][ 2 ].lock,

					// progress_handlers.lock
					кортежи [ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// выполнено_handlers.fire
			// reject_handlers.fire
			list.add(кортеж[3].fire);

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			отложенный [ кортеж [ 0 ] ] = функция () {
				отложенный [ кортеж [ 0 ] + "С" ] ( это === отложено ? undefined : это, аргументы );
				вернуть это;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			отложенный [кортеж [0] + "С"] = list.fireWith;
		});

		// Сделать deferred обещанием
		обещание.обещание(отложено);

		// Вызов заданной функции, если она есть
		если ( функция ) {
			func.call(отложено, отложено);
		}

		// Все сделано!
		возврат отложен;
	},

	// Отложенный помощник
	когда: функция (одиночное значение) {
		вар

			// количество невыполненных подчиненных
			остальное = аргументы.длина,

			// количество необработанных аргументов
			я = оставшийся,

			// подчиненные данные об исполнении
			разрешитьконтексты = массив ( я ),
			resolveValues ​​= slice.call (аргументы),

			// первичный отложенный
			первичный = jQuery.Deferred(),

			// подчиненная фабрика обратного вызова
			updateFunc = функция ( я ) {
				функция возврата (значение) {
					resolveContexts[i] = это;
					resolveValues[i] = arguments.length > 1? slice.call(аргументы): значение;
					если ( !( --remaining )) {
						primary.resolveWith(resolveContexts, resolveValues);
					}
				};
			};

		// Одиночные и пустые аргументы принимаются как Promise.resolve
		если (осталось <= 1) {
			acceptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!оставшийся );

			// Используйте .then(), чтобы развернуть вторичные элементы thenables (см. gh-3000)
			если (primary.state() === "ожидание" ||
				isFunction(resolveValues[i] && resolveValues[i].then)) {

				вернуть первичный.затем();
			}
		}

		// Несколько аргументов агрегируются подобно элементам массива Promise.all
		в то время как я-- ) {
			acceptValue(resolveValues[i], updateFunc(i), primary.reject);
		}

		вернуть первичный.обещание();
	}
});


// Обычно это указывает на ошибку программиста при разработке,
// предупреждать о них как можно скорее, а не проглатывать их по умолчанию.
var rerrorNames = /^(Eval|Внутренний|Диапазон|Ссылка|Синтаксис|Тип|URI)Error$/;

jQuery.Deferred.exceptionHook = функция (ошибка, стек) {

	// Поддержка: только IE 8–9
	// Консоль существует, когда открыты инструменты разработчика, что может произойти в любой момент
	если ( window.console && window.console.warn && error && rerrorNames.test( error.name )) {
		window.console.warn("Исключение jQuery.Deferred: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = функция (ошибка) {
	window.setTimeout (функция () {
		выбросить ошибку;
	});
};




// Отложенное использование в DOM готово
var readyList = jQuery.Deferred();

jQuery.fn.ready = функция (fn) {

	готовый список
		.тог( фн )

		// Обернуть jQuery.readyException в функцию, чтобы поиск
		// происходит во время обработки ошибок вместо обратного вызова
		// Регистрация.
		.catch(функция(ошибка) {
			jQuery.readyException(ошибка);
		});

	вернуть это;
};

jQuery.extend( {

	// Готов ли DOM к использованию? Установите значение true, как только это произойдет.
	isReady: ложь,

	// Счетчик, чтобы отслеживать, сколько элементов ждать до
	// срабатывает событие готовности. См. трассировку-6781
	готовПодождите: 1,

	// Обработка, когда DOM готов
	готово: функция (подождите) {

		// Прервать, если есть ожидающие удержания или мы уже готовы
		если ( ждать === истина ? --jQuery.readyWait : jQuery.isReady ) {
			возвращаться;
		}

		// Помните, что DOM готов
		jQuery.isReady = истина;

		// Если сработало обычное событие DOM Ready, уменьшить его и подождать, если это необходимо
		если ( подождите !== true && --jQuery.readyWait > 0 ) {
			возвращаться;
		}

		// Если есть связанные функции, выполнить
		readyList.resolveWith(документ, [jQuery]);
	}
});

jQuery.ready.then = readyList.then;

// Готовый обработчик события и метод самоочистки
функция завершена () {
	document.removeEventListener("DOMContentLoaded", завершено);
	window.removeEventListener ("загрузить", завершено);
	jQuery.ready();
}

// Отлавливаем случаи, когда вызывается $(document).ready()
// после того, как событие браузера уже произошло.
// Поддержка: только IE <=9–10
// Старый IE иногда сигнализирует "интерактивный" слишком рано
если (document.readyState === "complete" ||
	( document.readyState !== "загрузка" && !document.documentElement.doScroll )) {

	// Обработайте это асинхронно, чтобы позволить сценариям отложить готовность
	window.setTimeout(jQuery.ready);

} еще {

	// Используйте удобный обратный вызов события
	document.addEventListener("DOMContentLoaded", завершено);

	// Откат к window.onload, который будет работать всегда
	window.addEventListener («загрузить», завершено);
}




// Многофункциональный метод для получения и установки значений коллекции
// Значение/значения могут быть дополнительно выполнены, если это функция
var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
	переменная я = 0,
		len = элементы.длина,
		объем = ключ == ноль;

	// Устанавливает много значений
	если ( toType ( ключ ) === "объект" ) {
		цепной = правда;
		для ( я в ключе ) {
			доступ(элементы, fn, i, ключ [i], true, emptyGet, raw);
		}

	// Устанавливает одно значение
	} иначе если ( значение !== не определено ) {
		цепной = правда;

		если (!isFunction(значение)) {
			сырье = правда;
		}

		если (навалом) {

			// Массовые операции выполняются со всем набором
			если ( необработанный ) {
				fn.call(элементы, значение);
				фн = ноль;

			// ...кроме случаев выполнения значений функций
			} еще {
				объем = фн;
				fn = функция (элемент, _ключ, значение) {
					return bulk.call(jQuery(элемент), значение);
				};
			}
		}

		если ( фн ) {
			for ( ; я < len; я ++ ) {
				фн(
					elems[i], ключ, необработанный?
						ценить :
						value.call (элементы [i], i, fn (элементы [i], ключ))
				);
			}
		}
	}

	если ( цепочка ) {
		возвратные элементы;
	}

	// Получает
	если (навалом) {
		вернуть fn.call(элементы);
	}

	вернуть Лен? fn(элементы[0], ключ): emptyGet;
};


// Соответствует пунктирной строке для верблюда
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([az])/g;

// Используется camelCase как обратный вызов для replace()
функция fcamelCase(_all, буква) {
	вернуть письмо.toUpperCase();
}

// Преобразование тире в camelCase; используется css и модулями данных
// Поддержка: IE <=9–11, Edge 12–15
// Microsoft забыла изменить свой префикс поставщика (trac-9572)
функция camelCase(строка) {
	return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
}
var acceptData = функция (владелец) {

	// Принимает только:
	// - узел
	// - Узел.ELEMENT_NODE
	// - Узел.DOCUMENT_NODE
	// - Объект
	// - Любой
	вернуть owner.nodeType === 1 || owner.nodeType === 9 || !( +владелец.nodeType );
};




функция Данные () {
	this.expando = jQuery.expando + Data.uid++;
}

Данные.uid = 1;

Данные.прототип = {

	кеш: функция (владелец) {

		// Проверяем, есть ли уже кеш у объекта-владельца
		var value = владелец[ this.expando ];

		// Если нет, создадим
		если ( !значение ) {
			значение = {};

			// Мы можем принимать данные для неэлементных узлов в современных браузерах,
			// но мы не должны, см. trac-8335.
			// Всегда возвращайте пустой объект.
			если ( acceptData ( владелец ) ) {

				// Если это узел, маловероятно, что он будет преобразован в строку или зациклен
				// используем простое присваивание
				если (владелец.nodeType) {
					владелец[ this.expando ] = значение;

				// В противном случае закрепите его в неперечислимом свойстве
				// configurable должно быть true, чтобы свойство было
				// удаляется при удалении данных
				} еще {
					Object.defineProperty(владелец, this.expando, {
						значение: значение,
						настраиваемый: правда
					});
				}
			}
		}

		возвращаемое значение;
	},
	установить: функция (владелец, данные, значение) {
		вар реквизит,
			кеш = this.cache (владелец);

		// Обработать: [владелец, ключ, значение] аргументы
		// Всегда используйте ключ camelCase (gh-2257)
		если (тип данных === "строка") {
			cache[camelCase(данные)] = значение;

		// Обработка: [владелец, { свойства } ] аргументы
		} еще {

			// Копируем свойства одно за другим в объект кеша
			для (опора в данных) {
				cache[camelCase(prop)] = data[prop];
			}
		}
		кэш возврата;
	},
	получить: функция (владелец, ключ) {
		ключ возврата === не определен?
			this.cache(владелец):

			// Всегда используйте ключ camelCase (gh-2257)
			владелец [ this.expando ] && владелец [ this.expando ][ camelCase ( ключ ) ];
	},
	доступ: функция (владелец, ключ, значение) {

		// В случаях, когда либо:
		//
		// 1. Ключ не указан
		// 2. Был указан строковый ключ, но не предоставлено значение
		//
		// Берем путь «чтения» и позволяем методу get определить
		// какое значение вернуть, соответственно либо:
		//
		// 1. Весь объект кеша
		// 2. Данные, хранящиеся в ключе
		//
		если (ключ === не определено ||
				( ( ключ && тип ключа === "строка" ) && значение === не определено )) {

			вернуть this.get(владелец, ключ);
		}

		// Когда ключ не является строкой или является и ключом, и значением
		// указываются, устанавливаются или расширяются (существующие объекты) одним из следующих способов:
		//
		// 1. Объект свойств
		// 2. Ключ и значение
		//
		this.set(владелец, ключ, значение);

		// Так как путь "set" может иметь две возможные точки входа
		// возвращаем ожидаемые данные в зависимости от того, какой путь был выбран[*]
		возвращаемое значение !== не определено? значение: ключ;
	},
	удалить: функция (владелец, ключ) {
		вар я,
			кеш = владелец[ this.expando ];

		если ( кеш === не определено ) {
			возвращаться;
		}

		если ( ключ !== не определено ) {

			// Поддержка массива или строки ключей, разделенных пробелами
			если ( Array.isArray ( ключ ) ) {

				// Если ключ представляет собой массив ключей...
				// Мы всегда устанавливаем ключи camelCase, поэтому удалите их.
				ключ = key.map(camelCase);
			} еще {
				ключ = camelCase(ключ);

				// Если ключ с пробелами существует, используйте его.
				// В противном случае создайте массив, сопоставив непробельные символы
				ключ = ключ в кеше?
					[ ключ ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			я = длина ключа;

			в то время как я-- ) {
				удалить кеш [ ключ [ i ] ];
			}
		}

		// Удаляем расширение, если больше нет данных
		если (ключ === не определено || jQuery.isEmptyObject(кеш)) {

			// Поддержка: Chrome <=35–45
			// Производительность Webkit и Blink снижается при удалении свойств
			// из узлов DOM, поэтому вместо этого установите значение undefined
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (ошибка ограничена)
			если (владелец.nodeType) {
				владелец[ this.expando ] = не определено;
			} еще {
				удалить владельца[ this.expando ];
			}
		}
	},
	hasData: функция (владелец) {
		var cache = владелец [this.expando];
		вернуть кеш !== undefined && !jQuery.isEmptyObject(кэш);
	}
};
var dataPriv = новые данные();

var dataUser = новые данные();



// Резюме реализации
//
// 1. Обеспечить поверхностную и семантическую совместимость API с веткой 1.9.x
// 2. Улучшить ремонтопригодность модуля, уменьшив объем хранилища
// пути к одному механизму.
// 3. Используйте один и тот же единый механизм для поддержки «частных» и «пользовательских» данных.
// 4. _Никогда_ не раскрывайте "приватные" данные пользовательскому коду (TODO: Drop _data, _removeData)
// 5. Избегайте раскрытия деталей реализации пользовательских объектов (например, свойств Expando)
// 6. Обеспечьте четкий путь для обновления реализации до WeakMap в 2014 г.

var rbrace = /^(?:\{[\w\W]*\}|\[[[\w\W]*\])$/,
	rmultiDash = /[AZ]/g;

функция getData(данные) {
	если (данные === "истина") {
		вернуть истину;
	}

	если (данные === "ложь") {
		вернуть ложь;
	}

	если ( данные === "ноль" ) {
		вернуть ноль;
	}

	// Преобразование в число только в том случае, если оно не изменяет строку
	если ( данные === + данные + "" ) {
		вернуть +данные;
	}

	если ( rbrace.test ( данные )) {
		вернуть JSON.parse(данные);
	}

	возвращаемые данные;
}

функция dataAttr (элемент, ключ, данные) {
	имя вар;

	// Если внутри ничего не найдено, пытаемся получить любой
	// данные из HTML5 data-* атрибута
	если ( данные === не определены && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		данные = элемент.getAttribute(имя);

		если (тип данных === "строка") {
			пытаться {
				данные = получить данные (данные);
			} поймать ( д ) {}

			// Убедитесь, что мы установили данные, чтобы они не изменились позже
			dataUser.set(элемент, ключ, данные);
		} еще {
			данные = не определены;
		}
	}
	возвращаемые данные;
}

jQuery.extend( {
	hasData: функция (элемент) {
		вернуть dataUser.hasData(элемент) || dataPriv.hasData(элемент);
	},

	данные: функция (элемент, имя, данные) {
		вернуть dataUser.access(элемент, имя, данные);
	},

	removeData: функция (элемент, имя) {
		dataUser.remove(элемент, имя);
	},

	// TODO: Теперь, когда все вызовы _data и _removeData заменены
	// при прямом вызове методов dataPriv они могут быть объявлены устаревшими.
	_data: функция (элемент, имя, данные) {
		вернуть dataPriv.access(элемент, имя, данные);
	},

	_removeData: функция (элемент, имя) {
		dataPriv.remove(элемент, имя);
	}
});

jQuery.fn.extend( {
	данные: функция (ключ, значение) {
		вар я, имя, данные,
			элемент = это[0],
			attrs = элемент && elem.attributes;

		// Получает все значения
		если ( ключ === не определено ) {
			если (эта длина) {
				данные = dataUser.get (элемент);

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" )) {
					я = attrs.length;
					в то время как я-- ) {

						// Поддержка: только IE 11
						// Элементы attrs могут быть нулевыми (trac-14894)
						если ( атрибуты [ я ] ) {
							имя = attrs[ я ].имя;
							если ( name.indexOf ("данные-" ) === 0 ) {
								имя = camelCase(имя.срез(5));
								dataAttr(элемент, имя, данные[имя]);
							}
						}
					}
					dataPriv.set(elem, "hasDataAttrs", true);
				}
			}

			возвращаемые данные;
		}

		// Устанавливает несколько значений
		если ( тип ключа === "объект" ) {
			вернуть this.each (функция () {
				dataUser.set(это, ключ);
			});
		}

		вернуть доступ (это, функция (значение) {
			переменные данные;

			// Вызывающий объект jQuery (соответствие элементов) не пустой
			// (и, следовательно, элемент появляется в this[ 0 ]) и
			// Параметр `value` не был неопределенным. Пустой объект jQuery
			// приведет к `undefined` для elem = this[ 0 ], что
			// генерировать исключение, если сделана попытка чтения кэша данных.
			если (элемент && значение === не определено) {

				// Попытка получить данные из кеша
				// Ключ всегда будет в верблюжьем регистре в Data
				данные = dataUser.get (элемент, ключ);
				если ( данные !== не определены ) {
					возвращаемые данные;
				}

				// Попытка "обнаружить" данные в
				// Пользовательские данные HTML5-* attrs
				данные = dataAttr (элемент, ключ);
				если ( данные !== не определены ) {
					возвращаемые данные;
				}

				// Мы очень старались, но данных не существует.
				возвращаться;
			}

			// Установить данные...
			this.each (функция () {

				// Мы всегда сохраняем ключ в стиле camelCased
				dataUser.set(это, ключ, значение);
			});
		}, null, значение, arguments.length > 1, null, true );
	},

	removeData: функция (ключ) {
		вернуть this.each (функция () {
			dataUser.remove(это, ключ);
		});
	}
});


jQuery.extend( {
	очередь: функция (элемент, тип, данные) {
		переменная очередь;

		если (элемент) {
			тип = ( тип || "fx" ) + "очередь";
			очередь = dataPriv.get (элемент, тип);

			// Ускоряем удаление из очереди, быстро выходя из очереди, если это просто поиск
			если (данные) {
				если (! очередь || Array.isArray(данные)) {
					очередь = dataPriv.access (элемент, тип, jQuery.makeArray (данные));
				} еще {
					очередь.push(данные);
				}
			}
			возвратная очередь || [];
		}
	},

	удалить из очереди: функция (элемент, тип) {
		тип = тип || "Фекс";

		var очередь = jQuery.queue (элемент, тип),
			startLength = очередь.длина,
			fn = очередь.shift(),
			крючки = jQuery._queueHooks(элемент, тип),
			следующий = функция () {
				jQuery.dequeue(элемент, тип);
			};

		// Если очередь fx удалена из очереди, всегда удаляйте индикатор выполнения
		если ( fn === "в процессе" ) {
			fn = очередь.shift();
			начальная длина--;
		}

		если ( фн ) {

			// Добавляем индикатор прогресса, чтобы предотвратить загрузку очереди fx
			// автоматически исключен из очереди
			если (тип === "fx") {
				очередь.unshift ("в процессе");
			}

			// Очистить последнюю функцию остановки очереди
			удалить хуки.стоп;
			fn.call(элемент, далее, хуки);
		}

		если ( !startLength && крючки ) {
			крючки.пусто.огонь();
		}
	},

	// Не общедоступный — сгенерировать объект queueHooks или вернуть текущий
	_queueHooks: функция (элемент, тип) {
		var key = тип + "queueHooks";
		вернуть dataPriv.get(элемент, ключ) || dataPriv.access(элемент, ключ, {
			пусто: jQuery.Callbacks("один раз в памяти").добавить(функция() {
				dataPriv.remove(элемент, [тип + "очередь", ключ]);
			} )
		});
	}
});

jQuery.fn.extend( {
	очередь: функция (тип, данные) {
		переменная сеттер = 2;

		если ( тип типа !== "строка" ) {
			данные = тип;
			тип = "фх";
			сеттер--;
		}

		если ( arguments.length < сеттер ) {
			вернуть jQuery.queue (этот [0], тип);
		}

		возвращаемые данные === не определены?
			этот :
			this.each (функция () {
				var queue = jQuery.queue(это, тип, данные);

				// Гарантируем хуки для этой очереди
				jQuery._queueHooks(это, тип);

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue(это, тип);
				}
			});
	},
	исключить из очереди: функция (тип) {
		вернуть this.each (функция () {
			jQuery.dequeue(это, тип);
		});
	},
	clearQueue: функция (тип) {
		вернуть this.queue (тип || "fx", []);
	},

	// Получить обещание, разрешенное, когда очереди определенного типа
	// очищаются (по умолчанию используется тип fx)
	обещание: функция (тип, объект) {
		переменная температура,
			количество = 1,
			отложить = jQuery.Deferred(),
			элементы = это,
			я = это.длина,
			разрешение = функция () {
				если ( !( --count )) {
					defer.resolveWith (элементы, [элементы]);
				}
			};

		если ( тип типа !== "строка" ) {
			объект = тип;
			тип = не определено;
		}
		тип = тип || "Фекс";

		в то время как я-- ) {
			tmp = dataPriv.get(элементы[i], тип + "queueHooks");
			если (tmp && tmp.пусто) {
				количество++;
				tmp.empty.add (разрешить);
			}
		}
		решать();
		возврат отложить. обещание (объект);
	}
});
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([az%]*)$", "i" );


var cssExpand = ["Сверху", "Справа", "Снизу", "Слева"];

var documentElement = документ.documentElement;



	var isAttached = функция (элемент) {
			вернуть jQuery.contains(elem.ownerDocument, elem);
		},
		составлено = {составлено: правда};

	// Поддержка: IE 9–11+, Edge 12–18+, только iOS 10.0–10.2
	// По возможности проверяем вложение через границы теневого DOM (gh-3504)
	// Поддержка: только iOS 10.0-10.2
	// Ранние версии iOS 10 поддерживают `attachShadow`, но не `getRootNode`,
	// приводит к ошибкам. Нам нужно проверить `getRootNode`.
	если (documentElement.getRootNode) {
		isAttached = функция (элемент) {
			вернуть jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode(составлено) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = функция (элемент, элемент) {

		// isHiddenWithinTree может быть вызван из jQuery#filter function;
		// в этом случае element будет вторым аргументом
		элемент = эль || элемент;

		// Встроенный стиль превыше всего
		вернуть elem.style.display === "нет" ||
			elem.style.display === "" &&

			// В противном случае проверяем вычисляемый стиль
			// Поддержка: Firefox <=43 - 45
			// Для несвязанных элементов может быть вычислено display: none, поэтому сначала подтвердите, что элемент
			// в документе.
			прикреплен(элемент) &&

			jQuery.css(элемент, "отображение") === "нет";
	};



function AdjustCSS (элемент, опора, valueParts, tween) {
	переменная скорректирована, масштаб,
		максимальное число итераций = 20,
		текущее значение = твин ?
			функция () {
				вернуть tween.cur();
			} :
			функция () {
				вернуть jQuery.css(elem, prop, "");
			},
		начальное значение = текущее значение(),
		unit = valueParts && valueParts[ 3 ] || (jQuery.cssNumber [реквизит]? "" : "px" ),

		// Требуется вычисление начального значения для возможных несоответствий единиц измерения
		InitialInUnit = элемент.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec(jQuery.css(elem, prop));

	если (initialInUnit && initialInUnit[3] !== единица измерения) {

		// Поддержка: Firefox <=54
		// Уменьшите вдвое целевое значение итерации, чтобы предотвратить влияние верхних границ CSS (gh-2144)
		начальный = начальный / 2;

		// Единицы доверия, о которых сообщает jQuery.css
		единица = единица || начальныйInUnit[3];

		// Итеративно аппроксимировать от ненулевой начальной точки
		InitialInUnit = +начальный || 1;

		в то время как ( maxIterations-- ) {

			// Оценить и обновить наше лучшее предположение (удвоение предположений, которые обнуляются).
			// Завершить, если шкала равна или превышает 1 (что делает старый*новый продукт неположительным).
			jQuery.style(elem, prop, initialInUnit + unit);
			if ( ( 1 - шкала ) * ( 1 - ( шкала = текущее значение () / начальное || 0,5 )) <= 0 ) {
				максимальное число итераций = 0;
			}
			InitialInUnit = InitialInUnit/масштаб;

		}

		InitialInUnit = InitialInUnit * 2;
		jQuery.style(elem, prop, initialInUnit + unit);

		// Удостоверьтесь, что позже мы обновим свойства твина
		valueParts = valueParts || [];
	}

	если (значениеЧасти) {
		InitialInUnit = +initialInUnit || +начальный || 0;

		// Применить относительное выключение (+=/-=), если указано
		скорректировано = valueParts [ 1 ] ?
			InitialInUnit + (valueParts[1] + 1) * valueParts[2]:
			+значениеЧасти[ 2 ];
		если ( твин ) {
			твин.единица = единица измерения;
			tween.start = InitialInUnit;
			tween.end = скорректировано;
		}
	}
	отдача скорректирована;
}


вар defaultDisplayMap = {};

функция getDefaultDisplay(элемент) {
	вар темп,
		doc = элемент.владелецДокумент,
		имя_узла = имя_элемента.имя_узла,
		дисплей = defaultDisplayMap [имя_узла];

	если (показать) {
		обратный дисплей;
	}

	temp = doc.body.appendChild (doc.createElement (имя_узла));
	display = jQuery.css(temp, "display");

	temp.parentNode.removeChild (темп);

	если (отобразить === "нет") {
		дисплей = "заблокировать";
	}
	defaultDisplayMap[имя_узла] = дисплей;

	обратный дисплей;
}

функция showHide(элементы, показать) {
	вар дисплей,
		значения = [],
		индекс = 0,
		длина = элементы.длина;

	// Определяем новое отображаемое значение для элементов, которые необходимо изменить
	for ( ; индекс < длина; индекс ++ ) {
		элемент = элементы[индекс];
		если ( !elem.style ) {
			продолжать;
		}

		дисплей = элемент.стиль.дисплей;
		если ( показать ) {

			// Поскольку мы принудительно видим элементы, скрытые каскадом, немедленное (и медленное)
			// проверка требуется в этом первом цикле, если у нас нет непустого отображаемого значения (либо
			// встроенный или скоро будет восстановлен)
			если (отобразить === "нет") {
				значения[индекс] = dataPriv.get(элемент, "отображение") || нулевой;
				если (!значения[индекс]) {
					элемент.стиль.дисплей = "";
				}
			}
			если ( elem.style.display === "" && isHiddenWithinTree( elem )) {
				значения [индекс] = getDefaultDisplay (элемент);
			}
		} еще {
			если ( отобразить !== "нет" ) {
				значения [индекс] = "нет";

				// Помните, что мы перезаписываем
				dataPriv.set(элемент, "отображение", отображение);
			}
		}
	}

	// Устанавливаем отображение элементов во втором цикле, чтобы избежать постоянного перекомпоновки
	for (индекс = 0; индекс <длина; индекс++) {
		если ( значения [ индекс ] != ноль ) {
			элементы[индекс].style.display = значения[индекс];
		}
	}

	возвратные элементы;
}

jQuery.fn.extend( {
	показать: функция () {
		вернуть showHide(это, правда);
	},
	скрыть: функция () {
		вернуть showHide(это);
	},
	переключить: функция (состояние) {
		если ( состояние типа === "логическое" ) {
			вернуть состояние? это.показать() : это.скрыть();
		}

		вернуть this.each (функция () {
			если ( isHiddenWithinTree ( это )) {
				jQuery(это).show();
			} еще {
				jQuery(это).скрыть();
			}
		});
	}
});
var rcheckableType = ( /^(?:checkbox|радио)$/i );

var rtagName = ( /<([az][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( функция () {
	фрагмент var = document.createDocumentFragment(),
		div = фрагмент.appendChild(document.createElement("div" )),
		ввод = документ.создатьЭлемент ("ввод");

	// Поддержка: только Android 4.0–4.3
	// Состояние проверки потеряно, если установлено имя (trac-11217)
	// Поддержка: веб-приложения Windows (WWA)
	// `имя` и `тип` должны использовать .setAttribute для WWA (trac-14901)
	input.setAttribute("тип", "радио");
	input.setAttribute («проверено», «проверено»);
	input.setAttribute («имя», «t»);

	div.appendChild (ввод);

	// Поддержка: только Android <= 4.1
	// Старый WebKit неправильно клонирует проверенное состояние во фрагментах
	support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

	// Поддержка: только IE <= 11
	// Убедитесь, что текстовое поле (и флажок) defaultValue правильно клонировано
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Поддержка: только IE <=9
	// IE <=9 заменяет теги <option> их содержимым, если они вставлены за пределы
	// выбранный элемент.
	div.innerHTML = "<опция></опция>";
	support.option = !!div.lastChild;
} )();


// Мы должны закрыть эти теги для поддержки XHTML (trac-13200)
переменная оберткаMap = {

	// Синтаксические анализаторы XHTML не волшебным образом вставляют элементы в
	// так же, как парсер супа тегов. Поэтому мы не можем сократить
	// для этого опускаем <tbody> или другие обязательные элементы.
	thead: [ 1, "<таблица>", "</таблица>" ],
	столбец: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_по умолчанию: [0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Поддержка: только IE <=9
если ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


функция getAll (контекст, тег) {

	// Поддержка: только IE <=9–11
	// Используйте typeof, чтобы избежать вызова метода без аргументов для хост-объектов (trac-15151)
	вар рет;

	если ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName (тег || "*");

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll (тег || "*");

	} еще {
		рет = [];
	}

	если ( тег === не определено || тег && nodeName( контекст, тег )) {
		вернуть jQuery.merge([контекст], рет);
	}

	возврат рет;
}


// Отмечаем скрипты как уже оцененные
функция setGlobalEval(элементы, refElements) {
	переменная я = 0,
		l = элементы.длина;

	для ( ; я < 1; я ++ ) {
		dataPriv.set(
			элементы [ я ],
			"глобалЭвал",
			!refЭлементы || dataPriv.get(refElements[i], "globalEval")
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment (элементы, контекст, скрипты, выбор, игнорируется) {
	var elem, tmp, тег, обернуть, прикрепленный, j,
		фрагмент = контекст.createDocumentFragment(),
		узлы = [],
		я = 0,
		l = элементы.длина;

	для ( ; я < 1; я ++ ) {
		элемент = элемент[я];

		если ( элемент || элемент === 0 ) {

			// Добавляем узлы напрямую
			если ( toType (элемент ) === "объект" ) {

				// Поддержка: только Android <= 4.0, только PhantomJS 1
				// push.apply(_, arraylike) вызывает древний WebKit
				jQuery.merge(узлы, elem.nodeType? [elem]: elem);

			// Преобразование не-html в текстовый узел
			} иначе если ( !rhtml.test( элемент ) ) {
				nodes.push(context.createTextNode(elem));

			// Преобразование html в узлы DOM
			} еще {
				температура = температура || фрагмент.appendChild(context.createElement("div" ));

				// Десериализация стандартного представления
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[тег] || оберточная карта._default;
				tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

				// Спускаемся по оберткам к нужному содержимому
				j = обернуть [0];
				в то время как (j--) {
					tmp = tmp.lastChild;
				}

				// Поддержка: только Android <= 4.0, только PhantomJS 1
				// push.apply(_, arraylike) вызывает древний WebKit
				jQuery.merge(узлы, tmp.childNodes);

				// Запоминаем контейнер верхнего уровня
				tmp = фрагмент.firstChild;

				// Убедитесь, что созданные узлы потеряны (trac-12392)
				tmp.textContent = "";
			}
		}
	}

	// Удалить обертку из фрагмента
	фрагмент.textContent = "";

	я = 0;
	в то время как ( ( ​​элемент = узлы [ я ++ ] ) ) {

		// Пропустить элементы, уже находящиеся в коллекции контекста (trac-4087)
		если (выборка && jQuery.inArray(элемент, выборка) > -1) {
			если ( игнорируется ) {
				игнорируется.push(элемент);
			}
			продолжать;
		}

		прикреплен = прикреплен (элемент);

		// Добавляем к фрагменту
		tmp = getAll(фрагмент.appendChild(элемент), "скрипт");

		// Сохраняем историю оценки скрипта
		если (прилагается) {
			setGlobalEval(tmp);
		}

		// Захват исполняемых файлов
		если ( скрипты ) {
			j = 0;
			в то время как ( ( ​​элемент = tmp [ j ++ ] ) ) {
				если ( rscriptType.test( elem.type || "" )) {
					scripts.push(элемент);
				}
			}
		}
	}

	возвратный фрагмент;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

функция returnTrue() {
	вернуть истину;
}

функция returnFalse() {
	вернуть ложь;
}

// Поддержка: IE <=9 - 11+
// focus() и blur() асинхронны, за исключением случаев, когда они не работают.
// Поэтому ожидайте, что фокус будет синхронным, когда элемент уже активен,
// и размытие для синхронизации, когда элемент еще не активен.
// (фокус и размытие всегда синхронны в других поддерживаемых браузерах,
// это просто определяет, когда мы можем на это рассчитывать).
функция ожидаемая синхронизация (элемент, тип) {
	return (elem === safeActiveElement()) === (type === "focus");
}

// Поддержка: только IE <=9
// Доступ к document.activeElement может неожиданно вызвать
// https://bugs.jquery.com/ticket/13393
функция safeActiveElement() {
	пытаться {
		вернуть документ.activeElement;
	} поймать (ошибиться) {}
}

функция on(элемент, типы, селектор, данные, fn, один) {
	var origFn, тип;

	// Типы могут быть картой типов/обработчиков
	если ( typeof типов === "объект" ) {

		// (типы-объект, селектор, данные)
		если ( селектор typeof !== "string" ) {

			// (типы-Объект, данные)
			данные = данные || селектор;
			селектор = не определено;
		}
		для (введите типы) {
			on(элемент, тип, селектор, данные, типы[тип], один);
		}
		возвратный элемент;
	}

	если (данные == null && fn == null) {

		// (типы, fn)
		fn = селектор;
		данные = селектор = не определено;
	} иначе если ( fn == null ) {
		если ( селектор typeof === "string" ) {

			// (типы, селектор, fn)
			фн = данные;
			данные = не определены;
		} еще {

			// (типы, данные, fn)
			фн = данные;
			данные = селектор;
			селектор = не определено;
		}
	}
	если ( фн === ложь ) {
		фн = вернуть ложь;
	} иначе если ( !fn ) {
		возвратный элемент;
	}

	если ( один === 1 ) {
		оригФн = фн;
		fn = функция (событие) {

			// Можно использовать пустой набор, так как событие содержит информацию
			jQuery().выкл(событие);
			вернуть origFn.apply(это, аргументы);
		};

		// Использовать тот же guid, чтобы вызывающая сторона могла удалить его с помощью origFn
		fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
	}
	вернуть элемент.каждый (функция () {
		jQuery.event.add(это, типы, fn, данные, селектор);
	});
}

/*
 * Вспомогательные функции для управления событиями — не являются частью общедоступного интерфейса.
 * Реквизиты для библиотеки addEvent Дина Эдвардса для многих идей.
 */
jQuery.event = {

	Глобальный: {},

	добавить: функция (элемент, типы, обработчик, данные, селектор) {

		var handleObjIn, eventHandle, tmp,
			события, т, handleObj,
			специальные, обработчики, тип, пространства имен, origType,
			elemData = dataPriv.get(элемент);

		// Только присоединяйте события к объектам, которые принимают данные
		если ( !acceptData( элемент )) {
			возвращаться;
		}

		// Вызывающий может передать объект пользовательских данных вместо обработчика
		если ( обработчик. обработчик ) {
			handleObjIn = обработчик;
			обработчик = handleObjIn.handler;
			селектор = handleObjIn.selector;
		}

		// Убедитесь, что недопустимые селекторы генерируют исключения во время подключения
		// Вычислить documentElement в случае, если elem не является узлом элемента (например, документ)
		если (селектор) {
			jQuery.find.matchesSelector(documentElement, selector);
		}

		// Убедитесь, что обработчик имеет уникальный идентификатор, чтобы найти/удалить его позже
		если ( !handler.guid ) {
			обработчик.guid = jQuery.guid++;
		}

		// Инициируем структуру события элемента и основной обработчик, если это первый
		если ( !(события = elemData.events )) {
			события = elemData.events = Object.create(null);
		}
		если ( !( eventHandle = elemData.handle )) {
			eventHandle = elemData.handle = функция (е) {

				// Отбросить второе событие jQuery.event.trigger() и
				// когда событие вызывается после выгрузки страницы
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply(элемент, аргументы): не определено;
			};
		}

		// Обработка нескольких событий, разделенных пробелом
		типы = ( типы || "" ).match( rnothtmlwhite ) || [""];
		т = типы.длина;
		в то время как ( т -- ) {
			tmp = rtypenamespace.exec (типы [ t ] ) || [];
			тип = origType = tmp[1];
			пространства имен = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// *Должен* быть тип, без присоединения обработчиков только пространства имен
			если ( ! тип ) {
				продолжать;
			}

			// Если событие меняет свой тип, используем специальные обработчики событий для измененного типа
			специальный = jQuery.event.special[ тип ] || {};

			// Если селектор определен, определить тип API специального события, в противном случае заданный тип
			тип = ( селектор ? special.delegateType : special.bindType ) || тип;

			// Специальное обновление на основе нового типа сброса
			специальный = jQuery.event.special[ тип ] || {};

			// handleObj передается всем обработчикам событий
			handleObj = jQuery.extend( {
				тип: тип,
				оригТип: оригТип,
				данные: данные,
				обработчик: обработчик,
				руководство: обработчик.guid,
				селектор: селектор,
				needContext: селектор && jQuery.expr.match.needsContext.test(селектор),
				пространство имен: namespaces.join( "." )
			}, handleObjIn );

			// Инициируем очередь обработчиков событий, если мы первые
			если ( !( обработчики = события [ тип ] ) ) {
				обработчики = события [тип] = [];
				обработчики.delegateCount = 0;

				// Использовать addEventListener только в том случае, если обработчик специальных событий возвращает false
				если ( !специальный.настройка ||
					special.setup.call(elem, data, namespaces, eventHandle) === false) {

					если (elem.addEventListener) {
						elem.addEventListener(тип, обработчик события);
					}
				}
			}

			если (специальный.добавить) {
				special.add.call(элемент, handleObj);

				если ( !handleObj.handler.guid ) {
					handleObj.handler.guid = обработчик.guid;
				}
			}

			// Добавляем в список обработчиков элемента, делегаты впереди
			если (селектор) {
				handlers.splice(handlers.delegateCount++, 0, handleObj);
			} еще {
				handlers.push(handleObj);
			}

			// Отслеживание того, какие события когда-либо использовались, для оптимизации событий
			jQuery.event.global[тип] = истина;
		}

	},

	// Отсоединяем событие или набор событий от элемента
	удалить: функция (элемент, типы, обработчик, селектор, сопоставленные типы) {

		var j, origCount, tmp,
			события, т, handleObj,
			специальные, обработчики, тип, пространства имен, origType,
			elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

		если ( !elemData || !(events = elemData.events )) {
			возвращаться;
		}

		// Один раз для каждого type.namespace в types; тип может быть опущен
		типы = ( типы || "" ).match( rnothtmlwhite ) || [""];
		т = типы.длина;
		в то время как ( т -- ) {
			tmp = rtypenamespace.exec (типы [ t ] ) || [];
			тип = origType = tmp[1];
			пространства имен = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Отменить привязку всех событий (в этом пространстве имен, если оно предоставлено) для элемента
			если ( ! тип ) {
				for (введите события) {
					jQuery.event.remove(элемент, тип + типы[t], обработчик, селектор, истина);
				}
				продолжать;
			}

			специальный = jQuery.event.special[ тип ] || {};
			тип = ( селектор ? special.delegateType : special.bindType ) || тип;
			обработчики = события [ тип ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Удалить соответствующие события
			origCount = j = handlers.length;
			в то время как (j--) {
				handleObj = обработчики [ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					(!tmp || tmp.test(handleObj.namespace)) &&
					( !селектор || селектор === handleObj.selector ||
						селектор === "**" && handleObj.selector )) {
					handlers.splice( j, 1 );

					если ( handleObj.selector ) {
						обработчики.delegateCount--;
					}
					если (спец.удалить) {
						special.remove.call(элемент, handleObj);
					}
				}
			}

			// Удаляем универсальный обработчик событий, если мы что-то удалили, а обработчиков больше нет
			// (предотвращает бесконечную рекурсию при удалении специальных обработчиков событий)
			если ( origCount && !handlers.length ) {
				если ( !специальный.разрыв ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent(элемент, тип, elemData.handle);
				}

				удалить события[ тип ];
			}
		}

		// Удаляем данные и расширение, если оно больше не используется
		если (jQuery.isEmptyObject(события)) {
			dataPriv.remove(elem, "обрабатывать события");
		}
	},

	диспетчеризация: функция (nativeEvent) {

		var i, j, ret, совпало, handleObj, handlerQueue,
			аргументы = новый массив (аргументы.длина),

			// Создаем событие jQuery.Event с возможностью записи из собственного объекта события
			событие = jQuery.event.fix(nativeEvent),

			обработчики = (
				dataPriv.get(это, "события") || Объект.создать(ноль)
			)[ событие.тип ] || [],
			специальный = jQuery.event.special[событие.тип] || {};

		// Используйте фиксированное событие jQuery.Event, а не родное событие (доступное только для чтения)
		аргументы [0] = событие;

		for ( я = 1; я < arguments.length; я ++ ) {
			аргументы[i] = аргументы[i];
		}

		event.delegateTarget = это;

		// Вызовите хук preDispatch для отображаемого типа и при желании отпустите его
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			возвращаться;
		}

		// Определяем обработчики
		handlerQueue = jQuery.event.handlers.call(это, событие, обработчики);

		// Сначала запускаем делегаты; они могут захотеть остановить распространение под нами
		я = 0;
		в то время как ( ( ​​соответствует = handlerQueue [ i ++ ] ) && !event.isPropagationStopped () ) {
			event.currentTarget = matched.elem;

			j = 0;
			в то время как (( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped()) {

				// Если событие имеет пространство имен, то каждый обработчик вызывается только в том случае, если он
				// особенно универсальный или его пространства имен являются расширенным набором пространств имен события.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test (handleObj.namespace) ) {

					event.handleObj = обработать объект;
					событие.данные = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply(matched.elem, args );

					если ( рет !== не определено ) {
						если ( ( event.result = ret ) === false ) {
							событие.preventDefault();
							событие.stopPropagation();
						}
					}
				}
			}
		}

		// Вызываем хук postDispatch для сопоставленного типа
		если (специальный.postDispatch) {
			special.postDispatch.call(это, событие);
		}

		вернуть событие.результат;
	},

	обработчики: функция (событие, обработчики) {
		переменная i, handleObj, sel, matchedHandlers, matchedSelectors,
			обработчик очереди = [],
			делегатКаунт = handlers.delegateCount,
			курс = событие.цель;

		// Находим обработчики делегатов
		если ( делегатКоличество делегатов &&

			// Поддержка: IE <=9
			// Черная дыра SVG <использование> деревьев экземпляров (trac-13180)
			cur.nodeType &&

			// Поддержка: Firefox <=42
			// Подавление нарушающих спецификацию кликов, указывающих на неосновную кнопку указателя (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Поддержка: только IE 11
			// ...но не "щелчки" клавиш со стрелками радиовходов, которые могут иметь `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 )) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Не проверять неэлементы (trac-13208)
				// Не обрабатывать клики по отключенным элементам (trac-6911, trac-8165, trac-11382, trac-11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true )) {
					matchedHandlers = [];
					matchedSelectors = {};
					для ( я = 0; я < делегата Count; я ++ ) {
						handleObj = обработчики [ я ];

						// Не конфликтовать со свойствами Object.prototype (trac-13203)
						сел = handleObj.selector + " ";

						if (matchedSelectors[sel] === undefined) {
							matchedSelectors[sel] = handleObj.needsContext?
								jQuery(sel, this).index(cur) > -1:
								jQuery.find(sel, this, null, [cur]).length;
						}
						если (matchedSelectors[sel]) {
							matchedHandlers.push(handleObj);
						}
					}
					если (matchedHandlers.length) {
						handlerQueue.push({элемент: cur, обработчики: matchedHandlers});
					}
				}
			}
		}

		// Добавляем оставшиеся (непосредственно связанные) обработчики
		кур = это;
		если (delegateCount < handlers.length ) {
			handlerQueue.push({элемент: cur, обработчики: handlers.slice(delegateCount)});
		}

		вернуть обработчик очереди;
	},

	addProp: функция (имя, крючок) {
		Object.defineProperty( jQuery.Event.prototype, имя, {
			перечислимое: правда,
			настраиваемый: правда,

			получить: isFunction (ловушка)?
				функция () {
					если (это.originalEvent) {
						возвратный крючок (this.originalEvent);
					}
				} :
				функция () {
					если (это.originalEvent) {
						вернуть this.originalEvent[имя];
					}
				},

			установить: функция (значение) {
				Object.defineProperty(это, имя, {
					перечислимое: правда,
					настраиваемый: правда,
					записываемый: правда,
					значение: значение
				});
			}
		});
	},

	исправить: функция (originalEvent) {
		вернуть исходное событие [jQuery.expando]?
			оригинальное событие:
			новый jQuery.Event(originalEvent);
	},

	особенный: {
		нагрузка: {

			// Предотвращаем всплытие сработавших событий image.load в window.load
			непузырь: правда
		},
		нажмите: {

			// Используйте собственное событие, чтобы обеспечить правильное состояние для проверяемых входных данных
			настройка: функция (данные) {

				// Для взаимного сжатия с _default замените доступ `this` на локальную переменную.
				// `|| data` — это мертвый код, предназначенный только для сохранения переменной посредством минимизации.
				вар эл = это || данные;

				// Требуем первый обработчик
				если ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input") ) {

					// dataPriv.set(el, "щелчок", ...)
					плечоNative(el, "щелчок", returnTrue);
				}

				// Возвращаем false, чтобы разрешить нормальную обработку в вызывающей программе
				вернуть ложь;
			},
			триггер: функция (данные) {

				// Для взаимного сжатия с _default замените доступ `this` на локальную переменную.
				// `|| data` — это мертвый код, предназначенный только для сохранения переменной посредством минимизации.
				вар эл = это || данные;

				// Принудительная настройка перед нажатием кнопки
				если ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input") ) {

					плечоNative(el, "щелчок");
				}

				// Вернуть не-ложь, чтобы разрешить нормальное распространение пути события
				вернуть истину;
			},

			// Для согласованности между браузерами отключите встроенный .click() для ссылок
			// Также предотвратите это, если мы в данный момент находимся внутри стека нативных событий с использованием заемных средств
			_default: функция (событие) {
				вар цель = событие.цель;
				вернуть rcheckableType.test(target.type) &&
					target.click && nodeName( target, "input") &&
					dataPriv.get(цель, "щелчок") ||
					имя_узла(цель, "а");
			}
		},

		перед выгрузкой: {
			postDispatch: функция (событие) {

				// Поддержка: Firefox 20+
				// Firefox не оповещает, если поле returnValue не установлено.
				если ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Гарантируем наличие прослушивателя событий, который обрабатывает запускаемые вручную
// синтетические события, прерывая их выполнение до повторного вызова в ответ на
// *собственные* события, которые он инициирует напрямую, гарантируя, что изменения состояния
// уже произошло до того, как будут вызваны другие слушатели.
функция рычагаNative(эль, тип, ожидаемая синхронизация) {

	// Отсутствие expectSync указывает на вызов триггера, который должен принудительно установить через jQuery.event.add
	если (! ОжидатьСинхронизировать) {
		if (dataPriv.get(el, type) === undefined) {
			jQuery.event.add(эль, тип, returnTrue);
		}
		возвращаться;
	}

	// Регистрируем контроллер как специальный универсальный обработчик для всех пространств имён событий
	dataPriv.set(эль, тип, ложь);
	jQuery.event.add(эль, тип, {
		пространство имен: ложь,
		обработчик: функция (событие) {
			вар неасинхронный, результат,
				сохранено = dataPriv.get(это, тип);

			если ( ( event.isTrigger & 1 ) && этот [тип ] ) {

				// Прервать обработку внешнего синтетического события .trigger()ed
				// В таких случаях сохраненные данные должны быть ложными, но могут быть остаточным объектом захвата
				// из собственного асинхронного обработчика (gh-4350)
				если ( !сохранено.длина ) {

					// Сохраняем аргументы для использования при обработке внутреннего собственного события
					// Всегда будет хотя бы один аргумент (объект события), поэтому этот массив
					// его нельзя спутать с остатком объекта захвата.
					сохранено = slice.call (аргументы);
					dataPriv.set(это, тип, сохранено);

					// Запустить собственное событие и зафиксировать его результат
					// Поддержка: IE <=9 - 11+
					// focus() и blur() асинхронны
					notAsync = expectSync(это, тип);
					этот тип ]();
					результат = dataPriv.get(это, тип);
					если ( сохранено !== результат || не асинхронно ) {
						dataPriv.set(это, тип, ложь);
					} еще {
						результат = {};
					}
					если ( сохранено !== результат ) {

						// Отменить внешнее синтетическое событие
						event.stopImmediatePropagation();
						событие.preventDefault();

						// Поддержка: Chrome 86+
						// В Chrome, если элемент, имеющий обработчик focusout, размыт
						// щелчок вне его, он вызывает обработчик синхронно. Если
						// этот обработчик вызывает `.remove()` для элемента, данные очищаются,
						// оставляем `result` неопределенным. Нам нужно остерегаться этого.
						вернуть результат && result.value;
					}

				// Если это внутреннее синтетическое событие для события с всплывающим суррогатом
				// (фокус или размытие), предположим, что суррогат уже распространился от срабатывания
				// родное событие и предотвратить его повторение здесь.
				// Технически это приводит к неправильному порядку по отношению к `.trigger()` (в котором
				// всплывающий суррогат распространяется *после* непузырькового основания), но это кажется
				// менее плохо, чем дублирование.
				} else if ( ( jQuery.event.special[ тип ] || {} ).delegateType ) {
					событие.stopPropagation();
				}

			// Если это нативное событие, инициированное выше, то теперь все в порядке
			// Запустить внутреннее синтетическое событие с исходными аргументами
			} иначе если (сохранено.длина) {

				// ...и фиксируем результат
				dataPriv.set(это, тип, {
					значение: jQuery.event.trigger(

						// Поддержка: IE <=9 - 11+
						// Расширить прототип, чтобы сбросить вышеуказанную функцию stopImmediatePropagation()
						jQuery.extend(сохранено[0], jQuery.Event.prototype),
						сохраненный.срез(1),
						этот
					)
				});

				// Прервать обработку нативного события
				event.stopImmediatePropagation();
			}
		}
	});
}

jQuery.removeEvent = функция (элемент, тип, дескриптор) {

	// Это "если" нужно для простых объектов
	если (элемент.removeEventListener) {
		elem.removeEventListener(тип, дескриптор);
	}
};

jQuery.Event = функция (источник, реквизит) {

	// Разрешить создание экземпляра без ключевого слова 'new'
	если ( !(этот экземпляр jQuery.Event )) {
		вернуть новый jQuery.Event(src, props);
	}

	// Объект события
	если ( src && src.type ) {
		this.originalEvent = источник;
		этот.тип = источник.тип;

		// События, всплывающие в документе, могли быть помечены как предотвращенные
		// обработчиком ниже по дереву; отражать правильное значение.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === не определено &&

				// Поддержка: только Android <= 2.3
				src.returnValue === ложь?
			ВернутьИстина:
			возврат Ложь;

		// Создаем целевые свойства
		// Поддержка: Safari <=6 - только 7
		// Цель не должна быть текстовым узлом (trac-504, trac-13143)
		this.target = (src.target && src.target.nodeType === 3)?
			src.target.parentNode:
			источник.цель;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Тип события
	} еще {
		этот.тип = источник;
	}

	// Помещаем явно заданные свойства в объект события
	если (реквизит) {
		jQuery.extend(это, реквизит);
	}

	// Создаем временную метку, если у входящего события ее нет
	this.timeStamp = src && src.timeStamp || Дата.сейчас();

	// Отмечаем как исправленное
	это [ jQuery.expando ] = правда;
};

// jQuery.Event основан на событиях DOM3, как указано в языковой привязке ECMAScript
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	конструктор: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: ложь,

	предотвратитьПо умолчанию: функция () {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		если ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	остановить распространение: функция () {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		если ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: функция () {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		если ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		это.stopPropagation();
	}
};

// Включает все общие реквизиты событий, включая специфичные для KeyEvent и MouseEvent реквизиты
jQuery.каждый( {
	AltKey: правда,
	пузыри: правда,
	отменяемый: правда,
	измененоTouches: правда,
	ctrlKey: правда,
	Деталь: правда,
	фаза события: правда,
	метаКлюч: правда,
	страницаX: правда,
	страницаY: правда,
	shiftKey: правда,
	вид: правда,
	"char": правда,
	код: правда,
	charCode: правда,
	ключ: правда,
	код ключа: правда,
	кнопка: правда,
	кнопки: правда,
	клиентX: правда,
	clientY: правда,
	смещениеX: правда,
	offsetY: правда,
	идентификатор указателя: правда,
	тип указателя: правда,
	screenX: правда,
	screenY: правда,
	targetTouches: правда,
	toElement: правда,
	касания: правда,
	что: правда
}, jQuery.event.addProp);

jQuery.each({фокус: "фокус", размытие: "фокусаут"}, функция(тип, делегатТип) {
	jQuery.event.special [тип] = {

		// Использовать собственное событие, если это возможно, чтобы последовательность размытия/фокусировки была правильной
		настройка: функция () {

			// Требуем первый обработчик
			// dataPriv.set(это, "фокус", ...)
			// dataPriv.set(это, "размытие", ...)
			рычагеNative(это, тип, ожидаемая синхронизация);

			// Возвращаем false, чтобы разрешить нормальную обработку в вызывающей программе
			вернуть ложь;
		},
		триггер: функция () {

			// Принудительная настройка перед запуском
			плечоNative(это, тип);

			// Вернуть не-ложь, чтобы разрешить нормальное распространение пути события
			вернуть истину;
		},

		// Подавить собственный фокус или размытие, если мы в данный момент находимся внутри
		// стек нативных событий с использованием заемных средств
		_default: функция (событие) {
			вернуть dataPriv.get (событие. цель, тип);
		},

		делегаттипе: делегаттипе
	};
});

// Создаем события mouseenter/leave, используя проверки mouseover/out и время события
// чтобы делегирование событий работало в jQuery.
// Сделайте то же самое для pointerenter/pointerleave и pointerover/pointerout
//
// Поддержка: только Safari 7
// Safari слишком часто отправляет команду mouseenter; видеть:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// для описания ошибки (она существовала и в более старых версиях Chrome).
jQuery.каждый( {
	mouseenter: "наведение мыши",
	mouseleave: "мышь",
	указатель введите: "указатель",
	указатель: "указатель"
}, функция(оригинал, исправление) {
	jQuery.event.special[ ориг ] = {
		делегатТип: исправить,
		bindType: исправить,

		ручка: функция (событие) {
			вар рет,
				цель = это,
				связанные = событие.relatedTarget,
				handleObj = событие.handleObj;

			// Для mouseenter/leave вызовите обработчик, если родство находится за пределами цели.
			// NB: Нет связанной цели, если мышь покинула/вошла в окно браузера
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply(это, аргументы);
				событие.тип = исправить;
			}
			возврат рет;
		}
	};
});

jQuery.fn.extend( {

	on: функция (типы, селектор, данные, fn) {
		return on(это, типы, селектор, данные, fn);
	},
	один: функция (типы, селектор, данные, fn) {
		return on(это, типы, селектор, данные, fn, 1);
	},
	off: функция (типы, селектор, fn) {
		var handleObj, тип;
		если ( типы && типы.preventDefault && типы.handleObj ) {

			// (событие) отправлено jQuery.Event
			handleObj = типы.handleObj;
			jQuery (types.delegateTarget). Off (
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					дескрипторObj.origType,
				handleObj.селектор,
				handleObj.handler
			);
			вернуть это;
		}
		если ( typeof типов === "объект" ) {

			// ( типы-объект [, селектор] )
			для (введите типы) {
				this.off(тип, селектор, типы[тип]);
			}
			вернуть это;
		}
		if ( selector === false || typeof selector === "function" ) {

			// (типы [, fn] )
			fn = селектор;
			селектор = не определено;
		}
		если ( фн === ложь ) {
			фн = вернуть ложь;
		}
		вернуть this.each (функция () {
			jQuery.event.remove(это, типы, fn, селектор);
		});
	}
});


вар

	// Поддержка: только IE <=10–11, Edge 12–13
	// В IE/Edge использование здесь групп регулярных выражений вызывает серьезные замедления.
	// См. https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<скрипт|<стиль|<ссылка/i,

	// проверено="проверено" или проверено
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,

	rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

// Предпочитаем tbody родительской таблице для содержания новых строк
манипулирование функциейTarget(элемент, содержимое) {
	если (имя_узла(элемент, "таблица") &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" )) {

		вернуть jQuery(элемент).дети("тело")[0] || элемент;
	}

	возвратный элемент;
}

// Замена/восстановление атрибута type элементов скрипта для безопасного манипулирования DOM
функция disableScript (элемент) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	возвратный элемент;
}
function restoreScript(элемент) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		элемент.тип = элемент.тип.срез( 5 );
	} еще {
		elem.removeAttribute("тип");
	}

	возвратный элемент;
}

функция cloneCopyEvent (источник, место назначения) {
	var i, l, тип, pdataOld, udataOld, udataCur, события;

	если ( тип_назначения !== 1 ) {
		возвращаться;
	}

	// 1. Копируем приватные данные: события, обработчики и т.д.
	если ( dataPriv.hasData ( источник ) ) {
		pdataOld = dataPriv.get (источник);
		события = pdataOld.events;

		если ( события ) {
			dataPriv.remove(dest, "обрабатывать события");

			for (введите события) {
				for ( я = 0, л = события [ тип ]. длина; я < л; я ++) {
					jQuery.event.add(назначение, тип, события[тип][i]);
				}
			}
		}
	}

	// 2. Копируем данные пользователя
	если ( dataUser.hasData ( источник ) ) {
		udataOld = dataUser.access (источник);
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set(назначение, udataCur);
	}
}

// Исправление ошибок IE, см. тесты поддержки
функция fixInput (источник, пункт назначения) {
	var имя_узла = место назначения.имя_узла.toLowerCase();

	// Не удается сохранить проверенное состояние клонированного флажка или переключателя.
	if ( nodeName === "input" && rcheckableType.test(src.type)) {
		пункт назначения.проверено = источник.проверено;

	// Не удалось вернуть выбранную опцию в выбранное состояние по умолчанию при клонировании опций
	} else if ( имя_узла === "ввод" || имя_узла === "текстовое поле" ) {
		dest.defaultValue = src.defaultValue;
	}
}

функция domManip (коллекция, аргументы, обратный вызов, игнорируется) {

	// Сглаживание любых вложенных массивов
	аргументы = квартира (аргументы);

	var фрагмент, первый, скрипты, hasScripts, узел, документ,
		я = 0,
		l = коллекция.длина,
		iNoClone = л - 1,
		значение = аргументы [0],
		значениеIsFunction = isFunction(значение);

	// Мы не можем клонировать фрагменты Node, содержащие проверенные, в WebKit
	если (значениеФункция ||
			( l > 1 && тип значения === "строка" &&
				!support.checkClone && rchecked.test( значение ) ) ) {
		вернуть collection.each (функция (индекс) {
			var self = collection.eq(индекс);
			если ( значениеФункция ) {
				args[0] = value.call(this, index, self.html());
			}
			domManip(я, аргументы, обратный вызов, игнорируется);
		});
	}

	если ( л ) {
		фрагмент = buildFragment (аргументы, коллекция [ 0 ].ownerDocument, false, коллекция, игнорируется);
		первый = фрагмент.firstChild;

		если ( фрагмент.childNodes.length === 1 ) {
			фрагмент = первый;
		}

		// Требуется либо новый контент, либо интерес к игнорируемым элементам для вызова обратного вызова
		если ( первый || игнорируется ) {
			скрипты = jQuery.map(getAll(фрагмент, «скрипт»), disableScript);
			hasScripts = скрипты.длина;

			// Используем исходный фрагмент для последнего элемента
			// вместо первого, потому что он может закончиться
			// неправильно очищается в определенных ситуациях (trac-8070).
			для ( ; я < 1; я ++ ) {
				узел = фрагмент;

				если ( я !== iNoClone ) {
					узел = jQuery.clone(узел, правда, правда);

					// Сохраняем ссылки на клонированные скрипты для последующего восстановления
					если (скрипты) {

						// Поддержка: только Android <= 4.0, только PhantomJS 1
						// push.apply(_, arraylike) вызывает древний WebKit
						jQuery.merge(скрипты, getAll(узел, "скрипт" ));
					}
				}

				callback.call(коллекция[i], узел, i);
			}

			если (скрипты) {
				doc = скрипты[ скрипты.длина - 1 ].ownerDocument;

				// Повторно активировать скрипты
				jQuery.map(скрипты, restoreScript);

				// Оценка исполняемых скриптов при первой вставке документа
				для ( я = 0; я < hasScripts; я ++ ) {
					узел = скрипты [ я ];
					если ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access(узел, "globalEval") &&
						jQuery.contains(документ, узел)) {

						если ( node.src && ( node.type || "" ).toLowerCase() !== "модуль" ) {

							// Необязательная зависимость AJAX, но не будет запускать скрипты, если они отсутствуют
							если ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									одноразовый номер: node.nonce || node.getAttribute («одноразовый номер»)
								}, документ);
							}
						} еще {

							// Развернуть раздел CDATA, содержащий содержимое скрипта. Этого не должно быть
							// нужны, так как в документах XML их уже не видно, когда
							// проверяем содержимое элемента и в документах HTML их нет
							// это означает, что мы сохраняем эту логику для обратной совместимости.
							// Это будет полностью удалено в 4.0. См. gh-4904.
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	возвратный сбор;
}

функция удалить (элемент, селектор, сохранить данные) {
	вар узел,
		узлы = селектор? jQuery.filter (селектор, элемент): элемент,
		я = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		если ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData(getAll(узел));
		}

		если ( узел.родительский узел ) {
			если ( KeepData && isAttached ( узел ) ) {
				setGlobalEval(getAll(узел, "скрипт" ));
			}
			node.parentNode.removeChild (узел);
		}
	}

	возвратный элемент;
}

jQuery.extend( {
	htmlPrefilter: функция ( html ) {
		вернуть html;
	},

	клон: функция (элемент, dataAndEvents, deepDataAndEvents) {
		var i, l, srcElements, destElements,
			клон = elem.cloneNode(true),
			inPage = isAttached (элемент);

		// Исправление проблем с клонированием IE
		если ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc(элемент) ) {

			// Здесь мы избегаем Sizzle из соображений производительности: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll(клон);
			srcElements = получить все (элемент);

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput(srcElements[i], destElements[i]);
			}
		}

		// Копируем события из оригинала в клон
		если (данные и события) {
			если ( глубокие данные и события ) {
				исходные элементы = исходные элементы || получитьВсе(элемент);
				элементы назначения = элементы назначения || получить все(клонировать);

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent(srcElements[i], destElements[i]);
				}
			} еще {
				cloneCopyEvent(элемент, клон);
			}
		}

		// Сохраняем историю оценки скрипта
		destElements = getAll(клон, "скрипт");
		если (destElements.length > 0) {
			setGlobalEval(destElements, !inPage && getAll(elem, "script" ));
		}

		// Возвращаем клонированный набор
		вернуть клон;
	},

	cleanData: функция (элементы) {
		переменные данные, элемент, тип,
			специальный = jQuery.event.специальный,
			я = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			если ( acceptData ( элемент ) ) {
				если ( ( данные = элемент [ dataPriv.expando ] ) ) {
					если (данные.события) {
						для (введите data.events) {
							если (специальный [тип]) {
								jQuery.event.remove(элемент, тип);

							// Это ярлык, чтобы избежать накладных расходов jQuery.event.remove
							} еще {
								jQuery.removeEvent(элемент, тип, data.handle);
							}
						}
					}

					// Поддержка: Chrome <=35–45+
					// Назначить undefined вместо использования удаления, см. Data#remove
					элемент [dataPriv.expando] = не определено;
				}
				если ( элемент [ dataUser.expando ] ) {

					// Поддержка: Chrome <=35–45+
					// Назначить undefined вместо использования удаления, см. Data#remove
					элемент [dataUser.expando] = не определено;
				}
			}
		}
	}
});

jQuery.fn.extend( {
	отсоединить: функция (селектор) {
		вернуть удалить (это, селектор, правда);
	},

	удалить: функция (селектор) {
		вернуть удалить (это, селектор);
	},

	текст: функция (значение) {
		вернуть доступ (это, функция (значение) {
			возвращаемое значение === не определено?
				jQuery.текст (это):
				this.empty (). каждый ( функция () {
					если ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = значение;
					}
				});
		}, null, значение, arguments.length );
	},

	добавить: функция () {
		return domManip(это, аргументы, функция(элемент) {
			если ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = манипуляцияTarget(это, элемент);
				target.appendChild(элемент);
			}
		});
	},

	добавить: функция () {
		return domManip(это, аргументы, функция(элемент) {
			если ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = манипуляцияTarget(это, элемент);
				target.insertBefore(элемент, target.firstChild);
			}
		});
	},

	до: функция () {
		return domManip(это, аргументы, функция(элемент) {
			если ( this.parentNode ) {
				this.parentNode.insertBefore(элемент, это);
			}
		});
	},

	после: функция () {
		return domManip(это, аргументы, функция(элемент) {
			если ( this.parentNode ) {
				this.parentNode.insertBefore(элемент, this.nextSibling);
			}
		});
	},

	пусто: функция () {
		вар элем,
			я = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			если (элемент.nodeType === 1) {

				// Предотвратить утечку памяти
				jQuery.cleanData(getAll(elem, false));

				// Удаляем все оставшиеся узлы
				элемент.textContent = "";
			}
		}

		вернуть это;
	},

	клон: функция (данные и события, глубокие данные и события) {
		dataAndEvents = dataAndEvents == null ? ложь: данные и события;
		deepDataAndEvents = deepDataAndEvents == null ? данные и события: глубокие данные и события;

		вернуть this.map (функция () {
			вернуть jQuery.clone(это, dataAndEvents, deepDataAndEvents);
		});
	},

	HTML: функция (значение) {
		вернуть доступ (это, функция (значение) {
			var elem = this[ 0 ] || {},
				я = 0,
				л = эта.длина;

			если ( значение === не определено && elem.nodeType === 1 ) {
				вернуть elem.innerHTML;
			}

			// Посмотрим, можно ли сократить путь и просто использовать innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( значение ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				значение = jQuery.htmlPrefilter(значение);

				пытаться {
					для ( ; я < 1; я ++ ) {
						элемент = это [ я ] || {};

						// Удалить узлы элементов и предотвратить утечку памяти
						если (элемент.nodeType === 1) {
							jQuery.cleanData(getAll(elem, false));
							элемент.innerHTML = значение;
						}
					}

					элемент = 0;

				// Если использование innerHTML вызывает исключение, используйте резервный метод
				} поймать ( д ) {}
			}

			если (элемент) {
				this.empty().append(значение);
			}
		}, null, значение, arguments.length );
	},

	заменитьС: функция () {
		переменная игнорируется = [];

		// Вносим изменения, заменяя каждый неигнорируемый элемент контекста новым содержимым
		return domManip(это, аргументы, функция(элемент) {
			var parent = this.parentNode;

			если (jQuery.inArray (это, игнорируется) < 0) {
				jQuery.cleanData(getAll(это));
				если ( родитель ) {
					parent.replaceChild (элемент, это);
				}
			}

		// Принудительный вызов обратного вызова
		}, игнорируется);
	}
});

jQuery.каждый( {
	appendTo: "добавлять",
	prependTo: "предварить",
	вставитьперед: "до",
	вставить после: "после",
	заменитьВсе: "заменитьС"
}, функция(имя, оригинал) {
	jQuery.fn[имя] = функция(селектор) {
		вар элементы,
			рет = [],
			вставка = jQuery (селектор),
			последняя = вставка.длина - 1,
			я = 0;

		for ( ; я <= последний; я ++ ) {
			элементы = я === последний ? это: this.clone (истина);
			jQuery(insert[i])[original](elems);

			// Поддержка: только Android <= 4.0, только PhantomJS 1
			// .get(), потому что push.apply(_, arraylike) вызывает древний WebKit
			push.apply(возврат, elems.get());
		}

		вернуть this.pushStack(возврат);
	};
});
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[az%]+$", "i" );

var rcustomProp = /^--/;


var getStyles = функция (элемент) {

		// Поддержка: только IE <= 11, Firefox <= 30 (trac-15098, trac-14150)
		// IE выбрасывает элементы, созданные во всплывающих окнах
		// Тем временем FF выбрасывает элементы фрейма через "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		если ( !просмотр || !просмотр.opener ) {
			вид = окно;
		}

		вернуть view.getComputedStyle (элемент);
	};

var swap = функция (элемент, параметры, обратный вызов) {
	вар рет, имя,
		старый = {};

	// Запоминаем старые значения и вставляем новые
	для (имя в опциях) {
		старый[имя] = elem.style[имя];
		elem.style[имя] = параметры[имя];
	}

	рет = callback.call(элемент);

	// Вернуть старые значения
	для (имя в опциях) {
		elem.style[имя] = старый[имя];
	}

	возврат рет;
};


var rboxStyle = новое регулярное выражение (cssExpand.join («|»), «i»);

var whitespace = "[\\x20\\t\\r\\n\\f]";


var rtrimCSS = новое регулярное выражение(
	"^" + пробел + "+|((?:^|[^\\\\])(?:\\\\.)*)" + пробел + "+$",
	"г"
);




( функция () {

	// Для выполнения тестов pixelPosition и boxSizingReliable требуется только один макет
	// поэтому они выполняются одновременно, чтобы сохранить второе вычисление.
	функция calculateStyleTests() {

		// Это синглтон, нам нужно выполнить его только один раз
		если (! дел) {
			возвращаться;
		}

		container.style.cssText = "позиция:абсолютная;слева:-11111px;ширина:60px;" +
			"верхнее поле: 1px; отступ: 0; граница: 0";
		div.style.cssText =
			"позиция: относительная; дисплей: блок; размер блока: граница блока; переполнение: прокрутка;" +
			"поле:авто;граница:1px;заполнение:1px;" +
			"ширина:60%;верх:1%";
		documentElement.appendChild(контейнер).appendChild(div);

		var divStyle = window.getComputedStyle(div);
		pixelPositionVal = divStyle.top !== "1%";

		// Поддержка: только Android 4.0–4.3, Firefox <=3–44
		НадежныйMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;

		// Поддержка: только Android 4.0–4.3, Safari <=9.1–10.1, iOS <=7.0–9.3
		// Некоторые стили возвращаются с процентными значениями, даже если они не должны
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

		// Поддержка: только IE 9–11
		// Обнаружение неправильного представления размеров содержимого для элементов box-sizing:border-box
		boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

		// Поддержка: только IE 9
		// Обнаружение переполнения: прокрутка скручивания (gh-3699)
		// Поддержка: Chrome <= 64
		// Не дайте себя обмануть, когда масштабирование влияет на offsetWidth (gh-4029)
		div.style.position = "абсолютный";
		scrollboxSizeVal = roundPixelMeasures(div.offsetWidth/3) === 12;

		documentElement.removeChild (контейнер);

		// Обнуляем div, чтобы он не сохранялся в памяти и
		// это также будет признаком того, что проверки уже выполнены
		дел = ноль;
	}

	функция roundPixelMeasures(мера) {
		вернуть Math.round(parseFloat(мера));
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		надежныйTrDimensionsVal, надежныйMarginLeftVal,
		контейнер = документ.createElement ("div"),
		div = document.createElement("div");

	// Досрочное завершение в ограниченных (не браузерных) средах
	если ( !div.style ) {
		возвращаться;
	}

	// Поддержка: только IE <=9–11
	// Стиль клонированного элемента влияет на клонированный исходный элемент (trac-8908)
	div.style.backgroundClip = "контент-бокс";
	div.cloneNode(true).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "контент-бокс";

	jQuery.extend (поддержка, {
		boxSizingReliable: функция () {
			вычислитьтесты стиля();
			поле возвратаSizingReliableVal;
		},
		pixelBoxStyles: функция () {
			вычислитьтесты стиля();
			вернуть pixelBoxStylesVal;
		},
		pixelPosition: функция () {
			вычислитьтесты стиля();
			вернуть значение пикселяПозиции;
		},
		НадежныйМаргинЛефт: функция () {
			вычислитьтесты стиля();
			вернуть надежныйMarginLeftVal;
		},
		размер прокрутки: функция () {
			вычислитьтесты стиля();
			вернуть scrollboxSizeVal;
		},

		// Поддержка: IE 9–11+, Edge 15–18+
		// IE/Edge неправильно сообщает `getComputedStyle` строк таблицы с шириной/высотой
		// устанавливается в CSS, в то время как свойства `offset*` сообщают правильные значения.
		// Поведение в IE 9 более тонкое, чем в более новых версиях, и оно проходит
		// некоторые версии этого теста; убедитесь, что он не проходит там!
		//
		// Поддержка: Firefox 70+
		// Только Firefox включает ширину границ
		// в вычисляемых размерах. (гх-4529)
		надежныйTrDimensions: функция () {
			таблица var, tr, trChild, trStyle;
			если ( надежныйTrDimensionsVal == ноль ) {
				таблица = документ.createElement ("таблица");
				tr = document.createElement ("tr");
				trChild = document.createElement ("div");

				table.style.cssText = "позиция: абсолютная; левая: -11111px; схлопывание границы: раздельная";
				tr.style.cssText = "граница: 1px сплошная";

				// Поддержка: Chrome 86+
				// Высота, заданная через cssText, не применяется.
				// Затем вычисленная высота возвращается как 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Поддержка: Android 8 Chrome 86+
				// В нашем iframe bodyBackground.html,
				// отображение для всех элементов div устанавливается на "inline",
				// что вызывает проблему только в Android 8 Chrome 86.
				// Обеспечение отображения div: block
				// обходит эту проблему.
				trChild.style.display = "заблокировать";

				элемент документа
					.appendChild(таблица)
					.appendChild(тр)
					.appendChild(trChild);

				trStyle = window.getComputedStyle( tr );
				надежныйTrDimensionsVal = (parseInt(trStyle.height, 10) +
					parseInt(trStyle.borderTopWidth, 10) +
					parseInt( trStyle.borderBottomWidth, 10 )) === tr.offsetHeight;

				documentElement.removeChild (таблица);
			}
			вернуть надежныйTrDimensionsVal;
		}
	});
} )();


функция curCSS (элемент, имя, вычисляемый) {
	переменная ширина, minWidth, maxWidth, ret,
		isCustomProp = rcustomProp.test(имя),

		// Поддержка: Firefox 51+
		// Получение стиля перед каким-либо вычислением
		// исправляет проблему с получением неправильных значений
		// на отсоединенных элементах
		стиль = элемент.стиль;

	вычислено = вычислено || получить стили (элемент);

	// getPropertyValue нужен для:
	// .css('фильтр') (только IE 9, trac-12537)
	// .css('--customProperty) (gh-3144)
	если (вычислено) {

		// Поддержка: IE <=9 - 11+
		// IE поддерживает только `"float"` в `getPropertyValue`; в вычисляемых стилях
		// он доступен только как `"cssFloat"`. Мы больше не изменяем свойства
		// отправляется в `.css()`, кроме camelCasing, поэтому нам нужно проверить оба.
		// Обычно это создает разницу в поведении: если
		// `getPropertyValue` возвращает пустую строку, возвращаемое значение
		// по `.css()` будет `undefined`. Это обычно имеет место для
		// несвязанные элементы. Однако в IE даже отключенные элементы
		// без стилей возвращаем `"none"` для `getPropertyValue ("float")`
		ret = вычисленное.getPropertyValue(имя) || вычислено [имя];

		если ( isCustomProp && рет ) {

			// Поддержка: Firefox 105+, Chrome <=105+
			// Спецификация требует обрезки пробелов для пользовательских свойств (gh-4926).
			// Firefox обрезает только начальные пробелы. Хром просто рушится
			// начальные и конечные пробелы в один пробел.
			//
			// Возврат к `undefined`, если возвращена пустая строка.
			// Это сворачивает отсутствующее определение с определенным свойством
			// и устанавливаем пустую строку, но стандартного API нет
			// что позволяет нам различать их без потери производительности
			// и возврат `undefined` согласуется со старым jQuery.
			//
			// rtrimCSS обрабатывает U+000D CARRIAGE RETURN и U+000C FORM FEED
			// как пробел, а в CSS нет, но это не проблема
			// потому что предварительная обработка CSS заменяет их на U+000A LINE FEED
			// (что *является* пробелом CSS)
			// https://www.w3.org/TR/css-syntax-3/#input-preprocessing
			ret = ret.replace(rtrimCSS, "$1") || неопределенный;
		}

		если ( ret === "" && !isAttached (элемент )) {
			ret = jQuery.style(элемент, имя);
		}

		// Дань "потрясающему взлому Дина Эдвардса"
		// Браузер Android возвращает процент для некоторых значений,
		// но ширина кажется надежной в пикселях.
		// Это противоречит черновой спецификации CSSOM:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name )) {

			// Запоминаем исходные значения
			ширина = стиль.ширина;
			minWidth = стиль.minWidth;
			maxWidth = стиль.maxWidth;

			// Вставляем новые значения, чтобы получить вычисленное значение
			style.minWidth = style.maxWidth = style.width = ret;
			рет = вычисленная ширина;

			// Вернуть измененные значения
			стиль.ширина = ширина;
			стиль.minWidth = минШирина;
			стиль.maxWidth = maxWidth;
		}
	}

	вернуть ret !== не определено?

		// Поддержка: только IE <=9–11
		// IE возвращает значение zIndex как целое число.
		рет + "" :
		рет;
}


функция addGetHookIf (условиеFn, ловушкаFn) {

	// Определяем хук, при первом запуске проверим, действительно ли он нужен.
	возвращаться {
		получить: функция () {
			если (условиеFn()) {

				// Хук не нужен (или его невозможно использовать из-за
				// к отсутствующей зависимости), удалите ее.
				удалить это.получить;
				возвращаться;
			}

			// Нужен хук; переопределите его, чтобы тест поддержки больше не выполнялся.
			return (this.get = hookFn).apply(this, arguments);
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	пустой стиль = документ.создатьЭлемент("div").стиль,
	вендорпропс = {};

// Возвращаем свойство с префиксом поставщика или неопределенное
функция vendorPropName (имя) {

	// Проверяем имена с префиксом поставщика
	var capName = имя[ 0 ].toUpperCase() + имя.slice( 1 ),
		я = cssPrefixes.length;

	в то время как я-- ) {
		имя = cssPrefixes[i] + capName;
		если (имя в emptyStyle) {
			вернуть имя;
		}
	}
}

// Возвращаем потенциально сопоставленный jQuery.cssProps или свойство с префиксом поставщика
функция finalPropName (имя) {
	var final = jQuery.cssProps[имя] || vendorProps[имя];

	если (окончательно) {
		вернуться в финал;
	}
	если (имя в emptyStyle) {
		вернуть имя;
	}
	return vendorProps[имя] = vendorPropName(имя) || имя;
}


вар

	// Можно поменять местами, если отображение отсутствует или начинается с таблицы
	// кроме "table", "table-cell" или "table-caption"
	// См. здесь отображаемые значения: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(нет|таблица(?!-c[ea]).+)/,
	cssShow = { позиция: "абсолютная", видимость: "скрытая", отображение: "заблокированная" },
	cssNormalTransform = {
		letterSpacing: "0",
		Вес шрифта: "400"
	};

функция setPositiveNumber(_elem, значение, вычесть) {

	// Любые относительные (+/-) значения уже были
	// нормализовано на данный момент
	var соответствует = rcssNum.exec (значение);
	ответные матчи?

		// Защита от неопределенного "вычитания", например, при использовании как в cssHooks
		Math.max( 0, соответствует [ 2 ] - ( вычесть || 0 )) + ( соответствует [ 3 ] || "px") :
		ценить;
}

функция boxModelAdjustment (элемент, измерение, поле, isBorderBox, стили, вычисленное значение) {
	var i = размер === "ширина" ? 1 : 0,
		дополнительно = 0,
		дельта = 0;

	// Регулировка может не понадобиться
	если ( коробка === ( isBorderBox ? "граница" : "содержимое" )) {
		вернуть 0;
	}

	для (; я < 4; я += 2) {

		// Обе блочные модели исключают маржу
		если (поле === "маржа") {
			delta += jQuery.css(elem, box + cssExpand[i], true, styles);
		}

		// Если мы попадаем сюда с полем содержимого, мы ищем «заполнение», «границу» или «маржу».
		если ( !isBorderBox ) {

			// Добавляем заполнение
			delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

			// Для «границы» или «маржи» добавьте границу
			если ( поле !== "заполнение" ) {
				delta += jQuery.css(элемент, "граница" + cssExpand[i] + "Ширина", правда, стили);

			// Но все равно отслеживаем в противном случае
			} еще {
				extra += jQuery.css(элемент, "граница" + cssExpand[i] + "Ширина", правда, стили);
			}

		// Если мы попадаем сюда с рамкой (контент + отступ + граница), мы ищем «контент» или
		// "заполнение" или "маржа"
		} еще {

			// Для "контента" вычесть отступ
			если (коробка === "содержание") {
				delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
			}

			// Для «контента» или «отступа» вычесть границу
			если ( поле !== "маржа" ) {
				delta -= jQuery.css(элемент, "граница" + cssExpand[i] + "Ширина", правда, стили);
			}
		}
	}

	// Учет положительного отступа прокрутки блока содержимого при запросе путем предоставления ComputedVal
	если ( !isBorderBox && вычисленное значение >= 0 ) {

		// offsetWidth/offsetHeight — это округленная сумма содержимого, отступов, полосы прокрутки и границы
		// Предполагая целочисленный интервал прокрутки, вычитаем остаток и округляем в меньшую сторону
		delta += Math.max( 0, Math.ceil(
			элемент [ "смещение" + размер [ 0 ].toUpperCase () + размер. срез ( 1 ) ] -
			вычисленное значение -
			дельта -
			дополнительный -
			0,5

		// Если offsetWidth/offsetHeight неизвестен, то мы не можем определить полосу прокрутки блока содержимого
		// Используйте явный ноль, чтобы избежать NaN (gh-3964)
		)) || 0;
	}

	обратная дельта;
}

функция getWidthOrHeight (элемент, измерение, экстра) {

	// Начать с вычисляемого стиля
	вар стили = getStyles (элемент),

		// Чтобы избежать форсирования перекомпоновки, извлекайте boxSizing только тогда, когда это необходимо (gh-4322).
		// Поддельное поле содержимого, пока мы не узнаем, что это необходимо, чтобы узнать истинное значение.
		boxSizingNeeded = !support.boxSizingReliable() || дополнительный,
		isBorderBox = boxSizingNeeded &&
			jQuery.css(elem, "boxSizing", false, styles) === "граница-бокс",
		значениеIsBorderBox = isBorderBox,

		val = curCSS (элемент, измерение, стили),
		offsetProp = "смещение" + размер [0].toUpperCase() + размер.срез (1);

	// Поддержка: Firefox <=54
	// Возвращаем сбивающее с толку непиксельное значение или симулируем невежество, если это уместно.
	если ( rnumnonpx.test ( val ) ) {
		если (! дополнительно) {
			возвращаемое значение;
		}
		вал = "авто";
	}


	// Поддержка: только IE 9–11
	// Используйте offsetWidth/offsetHeight, когда размер блока ненадежен.
	// В этих случаях вычисленное значение можно считать пограничным.
	если ( ( !support.boxSizingReliable() && isBorderBox ||

		// Поддержка: IE 10–11+, Edge 15–18+
		// IE/Edge неправильно сообщает `getComputedStyle` строк таблицы с шириной/высотой
		// устанавливается в CSS, в то время как свойства `offset*` сообщают правильные значения.
		// Интересно, что в некоторых случаях IE 9 не страдает от этой проблемы.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Возврат к offsetWidth/offsetHeight, когда значение "auto"
		// Это происходит для встроенных элементов без явных настроек (gh-3571)
		значение === "авто" ||

		// Поддержка: Android <=4.1 - только 4.3
		// Также используйте offsetWidth/offsetHeight для неверных встроенных размеров (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles) === "inline" ) &&

		// Убедитесь, что элемент виден и подключен
		элемент.getClientRects().length ) {

		isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

		// Где возможно, offsetWidth/offsetHeight приблизительные размеры рамки.
		// Там, где это недоступно (например, SVG), предположить ненадежный размер блока и интерпретировать
		// полученное значение в качестве измерения блока содержимого.
		valueIsBorderBox = offsetProp в элементе;
		если ( valueIsBorderBox ) {
			val = элемент [offsetProp];
		}
	}

	// Нормализовать "" и автоматически
	значение = parseFloat(значение) || 0;

	// Корректируем блочную модель элемента
	возврат (значение +
		коробкаМодельРегулировка(
			элемент,
			измерение,
			дополнительный || ( isBorderBox ? "граница" : "содержимое" ),
			значениеIsBorderBox,
			стили,

			// Предоставление текущего вычисленного размера для запроса расчета ширины полосы прокрутки (gh-3589)
			вал
		)
	) + "пкс";
}

jQuery.extend( {

	// Добавляем хуки свойств стиля для переопределения значения по умолчанию
	// поведение при получении и установке свойства стиля
	cssHooks: {
		непрозрачность: {
			получить: функция (элемент, вычисляется) {
				если (вычислено) {

					// Мы всегда должны получать число из непрозрачности
					var ret = curCSS(элемент, "непрозрачность");
					вернуть рет === "" ? "1": возврат;
				}
			}
		}
	},

	// Не добавляйте автоматически "px" к этим возможно безразмерным свойствам
	cssNumber: {
		"animationIterationCount": правда,
		"columnCount": правда,
		"fillOpacity": правда,
		"flexGrow": правда,
		"flexShrink": правда,
		"Вес шрифта": правда,
		"gridArea": ​​правда,
		"gridColumn": правда,
		"gridColumnEnd": правда,
		"gridColumnStart": правда,
		"gridRow": правда,
		"gridRowEnd": правда,
		"gridRowStart": правда,
		"lineHeight": правда,
		"непрозрачность": правда,
		"порядок": правда,
		"сироты": правда,
		"вдовы": правда,
		"zIndex": правда,
		"зум": правда
	},

	// Добавляем свойства, имена которых вы хотите исправить раньше
	// установка или получение значения
	cssProps: {},

	// Получить и установить свойство стиля на узле DOM
	стиль: функция (элемент, имя, значение, экстра) {

		// Не устанавливайте стили для текста и комментариев
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			возвращаться;
		}

		// Убедитесь, что мы работаем с правильным именем
		вар рет, тип, крючки,
			origName = camelCase(имя),
			isCustomProp = rcustomProp.test(имя),
			стиль = элемент.стиль;

		// Убедитесь, что мы работаем с правильным именем. мы не
		// хотим запросить значение, если это пользовательское свойство CSS
		// так как они определяются пользователем.
		если ( !isCustomProp ) {
			name = finalPropName(originName);
		}

		// Получает хук для версии с префиксом, затем для версии без префикса
		крючки = jQuery.cssHooks[имя] || jQuery.cssHooks[название_источника];

		// Проверяем, устанавливаем ли мы значение
		если ( значение !== не определено ) {
			тип = тип значения;

			// Преобразование "+=" или "-=" в относительные числа (trac-7345)
			if ( type === "string" && ( ret = rcssNum.exec( value )) && ret[ 1 ] ) {
				значение = AdjustCSS (элемент, имя, ret);

				// Исправляет ошибку trac-9237
				тип = "число";
			}

			// Убедитесь, что значения null и NaN не установлены (trac-7116)
			если ( значение == null || значение !== значение ) {
				возвращаться;
			}

			// Если было передано число, добавьте единицу измерения (за исключением некоторых свойств CSS)
			// Проверка isCustomProp может быть удалена в jQuery 4.0, когда мы только автоматически добавляем
			// "px" на несколько жестко заданных значений.
			если ( тип === "число" && !isCustomProp ) {
				значение += рет && рет[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// свойства background-* влияют на исходные значения клона
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				стиль [имя] = "наследовать";
			}

			// Если хук был предоставлен, используйте это значение, в противном случае просто установите указанное значение
			if ( !hooks || !( "установить" в хуки ) ||
				(значение = hooks.set(элемент, значение, экстра)) !== не определено) {

				если ( isCustomProp ) {
					style.setProperty(имя, значение);
				} еще {
					стиль[имя] = значение;
				}
			}

		} еще {

			// Если был предоставлен хук, получаем невычисленное значение оттуда
			если ( крючки && "получить" в крючках &&
				( ret = hooks.get( elem, false, extra )) !== undefined ) {

				возврат рет;
			}

			// В противном случае просто получить значение из объекта стиля
			вернуть стиль [имя];
		}
	},

	css: функция (элемент, имя, дополнительные, стили) {
		вар вал, число, крючки,
			origName = camelCase(имя),
			isCustomProp = rcustomProp.test(имя);

		// Убедитесь, что мы работаем с правильным именем. мы не
		// хотим изменить значение, если это пользовательское свойство CSS
		// так как они определяются пользователем.
		если ( !isCustomProp ) {
			name = finalPropName(originName);
		}

		// Попробуйте имя с префиксом, за которым следует имя без префикса
		крючки = jQuery.cssHooks[имя] || jQuery.cssHooks[название_источника];

		// Если был предоставлен хук, получаем оттуда вычисленное значение
		если ( крючки && "получить" в крючках ) {
			val = hooks.get(элемент, истина, экстра);
		}

		// В противном случае, если существует способ получить вычисленное значение, используйте его
		если (значение === не определено) {
			val = curCSS(элемент, имя, стили);
		}

		// Преобразование "нормального" в вычисленное значение
		if ( val === "normal" && имя в cssNormalTransform ) {
			val = cssNormalTransform[имя];
		}

		// Сделать числовым, если принудительно или был указан квалификатор, а val выглядит числовым
		если ( дополнительно === "" || дополнительно ) {
			число = parseFloat (значение);
			вернуть экстра === истина || конечен (число)? число || 0: значение;
		}

		возвращаемое значение;
	}
});

jQuery.each(["высота", "ширина"], функция(_i, размер) {
	jQuery.cssHooks [размер] = {
		получить: функция (элемент, вычисляемый, дополнительный) {
			если (вычислено) {

				// Некоторые элементы могут иметь информацию о размерах, если мы их невидимо показываем
				// но он должен иметь текущий стиль отображения, который принесет пользу
				вернуть rdisplayswap.test(jQuery.css(elem, "display")) &&

					// Поддержка: Safari 8+
					// Столбцы таблицы в Safari имеют ненулевое значение offsetWidth и ноль
					// getBoundingClientRect().width, если отображение не изменилось.
					// Поддержка: только IE <= 11
					// Запуск getBoundingClientRect на отключенном узле
					// в IE выдает ошибку.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					своп (элемент, cssShow, функция () {
						вернуть getWidthOrHeight(элемент, измерение, экстра);
					} ):
					getWidthOrHeight(элемент, размер, дополнительный);
			}
		},

		набор: функция (элемент, значение, экстра) {
			вар совпадения,
				стили = получить стили (элемент),

				// Читать styles.position только в том случае, если тест может провалиться
				// чтобы избежать принудительного перекомпоновки.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					стили.позиция === "абсолютный",

				// Чтобы избежать принудительного перекомпоновки, извлекайте boxSizing только тогда, когда он нам нужен (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || дополнительный,
				isBorderBox = boxSizingNeeded &&
					jQuery.css(elem, "boxSizing", false, styles) === "граница-бокс",
				вычесть = прибавить?
					коробкаМодельРегулировка(
						элемент,
						измерение,
						дополнительный,
						пограничный бокс,
						стили
					):
					0;

			// Учет ненадежных размеров рамки путем сравнения смещения* с вычисленным и
			// имитация блока содержимого для получения границы и заполнения (gh-3699)
			если ( isBorderBox && scrollboxSizeBuggy ) {
				вычесть -= Math.ceil(
					элемент [ "смещение" + размер [ 0 ].toUpperCase () + размер. срез ( 1 ) ] -
					parseFloat (стили [размерность]) -
					boxModelAdjustment(элемент, размер, "граница", ложь, стили) -
					0,5
				);
			}

			// Преобразование в пиксели, если требуется корректировка значения
			если (вычесть && (совпадения = rcssNum.exec(значение)) &&
				( соответствует [ 3 ] || "px" ) !== "px" ) {

				elem.style[размер] = значение;
				значение = jQuery.css (элемент, измерение);
			}

			вернуть setPositiveNumber(элемент, значение, вычесть);
		}
	};
});

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	функция (элемент, вычисляется) {
		если (вычислено) {
			return ( parseFloat( curCSS( elem, "marginLeft") ) ||
				elem.getBoundingClientRect().left -
					своп (элемент, { marginLeft: 0 }, функция () {
						вернуть elem.getBoundingClientRect().left;
					} )
			) + "пкс";
		}
	}
);

// Эти хуки используются анимацией для раскрытия свойств
jQuery.каждый( {
	допуск: "",
	заполнение: "",
	ширина рамки"
}, функция(префикс, суффикс) {
	jQuery.cssHooks[префикс + суффикс] = {
		расширить: функция (значение) {
			переменная я = 0,
				расширен = {},

				// Предполагается одно число, если не строка
				части = тип значения === "строка" ? value.split( " " ): [значение];

			для ( ; я < 4; я ++ ) {
				расширенный [префикс + cssExpand[i] + суффикс] =
					части[ я ] || части[ я - 2 ] || части [ 0 ];
			}

			возврат расширен;
		}
	};

	если ( префикс !== "маржа" ) {
		jQuery.cssHooks[префикс + суффикс].set = setPositiveNumber;
	}
});

jQuery.fn.extend( {
	css: функция (имя, значение) {
		вернуть доступ(это, функция(элемент, имя, значение) {
			вар стили, Лен,
				карта = {},
				я = 0;

			если ( Array.isArray ( имя ) ) {
				стили = получить стили (элемент);
				длина = имя.длина;

				for ( ; я < len; я ++ ) {
					map[имя[i]] = jQuery.css(элемент, имя[i], ложь, стили);
				}

				карта возврата;
			}

			возвращаемое значение !== не определено?
				jQuery.style(элемент, имя, значение):
				jQuery.css(элемент, имя);
		}, имя, значение, arguments.length > 1 );
	}
});


функция Tween (элемент, параметры, опора, конец, смягчение) {
	вернуть новый Tween.prototype.init(elem, options, prop, end, easing);
}
jQuery.Tween = твин;

Твин.прототип = {
	конструктор: Твин,
	инициализация: функция (элемент, параметры, опора, конец, ослабление, единица измерения) {
		этот.элемент = элемент;
		this.prop = опора;
		this.easing = смягчение || jQuery.easing._default;
		this.options = варианты;
		this.start = this.now = this.cur();
		это.конец = конец;
		это.единица = единица || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	курс: функция () {
		var hooks = Tween.propHooks[this.prop];

		вернуть хуки && hooks.get ?
			hooks.get(это):
			Tween.propHooks._default.get(это);
	},
	запустить: функция (проценты) {
		вар облегченный,
			крючки = Tween.propHooks[this.prop];

		если ( this.options.duration ) {
			this.pos = облегченный = jQuery.easing[ this.easing ](
				процент, this.options.duration * процент, 0, 1, this.options.duration
			);
		} еще {
			this.pos = облегченный = процент;
		}
		this.now = ( this.end - this.start ) * облегченный + this.start;

		если ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		если ( крючки && hooks.set ) {
			hooks.set(это);
		} еще {
			Tween.propHooks._default.set(это);
		}
		вернуть это;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_по умолчанию: {
		получить: функция (твин) {
			переменный результат;

			// Использовать свойство элемента напрямую, если это не элемент DOM,
			// или когда не существует соответствующего свойства стиля.
			если ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				вернуть tween.elem [ tween.prop ];
			}

			// Передача пустой строки в качестве третьего параметра в .css автоматически
			// попытка parseFloat и возврат к строке, если синтаксический анализ не удался.
			// Простые значения, такие как "10px", анализируются как Float;
			// сложные значения, такие как "rotate(1rad)", возвращаются как есть.
			результат = jQuery.css(tween.elem, tween.prop, "");

			// Пустые строки, null, undefined и "auto" преобразуются в 0.
			вернуть !результат || результат === "авто" ? 0 : результат;
		},
		набор: функция (твин) {

			// Использовать пошаговый хук для обратной совместимости.
			// Используйте cssHook, если он есть.
			// Используйте .style, если он доступен, и используйте простые свойства, если они доступны.
			если (jQuery.fx.step[tween.prop]) {
				jQuery.fx.step[ tween.prop ]( tween );
			} иначе если ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null )) {
				jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
			} еще {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Поддержка: только IE <=9
// Подход на основе паники к настройке вещей на отключенных узлах
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	набор: функция (твин) {
		если ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	линейный: функция ( р ) {
		вернуть р;
	},
	качели: функция ( р ) {
		вернуть 0,5 - Math.cos(p * Math.PI)/2;
	},
	_default: "качели"
};

jQuery.fx = Tween.prototype.init;

// Обратная совместимость <1,8 точка расширения
jQuery.fx.step = {};




вар
	fxNow, в процессе,
	rfxtypes = /^(?:переключить|показать|скрыть)$/,
	rrun = /queueHooks$/;

расписание функций () {
	если (в процессе) {
		если (document.hidden === false && window.requestAnimationFrame) {
			window.requestAnimationFrame (расписание);
		} еще {
			window.setTimeout(расписание, jQuery.fx.interval);
		}

		jQuery.fx.tick();
	}
}

// Анимации, созданные синхронно, будут выполняться синхронно
функция createFxNow() {
	window.setTimeout (функция () {
		fxNow = не определено;
	});
	возврат (fxNow = Date.now());
}

// Генерируем параметры для создания стандартной анимации
функция genFx(тип, includeWidth) {
	вар который,
		я = 0,
		атрибуты = {высота: тип};

	// Если мы включаем ширину, значение шага равно 1, чтобы сделать все значения cssExpand,
	// в противном случае значение шага равно 2, чтобы пропустить левый и правый
	включаемая ширина = включаемая ширина? 1 : 0;
	for (; я < 4; я += 2 - includeWidth) {
		который = cssExpand[i];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	если (включитьширину) {
		attrs.opacity = attrs.width = тип;
	}

	вернуть атрибуты;
}

функция createTween (значение, опора, анимация) {
	вар твин,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		индекс = 0,
		длина = коллекция.длина;
	for ( ; индекс < длина; индекс ++ ) {
		if ( ( tween = collection[index].call(анимация, реквизит, значение)) ) {

			// Мы закончили с этим свойством
			вернуть твин;
		}
	}
}

функция defaultPrefilter (элемент, реквизит, опции) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "ширина" в реквизите || "высота" в реквизите,
		аним = это,
		ориг = {},
		стиль = элемент.стиль,
		скрытый = elem.nodeType && isHiddenWithinTree (элемент),
		dataShow = dataPriv.get(elem, "fxshow");

	// Анимации с пропуском очереди перехватывают ловушки fx
	если (!opts.queue) {
		крючки = jQuery._queueHooks(elem, "fx");
		если ( hooks.unqueued == null ) {
			крючки.не в очереди = 0;
			старый огонь = крючки.пустой.огонь;
			крючки.пусто.огонь = функция () {
				если ( !hooks.unqueued ) {
					старый огонь();
				}
			};
		}
		хуки.unqueued++;

		аним.всегда (функция () {

			// Убедитесь, что полный обработчик вызван до того, как это завершится
			аним.всегда (функция () {
				hooks.unqueueed--;
				если ( !jQuery.queue(элемент, "fx").length ) {
					крючки.пусто.огонь();
				}
			});
		});
	}

	// Обнаружение показа/скрытия анимации
	для (опора в реквизите) {
		значение = реквизит [реквизит];
		если ( rfxtypes.test ( значение ) ) {
			удалить реквизит [реквизит];
			переключить = переключить || значение === "переключить";
			если ( значение === ( скрыто ? "скрыть" : "показать") ) {

				// Притвориться скрытым, если это "шоу" и
				// все еще есть данные из остановленного показа/скрытия
				если (значение === "показать" && dataShow && dataShow[ prop ] !== undefined ) {
					скрытый = истина;

				// Игнорировать все остальные неактивные данные отображения/скрытия
				} еще {
					продолжать;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style (элемент, реквизит);
		}
	}

	// Выход из ситуации, если это не работает, как .hide().hide()
	propTween = !jQuery.isEmptyObject( реквизит );
	если (!propTween && jQuery.isEmptyObject(оригинал)) {
		возвращаться;
	}

	// Ограничить стили "переполнения" и "отображения" во время анимации блоков
	если ( isBox && elem.nodeType === 1 ) {

		// Поддержка: IE <=9–11, Edge 12–15
		// Запишите все 3 атрибута переполнения, потому что IE не выводит сокращение
		// из overflowX и overflowY с одинаковыми значениями, а Edge просто отражает
		// значение overflowX там.
		opts.overflow = [style.overflow, style.overflowX, style.overflowY];

		// Определяем тип отображения, предпочитая старые данные отображения/скрытия каскаду CSS
		restoreDisplay = dataShow && dataShow.display;
		если (restoreDisplay == ноль) {
			restoreDisplay = dataPriv.get(elem, "display");
		}
		дисплей = jQuery.css (элемент, "дисплей");
		если (отобразить === "нет") {
			если ( восстановить дисплей ) {
				дисплей = восстановить дисплей;
			} еще {

				// Получить непустое значение (значения), временно форсировав видимость
				showHide([элемент], true);
				restoreDisplay = elem.style.display || восстановить дисплей;
				дисплей = jQuery.css (элемент, "дисплей");
				показатьСкрыть([элемент]);
			}
		}

		// Анимировать встроенные элементы как встроенный блок
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			если (jQuery.css(элемент, "с плавающей запятой") === "нет" ) {

				// Восстанавливаем исходное отображаемое значение в конце чистой анимации показа/скрытия
				если ( !propTween ) {
					аним.сделано (функция () {
						style.display = восстановить дисплей;
					});
					если (restoreDisplay == ноль) {
						дисплей = стиль.дисплей;
						restoreDisplay = display === "none" ? "" : отображать;
					}
				}
				style.display = "встроенный блок";
			}
		}
	}

	если (opts.overflow) {
		style.overflow = "скрытый";
		аним.всегда (функция () {
			style.overflow = opts.overflow[0];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// Реализовать анимацию показа/скрытия
	пропТвин = ложь;
	для (опора в оригинале) {

		// Общие настройки отображения/скрытия анимации этого элемента
		если ( !propTween ) {
			если (показать данные) {
				если («скрыто» в dataShow) {
					скрытый = dataShow.скрытый;
				}
			} еще {
				dataShow = dataPriv.access(elem, "fxshow", {display: restoreDisplay});
			}

			// Сохраняем скрытый/видимый для переключения, поэтому `.stop().toggle()` "меняет направление"
			если (переключить) {
				dataShow.hidden = !скрытый;
			}

			// Показать элементы перед их анимацией
			если (скрытый) {
				showHide([элемент], true);
			}

			/* eslint-disable no-loop-func */

			аним.сделано (функция () {

				/* eslint-enable no-loop-func */

				// Последний шаг анимации «скрытия» — это скрытие элемента
				если (! скрыто) {
					показатьСкрыть([элемент]);
				}
				dataPriv.remove(elem, "fxshow");
				для (опора в оригинале) {
					jQuery.style(elem, prop, orig[prop]);
				}
			});
		}

		// Настройка для каждого свойства
		propTween = createTween(скрытый? dataShow[проп]: 0, проп, анимация);
		если ( !( опора в dataShow )) {
			dataShow[реквизит] = propTween.start;
			если (скрытый) {
				propTween.end = propTween.start;
				пропТвин.старт = 0;
			}
		}
	}
}

функция propFilter (реквизит, specialEasing) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing и расширение пропуска cssHook
	для (индекс в реквизите) {
		имя = camelCase(индекс);
		ослабление = специальное смягчение [имя];
		значение = реквизит [индекс];
		если ( Array.isArray ( значение ) ) {
			ослабление = значение [ 1 ];
			значение = реквизит [индекс] = значение [0];
		}

		если ( индекс !== имя ) {
			реквизит [имя] = значение;
			удалить реквизит [индекс];
		}

		крючки = jQuery.cssHooks[имя];
		if (хуки && "расширить" в хуках) {
			значение = крючки.расширить (значение);
			удалить реквизит [имя];

			// Не совсем $.extend, это не перезапишет существующие ключи.
			// Повторное использование «индекса», потому что у нас есть правильное «имя»
			for (индекс в значении) {
				если (!(индекс в реквизите)) {
					реквизит [индекс] = значение [индекс];
					specialEasing[индекс] = смягчение;
				}
			}
		} еще {
			specialEasing[имя] = смягчение;
		}
	}
}

функция анимации (элемент, свойства, параметры) {
	переменный результат,
		остановился,
		индекс = 0,
		длина = Animation.prefilters.length,
		отложенный = jQuery.Deferred().always( function() {

			// Не совпадать с элементом в селекторе :animated
			удалить тик.элемент;
		} ),
		отметьте = функция () {
			если (остановлено) {
				вернуть ложь;
			}
			переменная текущее время = fxNow || создатьFxNow(),
				оставшееся = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Поддержка: только Android 2.3
				// Устаревшая ошибка сбоя не позволяла нам использовать `1 - ( 0.5 || 0 )` (trac-12497)
				temp = оставшееся / анимация.длительность || 0,
				процент = 1 - темп,
				индекс = 0,
				длина = анимация.tweens.length;

			for ( ; индекс < длина; индекс ++ ) {
				анимация.tweens[индекс].run(проценты);
			}

			deferred.notifyWith(элемент, [анимация, процент, оставшееся]);

			// Если есть что сделать, выходим
			если ( процент < 1 && длина ) {
				вернуть оставшееся;
			}

			// Если это была пустая анимация, синтезируем финальное уведомление о ходе выполнения
			если ( !длина ) {
				deferred.notifyWith(элемент, [анимация, 1, 0]);
			}

			// Разрешить анимацию и сообщить о ее завершении
			deferred.resolveWith (элемент, [анимация]);
			вернуть ложь;
		},
		анимация = deferred.promise( {
			элемент: элемент,
			реквизит: jQuery.extend({}, свойства),
			опции: jQuery.extend(правда, {
				специальныйEasing: {},
				смягчение: jQuery.easing._default
			}, параметры ),
			originalProperties: свойства,
			originalOptions: варианты,
			Время начала: fxNow || создатьFxNow(),
			продолжительность: options.duration,
			подростки: [],
			createTween: функция (опора, конец) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					анимация.opts.specialEasing[ prop ] || анимация.opts.easing );
				анимация.tweens.push( анимация );
				вернуть твин;
			},
			стоп: функция (gotoEnd) {
				переменный индекс = 0,

					// Если мы идём до конца, то хотим запустить все твины
					// иначе пропускаем эту часть
					длина = перейти к концу? анимация.tweens.length : 0;
				если (остановлено) {
					вернуть это;
				}
				остановлен = истина;
				for ( ; индекс < длина; индекс ++ ) {
					анимация.tweens[индекс].run(1);
				}

				// Разрешить, когда мы воспроизвели последний кадр; в противном случае отклонить
				если (перейти к концу) {
					deferred.notifyWith(элемент, [анимация, 1, 0]);
					deferred.resolveWith(elem, [анимация, gotoEnd]);
				} еще {
					deferred.rejectWith(elem, [анимация, gotoEnd]);
				}
				вернуть это;
			}
		} ),
		реквизит = анимация.реквизит;

	propFilter(реквизиты, анимация.opts.specialEasing);

	for ( ; индекс < длина; индекс ++ ) {
		результат = Animation.prefilters[ индекс ].call( анимация, элемент, реквизит, анимация. параметры );
		если (результат) {
			если (isFunction(result.stop)) {
				jQuery._queueHooks(animation.elem, animation.opts.queue).stop =
					результат.stop.bind(результат);
			}
			вернуть результат;
		}
	}

	jQuery.map (реквизит, createTween, анимация);

	если ( isFunction ( анимация.opts.start )) {
		анимация.opts.start.call(элемент, анимация);
	}

	// Прикрепляем обратные вызовы из опций
	анимация
		.progress( анимация.opts.progress )
		.done( анимация.opts.done, анимация.opts.complete )
		.fail(анимация.opts.fail)
		.always( анимация.opts.always );

	jQuery.fx.таймер(
		jQuery.extend (галочка, {
			элемент: элемент,
			анимация: анимация,
			очередь: анимация.opts.queue
		} )
	);

	обратная анимация;
}

jQuery.Animation = jQuery.extend( Анимация, {

	твинеры: {
		"*": [функция (реквизит, значение) {
			var tween = this.createTween(реквизит, значение);
			AdjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
			вернуть твин;
		} ]
	},

	твинер: функция (реквизит, обратный вызов) {
		если (isFunction (реквизит)) {
			обратный вызов = реквизит;
			реквизит = ["*"];
		} еще {
			props = props.match(rnothtmlwhite);
		}

		вар реквизит,
			индекс = 0,
			длина = реквизит.длина;

		for ( ; индекс < длина; индекс ++ ) {
			реквизит = реквизит[индекс];
			Animation.tweeners[ реквизит ] = Animation.tweeners[ реквизит ] || [];
			Animation.tweeners[ prop ].unshift(обратный вызов);
		}
	},

	префильтры: [ defaultPrefilter ],

	предварительный фильтр: функция (обратный вызов, добавление) {
		если ( предварить ) {
			Animation.prefilters.unshift(обратный вызов);
		} еще {
			Animation.prefilters.push(обратный вызов);
		}
	}
});

jQuery.speed = функция (скорость, смягчение, fn) {
	var opt = скорость && typeof скорость === "объект" ? jQuery.extend({}, скорость): {
		завершено: фн || !fn && смягчение ||
			isFunction( скорость ) && скорость,
		продолжительность: скорость,
		смягчение: fn && смягчение || смягчение && !isFunction( смягчение ) && смягчение
	};

	// Переходим в конечное состояние, если fx выключены
	если (jQuery.fx.off) {
		опт.длительность = 0;

	} еще {
		if ( typeof opt.duration !== "number" ) {
			если (opt.duration в jQuery.fx.speeds) {
				opt.duration = jQuery.fx.speeds[opt.duration];

			} еще {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Нормализовать opt.queue - true/undefined/null -> "fx"
	если ( opt.queue == null || opt.queue === true ) {
		опт.очередь = "FX";
	}

	// Очередь
	опт.старый = опт.полный;

	opt.complete = функция () {
		если (isFunction(opt.old)) {
			opt.old.call(это);
		}

		если (opt.queue) {
			jQuery.dequeue(это, opt.queue);
		}
	};

	вариант возврата;
};

jQuery.fn.extend( {
	fadeTo: функция (скорость, до, смягчение, обратный вызов) {

		// Показать все скрытые элементы после установки непрозрачности на 0
		вернуть this.filter(isHiddenWithinTree).css("непрозрачность", 0).show()

			// Анимация до указанного значения
			.end().animate({ непрозрачность: до}, скорость, смягчение, обратный вызов);
	},
	анимация: функция (реквизит, скорость, смягчение, обратный вызов) {
		пустая переменная = jQuery.isEmptyObject(проп),
			optall = jQuery.speed(скорость, смягчение, обратный вызов),
			делать анимацию = функция () {

				// Работаем с копией свойства, чтобы не было потеряно смягчение для каждого свойства
				var anim = Animation(это, jQuery.extend({}, prop), optall);

				// Пустые анимации или завершение разрешаются немедленно
				если (пусто || dataPriv.get(это, "завершить")) {
					аним.стоп(истина);
				}
			};

		doAnimation.finish = doAnimation;

		вернуть пустой || optall.queue === false ?
			этот.каждый( делать анимацию ):
			this.queue(optall.queue, doAnimation);
	},
	стоп: функция (тип, четкая очередь, переход в конец) {
		var stopQueue = функция (ловушки) {
			вар стоп = крюки.стоп;
			удалить хуки.стоп;
			стоп(перейти кконцу);
		};

		если ( тип типа !== "строка" ) {
			перейти в конец = очистить очередь;
			очистить очередь = тип;
			тип = не определено;
		}
		если (очистить очередь) {
			this.queue(тип || "fx", []);
		}

		вернуть this.each (функция () {
			var dequeue = истина,
				index = тип != null && type + "queueHooks",
				таймеры = jQuery.таймеры,
				данные = dataPriv.get (это);

			если ( индекс ) {
				если (данные [индекс] && данные [индекс]. стоп) {
					остановитьОчередь(данные[индекс]);
				}
			} еще {
				для (индекс в данных) {
					если (данные[индекс] && данные[индекс].stop && rrun.test(индекс)) {
						остановитьОчередь(данные[индекс]);
					}
				}
			}

			for (индекс = timers.length; индекс--;) {
				если ( таймеры[ индекс ].elem === это &&
					( тип == null || таймеры [ индекс ].queue === тип )) {

					таймеры[индекс].anim.stop(gotoEnd);
					исключить из очереди = ложь;
					timers.splice(индекс, 1);
				}
			}

			// Запустить следующий в очереди, если последний шаг не был принудительным.
			// Таймеры в настоящее время будут вызывать свои полные обратные вызовы, которые
			// будут удалены из очереди, но только если они были gotoEnd.
			если ( удалить из очереди || !gotoEnd ) {
				jQuery.dequeue(это, тип);
			}
		});
	},
	отделка: функция (тип) {
		если ( тип !== ложь ) {
			тип = тип || "Фекс";
		}
		вернуть this.each (функция () {
			переменный индекс,
				данные = dataPriv.get(это),
				очередь = данные [тип + "очередь"],
				крючки = данные [тип + "queueHooks"],
				таймеры = jQuery.таймеры,
				длина = очередь? длина очереди: 0;

			// Включить флаг завершения для личных данных
			data.finish = истина;

			// Сначала очистить очередь
			jQuery.queue(это, тип, []);

			если ( крючки && hooks.stop ) {
				hooks.stop.call(это, правда);
			}

			// Ищем активные анимации и завершаем их
			for (индекс = timers.length; индекс--;) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					таймеры[индекс].anim.stop(true);
					timers.splice(индекс, 1);
				}
			}

			// Ищем любые анимации в старой очереди и завершаем их
			for (индекс = 0; индекс <длина; индекс++) {
				если (очередь[индекс] && очередь[индекс].финиш) {
					очередь[индекс].finish.call(этот);
				}
			}

			// Отключаем флаг завершения
			удалить данные.финиш;
		});
	}
});

jQuery.each(["переключить", "показать", "скрыть"], функция(_i, имя) {
	var cssFn = jQuery.fn[имя];
	jQuery.fn[имя] = функция(скорость, смягчение, обратный вызов) {
		скорость возврата == ноль || typeof скорость === "логическое" ?
			cssFn.apply(это, аргументы):
			this.animate(genFx(имя, правда), скорость, смягчение, обратный вызов);
	};
});

// Генерируем ярлыки для пользовательских анимаций
jQuery.каждый( {
	слайдВниз: genFx ("показать"),
	слайдВверх: genFx("скрыть"),
	slideToggle: genFx («переключить»),
	fadeIn: { непрозрачность: "показать"},
	fadeOut: { непрозрачность: "скрыть" },
	fadeToggle: { непрозрачность: "переключить" }
}, функция (имя, реквизит) {
	jQuery.fn[имя] = функция(скорость, смягчение, обратный вызов) {
		вернуть this.animate(реквизиты, скорость, смягчение, обратный вызов);
	};
});

jQuery.timers = [];
jQuery.fx.tick = функция () {
	вар таймер,
		я = 0,
		таймеры = jQuery.timers;

	fxNow = Дата.сейчас();

	for ( ; я < timers.length; я ++ ) {
		таймер = таймеры[i];

		// Запустить таймер и безопасно удалить его, когда закончите (с возможностью внешнего удаления)
		если ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	если ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = не определено;
};

jQuery.fx.timer = функция (таймер) {
	jQuery.timers.push(таймер);
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = функция () {
	если (в процессе) {
		возвращаться;
	}

	в процессе = истина;
	расписание();
};

jQuery.fx.stop = функция () {
	в процессе = ноль;
};

jQuery.fx.скорости = {
	медленный: 600,
	быстро: 200,

	// Скорость по умолчанию
	_по умолчанию: 400
};


// На основе плагина Клинта Хелферса с разрешения.
jQuery.fn.delay = функция (время, тип) {
	время = jQuery.fx? jQuery.fx.скорости[время] || время: время;
	тип = тип || "Фекс";

	вернуть this.queue (тип, функция (следующий, перехватчики) {
		var timeout = window.setTimeout(следующее, время);
		крючки.stop = функция () {
			window.clearTimeout (время ожидания);
		};
	});
};


( функция () {
	вар ввод = документ.создатьЭлемент ("ввод" ),
		выберите = документ.создатьЭлемент («выбрать»),
		opt = select.appendChild(document.createElement("option" ));

	input.type = "флажок";

	// Поддержка: только Android <= 4.3
	// Значение по умолчанию для флажка должно быть "включено"
	support.checkOn = input.value !== "";

	// Поддержка: только IE <= 11
	// Должен получить доступ к selectedIndex, чтобы выбрать параметры по умолчанию
	support.optSelected = opt.selected;

	// Поддержка: только IE <= 11
	// Вход теряет свое значение после того, как становится радио
	ввод = документ.создатьЭлемент ("ввод");
	ввод.значение = "т";
	input.type = "радио";
	support.radioValue = input.value === "t";
} )();


вар булхук,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	атрибут: функция (имя, значение) {
		вернуть доступ (это, jQuery.attr, имя, значение, arguments.length > 1);
	},

	removeAttr: функция (имя) {
		вернуть this.each (функция () {
			jQuery.removeAttr(это, имя);
		});
	}
});

jQuery.extend( {
	атрибут: функция (элемент, имя, значение) {
		вар рет, крючки,
			nType = элемент.nodeType;

		// Не получать/устанавливать атрибуты для текстовых, комментариев и атрибутивных узлов
		если ( nType === 3 || nType === 8 || nType === 2 ) {
			возвращаться;
		}

		// Возврат к реквизиту, если атрибуты не поддерживаются
		если ( typeof elem.getAttribute === "undefined" ) {
			вернуть jQuery.prop(элемент, имя, значение);
		}

		// Хуки атрибутов определяются строчной версией
		// Берем нужный хук, если он определен
		если ( nType !== 1 || !jQuery.isXMLDoc(элемент) ) {
			ловушки = jQuery.attrHooks[ name.toLowerCase() ] ||
				(jQuery.expr.match.bool.test(name)? boolHook: undefined);
		}

		если ( значение !== не определено ) {
			если (значение === ноль) {
				jQuery.removeAttr(элемент, имя);
				возвращаться;
			}

			если ( крючки && "установить" в крючках &&
				( ret = hooks.set( элемент, значение, имя )) !== undefined ) {
				возврат рет;
			}

			elem.setAttribute(имя, значение + "");
			возвращаемое значение;
		}

		if ( ловушки && "получить" в ловушках && ( ret = hooks.get( elem, name )) !== null ) {
			возврат рет;
		}

		ret = jQuery.find.attr(элемент, имя);

		// Несуществующие атрибуты возвращают null, мы нормализуем их до undefined
		вернуть рет == ноль? не определено: возврат;
	},

	атрибуты: {
		тип: {
			набор: функция (элемент, значение) {
				if ( !support.radioValue && значение === "радио" &&
					имя_узла (элемент, "вход")) {
					var val = элемент.значение;
					elem.setAttribute("тип", значение);
					если (значение) {
						элемент.значение = значение;
					}
					возвращаемое значение;
				}
			}
		}
	},

	removeAttr: функция (элемент, значение) {
		имя вар,
			я = 0,

			// Имена атрибутов могут содержать пробельные символы, отличные от HTML
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = значение && value.match( rnothtmlwhite );

		если ( attrNames && elem.nodeType === 1 ) {
			в то время как ( ( ​​имя = attrNames [ я ++ ] ) ) {
				элемент.removeAttribute(имя);
			}
		}
	}
});

// Хуки для логических атрибутов
boolHook = {
	установить: функция (элемент, значение, имя) {
		если (значение === ложь) {

			// Удалить логические атрибуты, если установлено значение false
			jQuery.removeAttr(элемент, имя);
		} еще {
			элемент.setAttribute(имя, имя);
		}
		вернуть имя;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match(/\w+/g), функция(_i, имя) {
	var getter = attrHandle[ имя ] || jQuery.find.attr;

	attrHandle[имя] = функция(элемент, имя, isXML) {
		вар рет, ручка,
			имя нижнего регистра = имя.toLowerCase();

		если ( !isXML ) {

			// Избегайте бесконечного цикла, временно удаляя эту функцию из геттера
			ручка = attrHandle [нижний регистрИмя];
			attrHandle [нижний регистрИмя] = рет;
			ret = getter(элемент, имя, isXML) != null ?
				имя в нижнем регистре:
				нулевой;
			attrHandle [нижний регистрИмя] = дескриптор;
		}
		возврат рет;
	};
});




var rfocusable = /^(?:ввод|выбрать|текстовое поле|кнопка)$/i,
	rclickable = /^(?:a|область)$/i;

jQuery.fn.extend( {
	реквизит: функция (имя, значение) {
		вернуть доступ (это, jQuery.prop, имя, значение, arguments.length > 1);
	},

	removeProp: функция (имя) {
		вернуть this.each (функция () {
			удалить это [ jQuery.propFix [ имя ] || имя ];
		});
	}
});

jQuery.extend( {
	реквизит: функция (элемент, имя, значение) {
		вар рет, крючки,
			nType = элемент.nodeType;

		// Не получать/устанавливать свойства для текстовых, комментариев и атрибутивных узлов
		если ( nType === 3 || nType === 8 || nType === 2 ) {
			возвращаться;
		}

		если ( nType !== 1 || !jQuery.isXMLDoc(элемент) ) {

			// Фиксируем имя и прикрепляем хуки
			имя = jQuery.propFix[имя] || имя;
			крючки = jQuery.propHooks[имя];
		}

		если ( значение !== не определено ) {
			если ( крючки && "установить" в крючках &&
				( ret = hooks.set( элемент, значение, имя )) !== undefined ) {
				возврат рет;
			}

			возврат (элемент [имя] = значение);
		}

		if ( ловушки && "получить" в ловушках && ( ret = hooks.get( elem, name )) !== null ) {
			возврат рет;
		}

		вернуть элемент [имя];
	},

	пропХукс: {
		tabIndex: {
			получить: функция (элемент) {

				// Поддержка: только IE <=9–11
				// elem.tabIndex не всегда возвращает
				// правильное значение, если оно не было задано явно
				// Использовать правильное извлечение атрибутов (trac-12072)
				var tabindex = jQuery.find.attr(elem, "tabindex");

				если ( tabindex ) {
					вернуть parseInt( tabindex, 10 );
				}

				если (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					вернуть 0;
				}

				возврат -1;
			}
		}
	},

	пропФикс: {
		"для": "htmlДля",
		"класс": "имя класса"
	}
});

// Поддержка: только IE <= 11
// Доступ к свойству selectedIndex
// заставляет браузер соблюдать выбранную настройку
// на опционе
// Геттер гарантирует, что выбран вариант по умолчанию
// когда в optgroup
// для этого кода отключено правило eslint "no-unused-expressions"
// так как считает такие присоединения noop
если ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		получить: функция (элемент) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			если ( родитель && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			вернуть ноль;
		},
		набор: функция (элемент) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			если ( родитель ) {
				родитель.выбранныйиндекс;

				если (родитель.родительский узел) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.каждый([
	"вкладкаИндекс",
	"Только для чтения",
	"максимальная длина",
	"Интервал между ячейками",
	"заполнение ячейки",
	"промежуток строк",
	"колСпан",
	"использовать карту",
	"рамка",
	"Редактируемый контент"
], функция () {
	jQuery.propFix[this.toLowerCase()] = это;
});




	// Удаление и свертывание пробелов в соответствии со спецификацией HTML
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	функция stripAndCollapse (значение) {
		токены var = value.match( rnothtmlwhite ) || [];
		вернуть tokens.join («»);
	}


функция getClass(элемент) {
	вернуть elem.getAttribute && elem.getAttribute ("класс" ) || "";
}

функция classToArray (значение) {
	если ( Array.isArray ( значение ) ) {
		возвращаемое значение;
	}
	если (тип значения === "строка") {
		возвращаемое значение.match( rnothtmlwhite ) || [];
	}
	возвращаться [];
}

jQuery.fn.extend( {
	addClass: функция (значение) {
		var classNames, cur, curValue, className, i, finalValue;

		если ( isFunction ( значение ) ) {
			вернуть this.each ( функция ( j ) {
				jQuery(этот).добавитькласс(значение.вызов(этот, j, getClass(этот)));
			});
		}

		classNames = classToArray (значение);

		если ( classNames.length ) {
			вернуть this.each (функция () {
				curValue = getClass(этот);
				cur = this.nodeType === 1 && (" " + stripAndCollapse( curValue ) + " " );

				если ( курс ) {
					for ( я = 0; я < classNames.length; я ++ ) {
						className = classNames[ я ];
						если ( cur.indexOf (" " + className + " " ) < 0 ) {
							cur += className + " ";
						}
					}

					// Назначать только в том случае, если отличается, чтобы избежать ненужного рендеринга.
					finalValue = stripAndCollapse(cur);
					если ( curValue !== finalValue ) {
						this.setAttribute ("класс", finalValue);
					}
				}
			});
		}

		вернуть это;
	},

	removeClass: функция (значение) {
		var classNames, cur, curValue, className, i, finalValue;

		если ( isFunction ( значение ) ) {
			вернуть this.each ( функция ( j ) {
				jQuery(этот).removeClass(значение.вызов(это, j, getClass(этот)));
			});
		}

		если ( !arguments.length ) {
			вернуть this.attr ("класс", "");
		}

		classNames = classToArray (значение);

		если ( classNames.length ) {
			вернуть this.each (функция () {
				curValue = getClass(этот);

				// Это выражение здесь для лучшей сжимаемости (см. addClass)
				cur = this.nodeType === 1 && (" " + stripAndCollapse( curValue ) + " " );

				если ( курс ) {
					for ( я = 0; я < classNames.length; я ++ ) {
						className = classNames[ я ];

						// Удалить *все* экземпляры
						в то время как ( cur.indexOf (" " + className + " " ) > -1 ) {
							cur = cur.replace (" " + className + " ", " " );
						}
					}

					// Назначать только в том случае, если отличается, чтобы избежать ненужного рендеринга.
					finalValue = stripAndCollapse(cur);
					если ( curValue !== finalValue ) {
						this.setAttribute ("класс", finalValue);
					}
				}
			});
		}

		вернуть это;
	},

	toggleClass: функция (значение, stateVal) {
		var classNames, className, i, self,
			тип = тип значения,
			isValidValue = тип === "строка" || Массив.isArray(значение);

		если ( isFunction ( значение ) ) {
			вернуть this.each ( функция ( я ) {
				jQuery(это).toggleClass(
					value.call(это, я, getClass(это), stateVal),
					состояниеВал
				);
			});
		}

		if ( typeof stateVal === "boolean" && isValidValue ) {
			вернуть состояние Val ? this.addClass (значение): this.removeClass (значение);
		}

		classNames = classToArray (значение);

		вернуть this.each (функция () {
			если ( допустимое значение ) {

				// Переключение имен отдельных классов
				я = jQuery (это);

				for ( я = 0; я < classNames.length; я ++ ) {
					className = classNames[ я ];

					// Проверяем каждое заданное className, разделенный пробелами список
					если ( self.hasClass (имя класса )) {
						self.removeClass (имя класса);
					} еще {
						self.addClass (имя класса);
					}
				}

			// Переключить все имя класса
			} иначе если ( значение === не определено || тип === "логическое" ) {
				имя_класса = получитькласс(этот);
				если (имя класса) {

					// Сохраняем className, если установлено
					dataPriv.set(это, "__className__", className);
				}

				// Если у элемента есть имя класса или если нам передано `false`,
				// затем удалите все имя класса (если оно было, вышеприведенное сохранило его).
				// В противном случае вернуть то, что было ранее сохранено (если что-то),
				// возврат к пустой строке, если ничего не было сохранено.
				если (это.setAttribute) {
					this.setAttribute ("класс",
						имя класса || значение === ложь?
							"" :
							dataPriv.get(это, "__className__" ) || ""
					);
				}
			}
		});
	},

	hasClass: функция (селектор) {
		вар className, элемент,
			я = 0;

		className = " " + селектор + " ";
		в то время как ( ( ​​элемент = это [ я ++ ] ) ) {
			если ( elem.nodeType === 1 &&
				( " " + stripAndCollapse ( getClass ( элемент )) + " " ).indexOf ( className ) > -1 ) {
				вернуть истину;
			}
		}

		вернуть ложь;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend( {
	значение: функция (значение) {
		хуки var, ret, valueIsFunction,
			элемент = это[0];

		если ( !arguments.length ) {
			если (элемент) {
				ловушки = jQuery.valHooks[элемент.тип] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				если ( крючки &&
					"получить" в хуках &&
					( ret = hooks.get(элемент, "значение" )) !== не определено
				) {
					возврат рет;
				}

				рет = элемент.значение;

				// Обработка наиболее распространенных строковых случаев
				если ( typeof рет === "строка" ) {
					вернуть ret.replace( rreturn, "" );
				}

				// Обработка случаев, когда значение равно null/undef или числу
				вернуть рет == ноль? "" : возврат;
			}

			возвращаться;
		}

		значениеIsFunction = isFunction(значение);

		вернуть this.each ( функция ( я ) {
			вар вал;

			если ( this.nodeType !== 1 ) {
				возвращаться;
			}

			если ( значениеФункция ) {
				val = value.call(это, я, jQuery(это).val());
			} еще {
				значение = значение;
			}

			// Трактовать null/undefined как ""; преобразовать числа в строку
			если (значение == ноль) {
				Вал = "";

			} иначе если ( typeof val === "число" ) {
				вал += "";

			} иначе если (Array.isArray(значение)) {
				значение = jQuery.map (значение, функция (значение) {
					возвращаемое значение == ноль? "" : значение + "";
				});
			}

			крючки = jQuery.valHooks[ this.type ] || jQuery.valHooks[this.nodeName.toLowerCase()];

			// Если set возвращает значение undefined, возвращаемся к обычным настройкам
			if ( !hooks || !( "set" в hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				это.значение = значение;
			}
		});
	}
});

jQuery.extend( {
	валХукс: {
		вариант: {
			получить: функция (элемент) {

				var val = jQuery.find.attr(элемент, "значение");
				вернуть значение != ноль?
					значение:

					// Поддержка: только IE <=10–11
					// option.text генерирует исключения (trac-14686, trac-14858)
					// Удаляем и сворачиваем пробелы
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse (jQuery.text (элемент));
			}
		},
		выбирать: {
			получить: функция (элемент) {
				значение переменной, опция, я,
					опции = элемент.опции,
					индекс = элемент.выбранныйиндекс,
					one = elem.type === "выбрать один",
					значения = один? нулевой : [],
					макс = один? индекс + 1 : параметры.длина;

				если (индекс <0) {
					я = макс;

				} еще {
					я = один? индекс: 0;
				}

				// Перебираем все выбранные опции
				для ( ; я < max; я ++ ) {
					опция = опции [ я ];

					// Поддержка: только IE <=9
					// IE8-9 не обновляет выбранное после сброса формы (trac-2551)
					если ( ( option.selected || i === index ) &&

							// Не возвращать опции, которые отключены или находятся в отключенной группе опций
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Получить конкретное значение для опции
						значение = jQuery(опция).val();

						// Нам не нужен массив для одного выбора
						если один ) {
							возвращаемое значение;
						}

						// Множественный выбор возвращает массив
						значения.push(значение);
					}
				}

				возвращаемые значения;
			},

			набор: функция (элемент, значение) {
				вар optionSet, опция,
					опции = элемент.опции,
					значения = jQuery.makeArray (значение),
					я = параметры.длина;

				в то время как я-- ) {
					опция = опции [ я ];

					/* eslint-disable no-cond-assign */

					если (опция.выбрано =
						jQuery.inArray (jQuery.valHooks.option.get (параметр), значения) > -1
					) {
						набор параметров = истина;
					}

					/* eslint-enable no-cond-assign */
				}

				// Заставить браузеры вести себя последовательно, когда установлено несоответствующее значение
				если ( !Набор параметров ) {
					элемент.selectedIndex = -1;
				}
				возвращаемые значения;
			}
		}
	}
});

// Радио и чекбоксы геттер/сеттер
jQuery.each([ "радио", "флажок" ], function() {
	jQuery.valHooks[это] = {
		набор: функция (элемент, значение) {
			если ( Array.isArray ( значение ) ) {
				return (elem.checked = jQuery.inArray(jQuery(elem).val(), значение) > -1);
			}
		}
	};
	если ( !support.checkOn ) {
		jQuery.valHooks[этот].get = функция(элемент) {
			вернуть elem.getAttribute («значение») === ноль? "включено": элемент.значение;
		};
	}
});




// Возвращаем jQuery для включения только атрибутов


support.focusin = "onfocusin" в окне;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = функция (е) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	триггер: функция (событие, данные, элемент, onlyHandlers) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			путь_события = [элемент || документ ],
			тип = hasOwn.call (событие, «тип»)? event.type : событие,
			пространства имен = hasOwn.call (событие, «пространство имен»)? event.namespace.split( "." ): [];

		cur = lastElement = tmp = elem = elem || документ;

		// Не выполнять события для текстовых узлов и узлов комментариев
		если ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			возвращаться;
		}

		// фокус/размытие превращается в focusin/out; убедитесь, что мы не стреляем в них прямо сейчас
		если ( rfocusMorph.test ( тип + jQuery.event.triggered )) {
			возвращаться;
		}

		если ( type.indexOf ("." ) > -1 ) {

			// Триггер с пространством имен; создайте регулярное выражение для соответствия типу события в handle()
			пространства имен = type.split (".");
			тип = пространства имен.shift();
			пространства имен.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Вызывающий может передать объект jQuery.Event, Object или просто строку типа события
		событие = событие [jQuery.expando]?
			событие :
			новый jQuery.Event (тип, тип события === "объект" && событие);

		// Битовая маска триггера: & 1 для нативных обработчиков; & 2 для jQuery (всегда верно)
		event.isTrigger = onlyHandlers? 2 : 3;
		event.namespace = namespaces.join (".");
		event.rnamespace = event.namespace ?
			новое RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)" ) + "(\\.|$)" ):
			нулевой;

		// Очистить событие, если оно используется повторно
		событие.результат = не определено;
		если (! событие.цель) {
			событие.цель = элемент;
		}

		// Клонируем любые входящие данные и добавляем событие, создавая список аргументов обработчика
		данные = данные == ноль?
			[ событие ] :
			jQuery.makeArray(данные, [событие]);

		// Разрешить специальным событиям рисовать за пределами линий
		специальный = jQuery.event.special[ тип ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			возвращаться;
		}

		// Заранее определить путь распространения события в соответствии со спецификацией событий W3C (trac-9951)
		// Поднимемся к документу, затем к окну; следите за глобальным владельцемDocument var (trac-9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem )) {

			bubbleType = special.delegateType || тип;
			если (!rfocusMorph.test(bubbleType + type)) {
				курс = текущий.родительский узел;
			}
			for ( ; cur; cur = cur.parentNode ) {
				путь_события.push(курс);
				температура = текущий;
			}

			// Добавляем окно, только если мы добрались до документа (например, не обычный объект или отдельный DOM)
			если ( tmp === ( elem.ownerDocument || документ )) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || окно );
			}
		}

		// Обработчики срабатывания на пути события
		я = 0;
		в то время как ( ( ​​cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			последний элемент = текущий;
			event.type = я > 1?
				Тип пузыря:
				специальный.bindType || тип;

			// обработчик jQuery
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ))[ event.type ] &&
				dataPriv.get(cur, "дескриптор");
			если (обрабатывать) {
				handle.apply(cur, data);
			}

			// Собственный обработчик
			дескриптор = ontype && cur[ ontype ];
			если (дескриптор && handle.apply && acceptData(cur)) {
				event.result = handle.apply(cur, data);
				если (событие.результат === ложь) {
					событие.preventDefault();
				}
			}
		}
		событие.тип = тип;

		// Если никто не предотвратил действие по умолчанию, сделайте это сейчас
		если ( !onlyHandlers && !event.isDefaultPrevented() ) {

			если ( ( !специальный._по умолчанию ||
				special._default.apply(eventPath.pop(), data) === false) &&
				acceptData(элемент) ) {

				// Вызов собственного метода DOM для цели с тем же именем, что и у события.
				// Не выполнять действия по умолчанию в окне, здесь должны быть глобальные переменные (trac-6170)
				если ( ontype && isFunction ( элемент [ тип ] ) && ! isWindow ( элемент )) {

					// Не запускать повторно событие onFOO, когда мы вызываем его метод FOO()
					tmp = элемент [тип_элемента];

					если (тмп) {
						элемент[тип] = ноль;
					}

					// Предотвратить повторное срабатывание одного и того же события, так как мы уже подняли его выше
					jQuery.event.triggered = тип;

					если (событие.isPropagationStopped()) {
						lastElement.addEventListener(тип, stopPropagationCallback);
					}

					элемент[ тип ]();

					если (событие.isPropagationStopped()) {
						lastElement.removeEventListener(тип, stopPropagationCallback);
					}

					jQuery.event.triggered = не определено;

					если (тмп) {
						элемент [ontype] = tmp;
					}
				}
			}
		}

		вернуть событие.результат;
	},

	// Совмещение с событием-донором для имитации другого
	// Используется только для событий focus(in | out)
	симулировать: функция (тип, элемент, событие) {
		переменная e = jQuery.extend(
			новый jQuery.Event(),
			событие,
			{
				тип: тип,
				имитируется: правда
			}
		);

		jQuery.event.trigger(e, null, elem);
	}

});

jQuery.fn.extend( {

	триггер: функция (тип, данные) {
		вернуть this.each (функция () {
			jQuery.event.trigger(тип, данные, это);
		});
	},
	triggerHandler: функция (тип, данные) {
		var elem = это [ 0 ];
		если (элемент) {
			вернуть jQuery.event.trigger(тип, данные, элемент, истина);
		}
	}
});


// Поддержка: Firefox <=44
// Firefox не имеет событий focus(in | out)
// Связанный тикет - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Поддержка: Chrome <=48–49, Safari <=9.0–9.1
// события focus(in | out) срабатывают после событий focus & blur,
// что является нарушением спецификации - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Связанный билет - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
если ( !support.focusin ) {
	jQuery.each ({ фокус: "фокус", размытие: "фокус" }, функция (оригинал, исправление) {

		// Прикрепляем к документу один обработчик захвата, пока кто-то хочет сфокусироваться/отключиться
		var обработчик = функция (событие) {
			jQuery.event.simulate(исправить, event.target, jQuery.event.fix(событие));
		};

		jQuery.event.special [исправить] = {
			настройка: функция () {

				// Обработка: обычные узлы (через `this.ownerDocument`), окно
				// (через `this.document`) и документ (через `this`).
				var doc = this.ownerDocument || этот.документ || этот,
					прикрепляет = dataPriv.access (документ, исправление);

				если ( ! прикрепляет ) {
					doc.addEventListener(оригинал, обработчик, правда);
				}
				dataPriv.access( документ, исправление, ( прикрепляет || 0 ) + 1 );
			},
			разборка: функция () {
				var doc = this.ownerDocument || этот.документ || этот,
					прикрепляет = dataPriv.access (документ, исправление) - 1;

				если ( ! прикрепляет ) {
					doc.removeEventListener(оригинал, обработчик, истина);
					dataPriv.remove(документ, исправление);

				} еще {
					dataPriv.access(документ, исправление, вложения);
				}
			}
		};
	});
}
var location = окно.местоположение;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Кроссбраузерный парсинг xml
jQuery.parseXML = функция (данные) {
	вар xml, parserErrorElem;
	если ( !данные || тип данных !== "строка" ) {
		вернуть ноль;
	}

	// Поддержка: только IE 9–11
	// IE выдает parseFromString с недопустимым вводом.
	пытаться {
		xml = (новое окно.DOMParser()).parseFromString(данные, "текст/xml");
	} поймать ( д ) {}

	parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
	если ( !xml || parserErrorElem ) {
		jQuery.error("Неверный XML: " + (
			парсереррорэлем ?
				jQuery.map (parserErrorElem.childNodes, функция (эль) {
					вернуть эл.текстконтент;
				} ).присоединиться( "\n" ):
				данные
		));
	}
	вернуть xml;
};


вар
	скобка = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:отправить|кнопка|изображение|сбросить|файл)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams (префикс, obj, традиционный, добавить) {
	имя вар;

	если ( Array.isArray ( объект ) ) {

		// Сериализация элемента массива.
		jQuery.each(obj, функция(i, v) {
			если ( традиционный || rbracket.test( префикс )) {

				// Рассматривать каждый элемент массива как скаляр.
				добавить (префикс, v);

			} еще {

				// Элемент не скалярный (массив или объект), закодируйте его числовой индекс.
				параметры сборки(
					префикс + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					в,
					традиционный,
					добавлять
				);
			}
		});

	} else if (! традиционный && toType(obj) === "object") {

		// Сериализация элемента объекта.
		для (имя в объекте) {
			buildParams(префикс + "[" + имя + "]", obj[имя], традиционный, добавить);
		}

	} еще {

		// Сериализация скалярного элемента.
		добавить (префикс, объект);
	}
}

// Сериализация массива элементов формы или набора
// ключ/значение в строку запроса
jQuery.param = функция (а, традиционная) {
	вар префикс,
		с = [],
		добавить = функция (ключ, значение или функция) {

			// Если значение является функцией, вызываем ее и используем возвращаемое значение
			значение переменной = isFunction (valueOrFunction)?
				значение или функция ():
				значение или функция;

			s[s.length] = encodeURIComponent(key) + "=" +
				encodeURIComponent(value == null ? "" : value );
		};

	если ( а == ноль ) {
		возвращаться "";
	}

	// Если был передан массив, предположим, что это массив элементов формы.
	если ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a )) ) {

		// Сериализация элементов формы
		jQuery.each( а, функция() {
			добавить(это.имя, это.значение);
		});

	} еще {

		// Если традиционный, кодируйте "старым" способом (способ 1.3.2 или старше
		// сделал это), иначе кодировать параметры рекурсивно.
		для ( префикс в ) {
			buildParams(префикс, [префикс], традиционный, добавить);
		}
	}

	// Возвращаем результирующую сериализацию
	вернуть s.join («&»);
};

jQuery.fn.extend( {
	сериализовать: функция () {
		вернуть jQuery.param(this.serializeArray());
	},
	сериализовать массив: функция () {
		вернуть this.map (функция () {

			// Можно добавить propHook для "элементов" для фильтрации или добавления элементов формы
			var elements = jQuery.prop(это, "элементы");
			вернуть элементы? jQuery.makeArray(элементы): это;
		} ).фильтр( функция() {
			тип переменной = this.type;

			// Используйте .is( ":disabled" ), чтобы fieldset[disabled] работал
			вернуть this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( функция( _i, элемент ) {
			var val = jQuery(это).val();

			если (значение == ноль) {
				вернуть ноль;
			}

			если ( Array.isArray (значение ) ) {
				вернуть jQuery.map (значение, функция (значение) {
					return {имя: имя_элемента, значение: val.replace(rCRLF, "\r\n" )};
				});
			}

			return {имя: имя_элемента, значение: val.replace(rCRLF, "\r\n" )};
		} ).получать();
	}
});


вар
	r20 = /%20/г,
	решетка = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/мг,

	// trac-7653, trac-8125, trac-8152: обнаружение локального протокола
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	рпротокол = /^\/\//,

	/* Префильтры
	 * 1) Они полезны для введения пользовательских типов данных (см. пример ajax/jsonp.js)
	 * 2) Они называются:
	 * - ДО запроса транспорта
	 * - ПОСЛЕ сериализации параметров (s.data является строкой, если s.processData имеет значение true)
	 * 3) ключ - тип данных
	 * 4) можно использовать общий символ "*"
	 * 5) выполнение начнется с транспортного типа данных, а ЗАТЕМ продолжится до "*", если это необходимо
	 */
	префильтры = {},

	/* Транспортирует привязки
	 * 1) ключ - это тип данных
	 * 2) можно использовать общий символ "*"
	 * 3) выбор начнется с типа данных транспорта, а ЗАТЕМ перейдет к "*" при необходимости
	 */
	транспорты = {},

	// Избегайте последовательности символов комментария-пролога (trac-10098); должен успокоить ворс и избежать сжатия
	allTypes = "*/".concat ("*" ),

	// Тег привязки для разбора источника документа
	originAnchor = document.createElement ("a");

originAnchor.href = location.href;

// Базовый «конструктор» для jQuery.ajaxPrefilter и jQuery.ajaxTransport
функция addToPrefiltersOrTransports (структура) {

	// dataTypeExpression является необязательным и по умолчанию имеет значение "*"
	функция возврата (выражение типа данных, функция) {

		если ( typeof dataTypeExpression !== "string" ) {
			функция = выражение типа данных;
			выражение типа данных = "*";
		}

		вар тип данных,
			я = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		если ( isFunction ( функция ) ) {

			// Для каждого типа данных в dataTypeExpression
			в то время как ( ( ​​тип данных = типы данных [ я ++ ] ) ) {

				// Предварительно, если требуется
				если ( тип данных [ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( структура[тип данных ] = структура[тип данных ] || [] ).unshift(func );

				// В противном случае добавить
				} еще {
					( структура[тип данных ] = структура[тип данных ] || [] ).push(func );
				}
			}
		}
	};
}

// Базовая функция проверки префильтров и транспортов
функция inspectPrefiltersOrTransports (структура, параметры, originalOptions, jqXHR) {

	var проверено = {},
		seekTransport = ( структура === транспорты );

	проверка функции (тип данных) {
		выбрана переменная;
		проверенный [тип данных] = истина;
		jQuery.each(структура[dataType] || [], функция(_, prefilterOrFactory) {
			var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
			если ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				проверить (тип данных или транспорт);
				вернуть ложь;
			} иначе если ( ищет транспорт ) {
				вернуть!(выбрано = dataTypeOrTransport);
			}
		});
		вернуть выбранное;
	}

	return inspect(options.dataTypes[0]) || !проверено[ "*" ] && проинспектировано( "*" );
}

// Специальное расширение для параметров ajax
// который принимает "плоские" опции (не для глубокого расширения)
// Исправляет trac-9887
функция ajaxExtend (цель, источник) {
	вар ключ,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	для ( ключ в src ) {
		если (источник [ключ] !== не определено) {
			(flatOptions[ключ]? Цель: (глубокий || (глубокий = {})))[ключ] = src[ключ];
		}
	}
	если ( глубоко ) {
		jQuery.extend(истина, цель, глубина);
	}

	вернуть цель;
}

/* Обрабатывает ответы на запрос ajax:
 * - находит правильный тип данных (посредник между типом контента и ожидаемым типом данных)
 * - возвращает соответствующий ответ
 */
функция ajaxHandleResponses(s, jqXHR, ответы) {

	var ct, тип, finalDataType, firstDataType,
		содержимое = s.contents,
		типы данных = s.типы данных;

	// Удаляем auto dataType и в процессе получаем content-type
	в то время как (типы данных [0] === "*" ) {
		типы данных.shift();
		если ( кт === не определено ) {
			ct = s.mimeType || jqXHR.getResponseHeader ("Тип контента");
		}
	}

	// Проверяем, имеем ли мы дело с известным типом контента
	если (кт) {
		for ( введите содержимое ) {
			если (содержимое [тип] && содержимое[тип].test(ct)) {
				dataTypes.unshift (тип);
				перерыв;
			}
		}
	}

	// Проверяем, есть ли у нас ответ для ожидаемого типа данных
	если ( dataTypes [ 0 ] в ответах ) {
		finalDataType = типы данных [ 0 ];
	} еще {

		// Попробуйте преобразовать типы данных
		для (введите ответы) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes [ 0 ] ] ) {
				конечный тип данных = тип;
				перерыв;
			}
			если ( !firstDataType ) {
				первый тип данных = тип;
			}
		}

		// Или просто используйте первый
		окончательныйТипДанных = окончательныйТипДанных || первый тип данных;
	}

	// Если мы нашли тип данных
	// Добавляем dataType в список, если нужно
	// и возвращаем соответствующий ответ
	если ( конечный тип данных ) {
		если ( finalDataType !== dataTypes [ 0 ] ) {
			dataTypes.unshift(finalDataType);
		}
		вернуть ответы [finalDataType];
	}
}

/* Цепочка преобразований с учетом запроса и исходного ответа
 * Также устанавливает поля responseXXX в экземпляре jqXHR.
 */
функция ajaxConvert(s, ответ, jqXHR, isSuccess) {
	переменная конв2, текущая, конв, временная, предыдущая,
		конвертеры = {},

		// Работаем с копией dataTypes на тот случай, если нам нужно изменить ее для конвертации
		типы данных = s.dataTypes.slice();

	// Создаем карту конвертеров с ключами в нижнем регистре
	если ( типы данных [ 1 ] ) {
		для ( конв в s.converters ) {
			преобразователи[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	текущий = dataTypes.shift();

	// Преобразование в каждый последовательный тип данных
	пока ( текущий ) {

		если ( s.responseFields [ текущий ] ) {
			jqXHR[s.responseFields[текущий]] = ответ;
		}

		// Применяем dataFilter, если он есть
		if ( !prev && isSuccess && s.dataFilter ) {
			ответ = s.dataFilter (ответ, s.dataType);
		}

		предыдущий = текущий;
		текущий = dataTypes.shift();

		если ( текущий ) {

			// Работа возможна только в том случае, если текущий тип данных не является автоматическим
			если ( текущий === "*" ) {

				текущий = предыдущий;

			// Преобразование ответа, если prev dataType не является автоматическим и отличается от текущего
			} else if ( предыдущая !== "*" && предыдущая !== текущая ) {

				// Ищем прямой конвертер
				conv = converters[ предыдущая + " " + текущая ] || преобразователи [ "* " + ток ];

				// Если ничего не найдено, ищем пару
				если ( !конв ) {
					for ( conv2 в преобразователях ) {

						// Если conv2 выводит текущий
						tmp = conv2.split (" ");
						если (tmp[1] === текущий) {

							// Если prev можно преобразовать в принятый ввод
							conv = converters[ предыдущая + " " + tmp[ 0 ] ] ||
								преобразователи [ "* " + tmp [ 0 ] ];
							если ( усл . ) {

								// Конденсированные преобразователи эквивалентности
								если ( conv === true ) {
									конв = конвертеры[конв2];

								// В противном случае вставляем промежуточный тип данных
								} иначе если ( преобразователи[ conv2 ] !== true ) {
									текущий = tmp[0];
									dataTypes.unshift(tmp[1]);
								}
								перерыв;
							}
						}
					}
				}

				// Применить конвертер (если не эквивалент)
				если ( conv !== true ) {

					// Если ошибкам не разрешено всплывать, ловите и возвращайте их
					если ( conv && s.throws ) {
						ответ = конв ( ответ );
					} еще {
						пытаться {
							ответ = конв ( ответ );
						} поймать ( е ) {
							возвращаться {
								состояние: "ошибка синтаксического анализа",
								ошибка: конв ? e : «Нет преобразования из " + предыд. + " в " + текущий"
							};
						}
					}
				}
			}
		}
	}

	return {состояние: "успех", данные: ответ};
}

jQuery.extend( {

	// Счетчик для хранения количества активных запросов
	активно: 0,

	// Кэш заголовков Last-Modified для следующего запроса
	Последнее изменение: {},
	этаг: {},

	ajaxSettings: {
		URL: location.href,
		тип: "ПОЛУЧИТЬ",
		isLocal: rlocalProtocol.test(location.protocol),
		глобальный: правда,
		данные процесса: правда,
		асинхронный: правда,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		тайм-аут: 0,
		данные: ноль,
		тип данных: ноль,
		имя пользователя: ноль,
		пароль: ноль,
		кеш: ноль,
		броски: ложные,
		традиционный: ложный,
		заголовки: {},
		*/

		принимает: {
			"*": все типы,
			текст: "текст/обычный",
			html: "текст/html",
			xml: "приложение/xml, текст/xml",
			json: "приложение/json, текст/javascript"
		},

		содержание: {
			xml: /\bxml\b/,
			HTML: /\bhtml/,
			json: /\bjson\b/
		},

		поля ответа: {
			xml: "ответXML",
			текст: "текст ответа",
			json: "ответJSON"
		},

		// Преобразователи данных
		// Разделяет исходный (или универсальный "*") и конечный типы с помощью одного пробела
		конвертеры: {

			// Преобразование чего-либо в текст
			"* текст": строка,

			// Текст в html (true = без преобразования)
			"текстовый HTML": правда,

			// Оценить текст как выражение json
			"текст json": JSON.parse,

			// Разобрать текст как xml
			"текст XML": jQuery.parseXML
		},

		// Для опций, которые не должны быть глубоко расширены:
		// здесь вы можете добавить свои собственные параметры, если
		// и когда вы создаете тот, который не должен быть
		// глубокое расширение (см. ajaxExtend)
		FlatOptions: {
			адрес: правда,
			контекст: правда
		}
	},

	// Создает полноценный объект настроек в target
	// с полями ajaxSettings и settings.
	// Если цель не указана, записывает в ajaxSettings.
	ajaxSetup: функция (цель, настройки) {
		вернуть настройки?

			// Построение объекта настроек
			ajaxExtend (ajaxExtend (цель, jQuery.ajaxSettings), настройки):

			// Расширение ajaxSettings
			ajaxExtend(jQuery.ajaxSettings, цель);
	},

	ajaxPrefilter: addToPrefiltersOrTransports (префильтры),
	ajaxTransport: addToPrefiltersOrTransports(транспорты),

	// Основной метод
	ajax: функция (URL, параметры) {

		// Если url является объектом, имитируем подпись до версии 1.5
		если ( тип URL === "объект" ) {
			параметры = URL-адрес;
			URL-адрес = не определен;
		}

		// Заставить параметры быть объектом
		опции = опции || {};

		вар транспорт,

			// URL без параметра защиты от кеша
			кешURL,

			// Заголовки ответа
			ответЗаголовкиСтрока,
			ответЗаголовки,

			// дескриптор тайм-аута
			тайм-аутТаймер,

			// Переменная очистки URL
			urlAnchor,

			// Состояние запроса (становится ложным при отправке и истинным после завершения)
			завершенный,

			// Чтобы узнать, должны ли отправляться глобальные события
			огоньGlobals,

			// Переменная цикла
			я,

			// некэшируемая часть URL
			некэшированный,

			// Создаем окончательный объект опций
			s = jQuery.ajaxSetup({}, параметры),

			// Контекст обратных вызовов
			callbackContext = s.context || с,

			// Контекстом для глобальных событий является callbackContext, если это узел DOM или коллекция jQuery
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery )?
				jQuery (контекст обратного вызова):
				jQuery.событие,

			// отложено
			отложенный = jQuery.Отложенный(),
			completeDeferred = jQuery.Callbacks («один раз в памяти»),

			// Обратные вызовы, зависящие от статуса
			statusCode = s.statusCode || {},

			// Заголовки (отправляются все сразу)
			Заголовки запросов = {},
			requestHeadersNames = {},

			// Сообщение об отмене по умолчанию
			стрАборт = "отменено",

			// Поддельный xhr
			jqXHR = {
				состояние готовности: 0,

				// Создает хеш-таблицу заголовков, если это необходимо
				getResponseHeader: функция (ключ) {
					совпадение вар;
					если (завершено) {
						если ( ! ответ заголовки ) {
							ответЗаголовки = {};
							в то время как ( ( ​​match = rheaders.exec ( responseHeadersString )) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat(совпадение[2]);
							}
						}
						match = responseHeaders[key.toLowerCase() + " " ];
					}
					вернуть совпадение == ноль? null : match.join( ", " );
				},

				// Необработанная строка
				getAllResponseHeaders: функция () {
					возврат завершен? строка ответа заголовков: ноль;
				},

				// Кэширует заголовок
				setRequestHeader: функция (имя, значение) {
					если (завершено == ноль) {
						имя = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || имя;
						requestHeaders[имя] = значение;
					}
					вернуть это;
				},

				// Переопределяет заголовок типа содержимого ответа
				overrideMimeType: функция (тип) {
					если (завершено == ноль) {
						s.mimeType = тип;
					}
					вернуть это;
				},

				// Обратные вызовы, зависящие от статуса
				код состояния: функция (карта) {
					код переменной;
					если ( карта ) {
						если (завершено) {

							// Выполняем соответствующие обратные вызовы
							jqXHR.always(карта[jqXHR.статус]);
						} еще {

							// Ленивое добавление новых обратных вызовов таким образом, чтобы сохранить старые
							для ( код на карте ) {
								statusCode[код] = [statusCode[код], map[код]];
							}
						}
					}
					вернуть это;
				},

				// Отменить запрос
				прервать: функция (statusText) {
					var finalText = statusText || стрПрервать;
					если ( транспорт ) {
						transport.abort(finalText);
					}
					сделано (0, окончательный текст);
					вернуть это;
				}
			};

		// Прикрепляем отложенные
		отложенное.обещание( jqXHR );

		// Добавляем протокол, если он не указан (это могут ожидать префильтры)
		// Обработка ложного URL-адреса в объекте настроек (trac-10093: согласованность со старой подписью)
		// Мы также используем параметр url, если он доступен
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace(rprotocol, location.protocol + "//");

		// Вариант метода псевдонима для ввода в соответствии с билетом trac-12004
		s.type = параметры.метод || варианты.тип || с.метод || с.тип;

		// Извлекаем список типов данных
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [""];

		// Междоменный запрос уместен, если источник не совпадает с текущим источником.
		если ( s.crossDomain == null ) {
			urlAnchor = document.createElement ("a");

			// Поддержка: IE <=8–11, Edge 12–15
			// IE выдает исключение при доступе к свойству href, если URL-адрес неверный,
			// например, http://example.com:80x/
			пытаться {
				urlAnchor.href = s.url;

				// Поддержка: только IE <=8–11
				// Свойство хоста Anchor установлено неправильно, если s.url является относительным
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} поймать ( е ) {

				// Если при синтаксическом анализе URL произошла ошибка, предположим, что это междоменный,
				// он может быть отклонен транспортом, если он недействителен
				s.crossDomain = истина;
			}
		}

		// Преобразование данных, если это еще не строка
		если ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param(s.data, s.traditional);
		}

		// Применение префильтров
		inspectPrefiltersOrTransports(предварительные фильтры, параметры, jqXHR);

		// Если запрос был прерван внутри префильтра, останавливаемся на этом
		если (завершено) {
			вернуть jqXHR;
		}

		// Мы можем запускать глобальные события с этого момента, если их попросят
		// Не запускать события, если jQuery.event не определен в сценарии использования AMD (trac-15118)
		fireGlobals = jQuery.event && s.global;

		// Следим за новым набором запросов
		если (fireGlobals && jQuery.active++ === 0) {
			jQuery.event.trigger("ajaxStart");
		}

		// Тип в верхнем регистре
		s.type = s.type.toUpperCase();

		// Определяем, есть ли в запросе содержимое
		s.hasContent = !rnoContent.test( s.type );

		// Сохраняем URL на случай, если мы будем играть с If-Modified-Since
		// и/или заголовок If-None-Match позже
		// Удаляем хеш, чтобы упростить манипулирование URL
		cacheURL = s.url.replace( rhash, "" );

		// Дополнительные параметры для запросов без содержимого
		если ( !s.hasContent ) {

			// Запомним хеш, чтобы мы могли вернуть его обратно
			некэшированный = s.url.slice( cacheURL.length );

			// Если данные доступны и должны быть обработаны, добавляем данные к URL
			если ( s.data && ( s.processData || typeof s.data === "строка") ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// trac-9682: удалить данные, чтобы они не использовались при возможной повторной попытке
				удалить с.данные;
			}

			// Добавляем или обновляем параметр защиты от кеша, если это необходимо
			если (s.cache === ложь) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				некэшированный = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					не кэшированный;
			}

			// Ставим хеш и антикеш на запрашиваемый URL (gh-1732)
			s.url = cacheURL + некэшированный;

		// Измените '%20' на '+', если это закодированное содержимое тела формы (gh-2658)
		} иначе если ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Установить заголовок If-Modified-Since и/или If-None-Match, если в режиме ifModified.
		если ( s.ifModified ) {
			если (jQuery.lastModified[cacheURL]) {
				jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
			}
			если (jQuery.etag[cacheURL]) {
				jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
			}
		}

		// Установить правильный заголовок, если данные отправляются
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader("Content-Type", s.contentType);
		}

		// Устанавливаем заголовок Accepts для сервера, в зависимости от типа данных
		jqXHR.setRequestHeader(
			"Принимать",
			s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
				s.accepts[ s.dataTypes[0]] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ):
				s.accepts [ "*" ]
		);

		// Проверить наличие заголовков
		для (я в s.headers) {
			jqXHR.setRequestHeader(i, s.headers[i]);
		}

		// Разрешить пользовательские заголовки/MIME-типы и досрочное прерывание
		если ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || завершено )) {

			// Прервать, если это еще не сделано, и вернуться
			вернуть jqXHR.abort();
		}

		// Прерывание больше не является отменой
		стрАборт = "прервать";

		// Устанавливаем обратные вызовы на отложенные
		завершитьDeferred.add( s.complete );
		jqXHR.done(s.success);
		jqXHR.сбой(s.ошибка);

		// Получить транспорт
		transport = inspectPrefiltersOrTransports( транспорты, s, опции, jqXHR );

		// Если нет транспорта, мы автоматически прерываем
		если ( ! транспорт ) {
			done(-1, "Нет транспорта");
		} еще {
			jqXHR.readyState = 1;

			// Отправить глобальное событие
			если ( fireGlobals ) {
				globalEventContext.trigger("ajaxSend", [ jqXHR, s ] );
			}

			// Если запрос был прерван внутри ajaxSend, останавливаемся на этом
			если (завершено) {
				вернуть jqXHR;
			}

			// Время ожидания
			если (s.async && s.timeout > 0) {
				timeoutTimer = window.setTimeout (функция () {
					jqXHR.abort( "время ожидания");
				}, s.timeout );
			}

			пытаться {
				завершено = ложь;
				transport.send(заголовки запросов, выполнено);
			} поймать ( е ) {

				// Перегенерировать исключения после завершения
				если (завершено) {
					бросить е;
				}

				// Распространение других как результатов
				сделано(-1,е);
			}
		}

		// Обратный вызов, когда все сделано
		функция выполнена (статус, nativeStatusText, ответы, заголовки) {
			var isSuccess, успех, ошибка, ответ, изменение,
				статусТекст = роднойСтатусТекст;

			// Игнорировать повторные вызовы
			если (завершено) {
				возвращаться;
			}

			завершено = верно;

			// Очистить тайм-аут, если он существует
			если (таймауттаймер) {
				window.clearTimeout(timeoutTimer);
			}

			// Транспорт разыменования для ранней сборки мусора
			// (независимо от того, как долго будет использоваться объект jqXHR)
			транспорт = не определено;

			// Кэшировать заголовки ответа
			responseHeadersString = заголовки || "";

			// Установить состояние готовности
			jqXHR.readyState = статус > 0? 4 : 0;

			// Определяем, успешно ли
			isSuccess = статус >= 200 && статус < 300 || статус === 304;

			// Получить данные ответа
			если ( ответы ) {
				ответ = ajaxHandleResponses(s, jqXHR, ответы);
			}

			// Использовать конвертер noop для отсутствующего скрипта, но не в случае, если jsonp
			если ( !Успех &&
				jQuery.inArray («скрипт», s.dataTypes) > -1 &&
				jQuery.inArray ("json", s.dataTypes) < 0) {
				s.converters["текстовый скрипт"] = function() {};
			}

			// Конвертировать несмотря ни на что (таким образом всегда устанавливаются поля responseXXX)
			ответ = ajaxConvert(s, ответ, jqXHR, isSuccess);

			// В случае успеха обработаем цепочку типов
			если (успех) {

				// Установить заголовок If-Modified-Since и/или If-None-Match, если в режиме ifModified.
				если ( s.ifModified ) {
					модифицированный = jqXHR.getResponseHeader («Последнее изменение»);
					если ( изменено ) {
						jQuery.lastModified[cacheURL] = изменено;
					}
					модифицированный = jqXHR.getResponseHeader ("etag");
					если ( изменено ) {
						jQuery.etag[cacheURL] = изменено;
					}
				}

				// если нет контента
				если (статус === 204 || s.type === "HEAD") {
					статусТекст = "нет содержания";

				// если не изменен
				} иначе если (статус === 304) {
					statusText = "не изменен";

				// Если у нас есть данные, конвертируем их
				} еще {
					текст состояния = ответ.состояние;
					успех = ответ.данные;
					ошибка = ответ.ошибка;
					isSuccess = !ошибка;
				}
			} еще {

				// Извлечь ошибку из statusText и нормализовать для не прерываний
				ошибка = текст состояния;
				если (статус || !statusText) {
					СтатусТекст = "Ошибка";
					если (статус <0) {
						статус = 0;
					}
				}
			}

			// Установить данные для поддельного объекта xhr
			jqXHR.статус = статус;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Успех/Ошибка
			если (успех) {
				deferred.resolveWith(callbackContext, [успех, statusText, jqXHR]);
			} еще {
				deferred.rejectWith(callbackContext, [ jqXHR, statusText, error ] );
			}

			// Обратные вызовы, зависящие от статуса
			jqXHR.statusCode(statusCode);
			код состояния = не определено;

			если ( fireGlobals ) {
				globalEventContext.trigger( isSuccess? "ajaxSuccess": "ajaxError",
					[ jqXHR, s, успех? успех: ошибка]);
			}

			// Полный
			CompleteDeferred.fireWith(callbackContext, [jqXHR, statusText]);

			если ( fireGlobals ) {
				globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

				// Обработка глобального счетчика AJAX
				если ( !( --jQuery.active )) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		вернуть jqXHR;
	},

	getJSON: функция (URL, данные, обратный вызов) {
		вернуть jQuery.get (url, данные, обратный вызов, "json");
	},

	getScript: функция (URL, обратный вызов) {
		return jQuery.get(url, undefined, callback, "script");
	}
});

jQuery.each(["получить", "отправить"], функция(_i, метод) {
	jQuery [метод] = функция (url, данные, обратный вызов, тип) {

		// Изменить аргументы, если аргумент данных был опущен
		если ( isFunction ( данные )) {
			тип = тип || перезвонить;
			обратный вызов = данные;
			данные = не определены;
		}

		// URL-адрес может быть объектом опций (который тогда должен иметь .url)
		вернуть jQuery.ajax( jQuery.extend( {
			адрес: адрес,
			тип: метод,
			тип данных: тип,
			данные: данные,
			успех: обратный вызов
		}, jQuery.isPlainObject(url) && url));
	};
});

jQuery.ajaxPrefilter (функция (ы) {
	вар я;
	для (я в s.headers) {
		если ( i.toLowerCase () === "тип содержимого" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
});


jQuery._evalUrl = функция (URL, параметры, документ) {
	вернуть jQuery.ajax( {
		адрес: адрес,

		// Сделайте это явным, так как пользователь может переопределить это через ajaxSetup (trac-11264)
		тип: "ПОЛУЧИТЬ",
		тип данных: "скрипт",
		кеш: правда,
		асинхронный: ложь,
		глобальный: ложь,

		// Оценивать ответ, только если он успешен (gh-4126)
		// dataFilter не вызывается для ответов об ошибках, поэтому вместо этого используйте его
		// конвертер по умолчанию неудобен, но работает.
		конвертеры: {
			"текстовый скрипт": функция () {}
		},
		фильтр данных: функция (ответ) {
			jQuery.globalEval(ответ, параметры, документ);
		}
	});
};


jQuery.fn.extend( {
	wrapAll: функция (html) {
		вар обернуть;

		если (это [0]) {
			если ( isFunction ( HTML )) {
				html = html.call(это[0]);
			}

			// Элементы для обертывания цели
			wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

			если (это[0].parentNode) {
				wrap.insertBefore(это[0]);
			}

			обернуть.карта (функция () {
				вар элем = это;

				в то время как (элемент.firstElementChild) {
					элемент = элемент.firstElementChild;
				}

				возвратный элемент;
			} ).append(это);
		}

		вернуть это;
	},

	wrapInner: функция (html) {
		если ( isFunction ( HTML )) {
			вернуть this.each ( функция ( я ) {
				jQuery(это).wrapInner(html.call(это, я));
			});
		}

		вернуть this.each (функция () {
			var self = jQuery(это),
				содержимое = self.contents();

			если (содержимое.длина) {
				содержимое.wrapAll(html);

			} еще {
				self.append(html);
			}
		});
	},

	обернуть: функция (html) {
		var htmlIsFunction = isFunction(html);

		вернуть this.each ( функция ( я ) {
			jQuery(это).wrapAll(htmlIsFunction? html.call(это, я): html);
		});
	},

	развернуть: функция (селектор) {
		this.parent(селектор).not("тело").each(функция() {
			jQuery(это).replaceWith(это.дочерние узлы);
		});
		вернуть это;
	}
});


jQuery.expr.pseudos.hidden = функция (элемент) {
	вернуть !jQuery.expr.pseudos.visible(элемент);
};
jQuery.expr.pseudos.visible = функция (элемент) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = функция () {
	пытаться {
		вернуть новое окно.XMLHttpRequest();
	} поймать ( д ) {}
};

вар xhrSuccessStatus = {

		// Файловый протокол всегда выдает код состояния 0, предположим, 200
		0:200,

		// Поддержка: только IE <=9
		// trac-1450: иногда IE возвращает 1223 вместо 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ("withCredentials" в xhrSupported);
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport (функция (параметры) {
	обратный вызов var, errorCallback;

	// Междоменное использование разрешено, только если поддерживается через XMLHttpRequest
	если ( support.cors || xhrSupported && !options.crossDomain ) {
		возвращаться {
			отправить: функция (заголовки, завершено) {
				вар я,
					xhr = параметры.xhr();

				xhr.открыть(
					варианты.тип,
					параметры.url,
					параметры.асинхронный,
					параметры.имя пользователя,
					параметры.пароль
				);

				// Применяем настраиваемые поля, если они есть
				если ( параметры.xhrFields ) {
					для ( я в options.xhrFields ) {
						xhr[i] = options.xhrFields[i];
					}
				}

				// При необходимости переопределить MIME-тип
				если (options.mimeType && xhr.overrideMimeType) {
					xhr.overrideMimeType(options.mimeType);
				}

				// Заголовок X-Requested-With
				// Для междоменных запросов, поскольку условия для предварительной проверки
				// похоже на пазл, мы просто никогда не ставим его на верность.
				// (это всегда можно установить для каждого запроса или даже с помощью ajaxSetup)
				// Для запросов того же домена заголовок не изменится, если он уже предоставлен.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					заголовки["X-Requested-With"] = "XMLHttpRequest";
				}

				// Установить заголовки
				для ( я в заголовках ) {
					xhr.setRequestHeader(i, заголовки[i]);
				}

				// Перезвонить
				обратный вызов = функция (тип) {
					функция возврата () {
						если (обратный вызов) {
							обратный вызов = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = ноль;

							если ( тип === "прервать" ) {
								xhr.прервать();
							} иначе если ( тип === "ошибка" ) {

								// Поддержка: только IE <=9
								// При ручном аварийном завершении IE9 выдает
								// ошибки при любом доступе к свойству, отличному от readyState
								если ( typeof xhr.status !== "число" ) {
									завершить(0, "ошибка");
								} еще {
									полный(

										// Файл: протокол всегда возвращает статус 0; см. дорожку-8605, дорожку-14207
										xhr.status,
										xhr.statusText
									);
								}
							} еще {
								полный(
									xhrSuccessStatus[ xhr.status] || xhr.status,
									xhr.statusText,

									// Поддержка: только IE <=9
									// IE9 не имеет XHR2, но выдает двоичный код (trac-11426)
									// Для нетекстового XHR2 пусть обработает вызывающая сторона (gh-2498)
									( xhr.responseType || "текст" ) !== "текст" ||
									typeof xhr.responseText !== "строка" ?
										{двоичный файл: xhr.response}:
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// trac-14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
// Require that the "whitespace run" starts from a non-whitespace
// to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "$1" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (trac-13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );